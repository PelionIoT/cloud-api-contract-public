swagger: '2.0'
info:
  description: |-
    API to manage account access, authorization, communication and branding.

    See <a href="https://developer.pelion.com/docs/device-management/current/service-api-references/troubleshooting-the-apis.html">Troubleshooting the APIs</a> for information on status and error codes.

    See documentation for [all public APIs](https://developer.pelion.com/docs/device-management/current/service-api-references/service-api-documentation.html).
  version: v3
  title: Account Management API
host: api.us-east-1.mbedcloud.com
tags:
  - name: Account - profile
    description: Manage your organization account profile.
  - name: Account - access keys
    description: Manage access keys.
  - name: Account - API keys
    description: Manage API keys.
  - name: Account - applications
    description: Manage applications.
  - name: Account - email notification logs
    description: Fetch log of email notifications sent on important account events.
  - name: Account - identity providers
    description: Manage identity providers.
  - name: Account - entitlement limitations
    description: Fetch entitlement limitations for features, transactions and storage.
  - name: Account - policy groups
    description: Manage policy groups.
  - name: Account - user invitations
    description: Manage user invitations.
  - name: Account - users
    description: Manage users.
  - name: Security and identity - certificates
    description: Manage trusted certificates.
  - name: Security and identity - OEM certificates
    description: Manage OEM certificates.
  - name: User interface configuration - colors
    description: Manage branding colors in the service portal UI.
  - name: User interface configuration - images
    description: Manage branding images in the service portal UI.
  - name: Tenant accounts - accounts
    description: Create a tenant account or manage profiles.
  - name: Tenant accounts - access keys
    description: Manage access keys of a tenant account.
  - name: Tenant accounts - API keys
    description: Manage API keys of a tenant account.
  - name: Tenant accounts - applications
    description: Manage applications of a tenant account.
  - name: Tenant accounts - identity providers
    description: Manage identity providers of a tenant account.
  - name: Tenant accounts - entitlement limitations
    description: Fetch entitlement limitations for features, transactions and storage of a tenant account.
  - name: Tenant accounts - policy groups
    description: Manage policy groups of a tenant account.
  - name: Tenant accounts - user invitations
    description: Manage user invitations of a tenant account.
  - name: Tenant accounts - users
    description: Manage users of a tenant account.
  - name: Tenant accounts - email notification logs
    description: Fetch email notifications sent on important events of a tenant account.
  - name: Tenant security and identity - certificates
    description: Manage trusted certificates of a tenant account.
  - name: Tenant security and identity - OEM certificates
    description: Manage OEM certificates of a tenant account.
  - name: Tenant user interface configuration - colors
    description: Manage branding colors in the service portal UI of a tenant account.
  - name: Tenant user interface configuration - images
    description: Manage branding images in the service portal UI of a tenant account.
schemes:
  - https
x-aliases:
  discovery_param: &discovery_param
    - in: query
      name: discovery
      description: 'Indicates that the OpenID Connect endpoints and keys should be set using the OpenID Connect Discovery mechanism. The following parameters are set automatically:
      * authorization_endpoint
      * token_endpoint
      * userinfo_endpoint
      * revocation_endpoint
      * jwks_uri
      * keys'
      type: boolean
      allowEmptyValue: true
  branding_colors: &branding_colors
    enum:
      - error_color
      - primary
      - secondary
      - success_color
      - warning_color
      - canvas_background
      - canvas_background_font_color
      - workspace_background
      - workspace_background_font_color
      - info_color
      - info_font_color
      - primary_font_color
      - secondary_font_color
      - error_font_color
      - success_font_color
      - warning_font_color
      - menu_background_color
      - menu_text_color
      - nav_menu_background
      - nav_menu_background_font_color
      - nav_menu_active_background
      - nav_menu_active_background_font_color
      - nav_menu_highlight
      - nav_menu_highlight_font_color
  branding_color_param: &branding_color_param
    - name: reference
      in: path
      description: The name of the branding color.
      required: true
      type: string
      <<: *branding_colors
  branding_images: &branding_images
    enum:
      - brand_logo_portrait
      - brand_logo_square
      - brand_logo_landscape
      - brand_logo_email
      - app_logo_landscape
      - app_logo_portrait
      - app_logo_square
      - desktop_background_landscape
      - desktop_background_square
      - desktop_background_portrait
      - carousel_image_portrait_0
      - carousel_image_portrait_1
      - carousel_image_portrait_2
      - carousel_image_portrait_3
      - carousel_image_portrait_4
      - carousel_image_portrait_5
      - carousel_image_portrait_6
      - carousel_image_portrait_7
      - carousel_image_portrait_8
      - carousel_image_portrait_9
      - carousel_image_square_0
      - carousel_image_square_1
      - carousel_image_square_2
      - carousel_image_square_3
      - carousel_image_square_4
      - carousel_image_square_5
      - carousel_image_square_6
      - carousel_image_square_7
      - carousel_image_square_8
      - carousel_image_square_9
      - carousel_image_landscape_0
      - carousel_image_landscape_1
      - carousel_image_landscape_2
      - carousel_image_landscape_3
      - carousel_image_landscape_4
      - carousel_image_landscape_5
      - carousel_image_landscape_6
      - carousel_image_landscape_7
      - carousel_image_landscape_8
      - carousel_image_landscape_9
  branding_image_param: &branding_image_param
    - name: reference
      in: path
      description: Name of the branding images (icon or picture).
      required: true
      type: string
      <<: *branding_images
  email_pattern: &email_pattern
    pattern: '^(?=.{3,254}$).+\@.+'
  username_pattern: &username_pattern
    pattern: '[\w\-,._@+=]{4,30}'

paths:
  /v3/accounts:
    get:
      tags:
        - Tenant accounts - accounts
      summary: Get all accounts.
      description: |-
        Retrieve an array of tenant accounts, optionally filtered by status and tier level.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAllAccounts
      produces:
        - application/json
      parameters:
        - name: status__eq
          in: query
          description: 'An optional filter for account status, ENROLLING, ACTIVE, RESTRICTED, or SUSPENDED.'
          required: false
          type: string
        - name: status__in
          in: query
          description: An optional filter to retrieve accounts with a specified set of statuses.
          required: false
          type: string
        - name: status__nin
          in: query
          description: An optional filter to exclude accounts with a specified set of statuses.
          required: false
          type: string
        - name: tier__eq
          in: query
          description: 'An optional filter for tier level. Must be 0, 1, 2, 98, 99, or omitted.'
          required: false
          type: string
        - name: parent__eq
          in: query
          description: An optional filter for parent account ID.
          required: false
          type: string
        - name: end_market__eq
          in: query
          description: An optional filter for account end market.
          required: false
          type: string
        - name: country__like
          in: query
          description: 'An optional filter for account country. Finds all matches where the filter value is a case-insensitive substring of the result. Example: country__like=LAND matches Ireland.'
          required: false
          type: string
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 1000.'
          required: false
          type: integer
          default: 1000
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: limits, policies, sub_accounts, history.'
          required: false
          type: string
        - name: format
          in: query
          description: 'Format information for the query response. Supported: format=breakdown.'
          required: false
          type: string
        - name: properties
          in: query
          description: Property name returned from account-specific properties.
          required: false
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/AccountInfoList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - Tenant accounts - accounts
      summary: Create a new account.
      description: |-
        Create a new account.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{"display_name": "MyAccount1", "aliases": [ "my-account" ], "admin_name": "accountAdmin1", "email": "example_admin@myaccount.info", "country": "United Kingdom", "end_market": "Smart City", "address_line1": "110 Fulbourn Rd", "city": "Cambridge", "contact": "J. Doe", "company": "Arm"}'
        ```
      operationId: createAccount
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Details of the account to create.
          required: true
          schema:
            $ref: '#/definitions/AccountCreationReq'
        - name: action
          in: query
          description: |-
            Action, either `create` or `enroll`.
            <ul>
            <li>`create` creates an account and also creates a new admin  if a user with the specified email address does not exist. </li>
            <li>`enroll` creates an account and enrolls a new admin user. The user receives an email with link to finish the enrollment or a notification message about the new account. </li></ul>
          required: false
          type: string
          default: create
      responses:
        '201':
          description: Successful operation.
          schema:
            $ref: '#/definitions/AccountCreationResp'
        '400':
          description: 'Error in input data, for example, invalid username.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Account with the specified alias exists already.
          schema:
            $ref: '#/definitions/ErrorResponse'
  /v3/accounts/me:
    get:
      tags:
        - Account - profile
      summary: Get account information.
      description: |-
        Retrieve information about the account.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/me?include=policies \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getMyAccountInfo
      produces:
        - application/json
      parameters:
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: limits, policies, sub_accounts.'
          required: false
          type: string
        - name: properties
          in: query
          description: Property name to return from account-specific properties.
          required: false
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/AccountInfo'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - Account - profile
      summary: Updates attributes of the account.
      description: |-
        Update the account.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/me \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{"phone_number": "12345678"}'
        ```
      operationId: updateMyAccount
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Details of the account to update.
          required: true
          schema:
            $ref: '#/definitions/AccountUpdateReq'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/AccountInfo'
        '400':
          description: Error in input data format.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
  /v3/accounts/me/notifications:
    get:
      tags:
        - Account - email notification logs
      summary: Get logs of email notifications.
      description: Retrieve an array of email notification logs.
      operationId: getNofificationEntries
      produces:
        - application/json
      parameters:
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/NotificationEntryList'
        '400':
          description: 'Error in input data, or missing or invalid parameters.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
  /v3/accounts/me/subtenant-configuration:
    get:
      tags:
        - Account - branding configuration
      summary: Get branding configuration of the subtenant.
      description: |-
        Retrieve branding configuration.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**

        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/me/subtenant-configuration \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getSubtenantConfiguration
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/SubtenantConfiguration'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - Account - branding configuration
      summary: Updates branding configuration of the subtenant.
      description: |-
        Updates branding configuration.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/me/subtenant-configuration \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{"branding_inherited": "false"}'
        ```
      operationId: updateSubtenantConfiguration
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Details of the subtenant's branding configuration to update.
          required: true
          schema:
            $ref: '#/definitions/SubtenantConfiguration'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/SubtenantConfiguration'
        '400':
          description: Error in input data format.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/me/notifications/{notification_id}':
    get:
      tags:
        - Account - email notification logs
      summary: Get an email notification.
      description: Retrieve an email notification log entry.
      operationId: getNofificationEntry
      produces:
        - application/json
      parameters:
        - name: notification_id
          in: path
          description: The ID of the log entry to be retrieved.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/NotificationEntry'
        '400':
          description: 'Error in input data, missing or invalid parameters.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: No entry found for the given ID.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}':
    get:
      tags:
        - Tenant accounts - accounts
      summary: Get account information.
      description: |-
        Retrieve detailed information about an account.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**

        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAccountInfo
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account to retrieve.
          required: true
          type: string
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: limits, policies, sub_accounts, history.'
          required: false
          type: string
        - name: properties
          in: query
          description: Property name to return from account-specific properties.
          required: false
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/AccountInfo'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account with the given ID not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - Tenant accounts - accounts
      summary: Update attributes of an existing account.
      description: |-
        Update an account.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**

        ```
        curl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id} \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{"phone_number": "12345678"}'
        ```
      operationId: updateAccount
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account to update.
          required: true
          type: string
        - in: body
          name: body
          description: Details of the account to update.
          required: true
          schema:
            $ref: '#/definitions/AccountUpdateRootReq'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/AccountInfo'
        '400':
          description: Error in input data format.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account with the given ID not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Account with the specified new alias exists already.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/api-keys':
    get:
      tags:
        - Tenant accounts - API keys
      summary: Get all API keys.
      description: |-
        Retrieve an array of API keys, optionally filtered by the owner.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/api-keys \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAllAccountApiKeys
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: total_count.'
          required: false
          type: string
        - name: key__eq
          in: query
          description: API key filter. Do not include the private portion of the API key (the last 32 characters).
          required: false
          type: string
        - name: owner__eq
          in: query
          description: Owner name filter.
          required: false
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ApiKeyInfoRespList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account with the given ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2020-08-01T00:00:00+00:00"
        end_of_life_at: "2021-08-01T00:00:00+00:00"
        comment: This endpoint is deprecated. Use GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/applications/{application_id}/access-keys
        links: []
    post:
      tags:
        - Tenant accounts - API keys
      summary: Create a new API key.
      description: |-
        Create a new API key. There is no default value for the owner ID, and it must be from the same account where the new API key is created.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/api-keys \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{"name": "MyKey1"}'
        ```
      operationId: createAccountApiKey
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - in: body
          name: body
          description: Details of the API key to create.
          required: true
          schema:
            $ref: '#/definitions/ApiKeyInfoReq'
      responses:
        '201':
          description: New entity created.
          schema:
            $ref: '#/definitions/ApiKeyInfoResp'
        '400':
          description: 'Error in input data, for example, missing API key name.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account with the given ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2020-08-01T00:00:00+00:00"
        end_of_life_at: "2021-08-01T00:00:00+00:00"
        comment: This endpoint is deprecated. Use POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/applications/{application_id}/access-keys
        links: []
  '/v3/accounts/{account_id}/api-keys/{apikey_id}':
    get:
      tags:
        - Tenant accounts - API keys
      summary: Get API key details.
      description: |-
        Retrieve details of an API key.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/api-keys/{apikey_id} \
         -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAccountApiKey
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: apikey_id
          in: path
          description: The ID of the API key to retrieve.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ApiKeyInfoResp'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or API key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2020-08-01T00:00:00+00:00"
        end_of_life_at: "2021-08-01T00:00:00+00:00"
        comment: This endpoint is deprecated. Use GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/applications/{application_id}/access-keys/{access_key_id}
        links: []
    put:
      tags:
        - Tenant accounts - API keys
      summary: Update API key details.
      description: |-
        Update API key details.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/api-keys/{apikey_id} \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{"name": "TestApiKey25"}'
        ```
      operationId: updateAccountApiKey
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: apikey_id
          in: path
          description: The ID of the API key to update.
          required: true
          type: string
        - in: body
          name: body
          description: New API key attributes to be stored.
          required: true
          schema:
            $ref: '#/definitions/ApiKeyUpdateReq'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ApiKeyInfoResp'
        '400':
          description: 'Error in input data, for example, invalid API key name.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account ID or API key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2020-08-01T00:00:00+00:00"
        end_of_life_at: "2021-08-01T00:00:00+00:00"
        comment: This endpoint is deprecated. Use PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/applications/{application_id}/access-keys/{access_key_id}
        links: []
    delete:
      tags:
        - Tenant accounts - API keys
      summary: Delete the API key.
      description: |-
        Delete an API key.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/api-keys/{apikey_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: deleteAccountApiKey
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: apikey_id
          in: path
          description: The ID of the API key to delete.
          required: true
          type: string
      responses:
        '204':
          description: Deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or API key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2020-08-01T00:00:00+00:00"
        end_of_life_at: "2021-08-01T00:00:00+00:00"
        comment: This endpoint is deprecated. Use DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/applications/{application_id}/access-keys/{access_key_id}
        links: []
  '/v3/accounts/{account_id}/api-keys/{apikey_id}/groups':
    get:
      tags:
        - Tenant accounts - API keys
      summary: Get policy groups of an API key.
      description: |-
        Retrieve an array of policy groups associated with an API key.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/api-keys/{apikey_id}/groups \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getGroupsOfAccountApikey
      produces:
        - application/json
      parameters:
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: total_count.'
          required: false
          type: string
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: apikey_id
          in: path
          description: The ID of the API key.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummaryList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or API key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2020-08-01T00:00:00+00:00"
        end_of_life_at: "2021-08-01T00:00:00+00:00"
        comment: This endpoint is deprecated. Use GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/applications/{application_id}/groups
        links: []
    post:
      tags:
        - Tenant accounts - API keys
      summary: Add API key to a list of groups.
      description: |-
        Add API key to groups.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/api-keys/{apikey_id}/groups \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]'
        ```
      operationId: addAccountApiKeyToGroups
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: apikey_id
          in: path
          description: The ID of the API key to add to the group.
          required: true
          type: string
        - in: body
          name: body
          description: A list of IDs of groups to update.
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ApiKeyInfoResp'
        '400':
          description: Error in input data.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or API key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: The API key is a member of the group already.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2019-07-11T11:04:57+00:00"
        end_of_life_at: "2020-07-11T11:04:57+00:00"
        comment: This endpoint is deprecated. Use POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/api-keys/{apikey_id}/groups/add/
        links: []
    delete:
      tags:
        - Tenant accounts - API keys
      summary: Remove API key from groups.
      description: |-
        Remove API key from groups.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/api-keys/{apikey_id}/groups \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]'
        ```
      operationId: removeAccountApiKeyFromGroups
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: apikey_id
          in: path
          description: The ID of the API key to remove from the group.
          required: true
          type: string
        - in: body
          name: body
          description: A list of IDs of the groups to update.
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ApiKeyInfoResp'
        '400':
          description: Error in input data.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or API key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2019-07-11T11:04:57+00:00"
        end_of_life_at: "2020-07-11T11:04:57+00:00"
        comment: This endpoint is deprecated. Use POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/api-keys/{apikey_id}/groups/remove/
        links: []
  '/v3/accounts/{account_id}/api-keys/{apikey_id}/groups/add':
    post:
      tags:
        - Tenant accounts - API keys
      summary: Add API key to a list of groups.
      description: |-
        Add an API key to groups.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/api-keys/{apikey_id}/groups/add \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]'
        ```
      operationId: addAccountApiKeyToListedGroups
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the Account.
          required: true
          type: string
        - name: apikey_id
          in: path
          description: The ID of the API key to add to the group.
          required: true
          type: string
        - in: body
          name: body
          description: A list of IDs of groups to update.
          required: true
          schema:
            $ref: '#/definitions/GroupIdList'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ApiKeyInfoResp'
        '400':
          description: Error in input data.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or API key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: The API key is a member of the group already.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2020-08-01T00:00:00+00:00"
        end_of_life_at: "2021-08-01T00:00:00+00:00"
        comment: This endpoint is deprecated. Use GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/applications/{application_id}/access-keys/groups/add
        links: []
  '/v3/accounts/{account_id}/api-keys/{apikey_id}/groups/remove':
    post:
      tags:
        - Tenant accounts - API keys
      summary: Remove API key from groups.
      description: |-
        Remove an API key from groups.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/api-keys/{apikey_id}/groups/remove \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]'
        ```
      operationId: removeAccountApiKeyFromListedGroups
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
        - name: apikey_id
          in: path
          description: The ID of the API key to remove from the group.
          required: true
          type: string
        - in: body
          name: body
          description: A list of IDs of the groups to update.
          required: true
          schema:
            $ref: '#/definitions/GroupIdList'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ApiKeyInfoResp'
        '400':
          description: Error in input data.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or API key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2020-08-01T00:00:00+00:00"
        end_of_life_at: "2021-08-01T00:00:00+00:00"
        comment: This endpoint is deprecated. Use GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/applications/{application_id}/groups/remove
        links: []
  '/v3/accounts/{account_id}/api-keys/{apikey_id}/reset-secret':
    post:
      tags:
        - Tenant accounts - API keys
      summary: Reset the secret key.
      description: |-
        Reset the secret key of the API key.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/api-keys/{apikey_id}/reset-secret \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: resetAccountApiKeySecret
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: apikey_id
          in: path
          description: The ID of the API key to reset.
          required: true
          type: string
        - in: body
          name: body
          description: New API key attributes to be stored.
          required: false
          schema:
            $ref: '#/definitions/ApiKeyUpdateReq'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ApiKeyInfoResp'
        '400':
          description: Error in input data format.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or API key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2020-08-01T00:00:00+00:00"
        end_of_life_at: "2021-08-01T00:00:00+00:00"
        comment: This endpoint is deprecated.
        links: []
  '/v3/accounts/{account_id}/access-keys':
    get:
      tags:
        - Tenant accounts - access keys
      summary: Get all access keys.
      description: |-
        Retrieve an array of access keys.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/access-keys \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAllAccountAccessKeys
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account to retrieve.
          required: true
          type: string
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: total_count.'
          required: false
          type: string
        - name: status__eq
          in: query
          description: Status filter.
          required: false
          type: string
        - name: application_id__eq
          in: query
          description: Application filter.
          required: false
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/AccessKeyList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/access-keys/{access_key_id}':
    get:
      tags:
        - Tenant accounts - access keys
      summary: Get access key.
      description: |-
        Retrieve details of an access key.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/access-keys/{access_key_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAccountAccessKey
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account to retrieve.
          required: true
          type: string
        - name: access_key_id
          in: path
          description: The ID of the access key to retrieve.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/AccessKey'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or access key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
  /v3/accounts/{account_id}/applications:
    get:
      tags:
        - Tenant accounts - applications
      summary: Get all applications.
      description: |-
        Retrieve an array of applications.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/applications \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAllAccountApplications
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account to retrieve.
          required: true
          type: string
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: total_count.'
          required: false
          type: string
        - name: status__eq
          in: query
          description: Status filter.
          required: false
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/ApplicationList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - Tenant accounts - applications
      summary: Create a new application.
      description: |-
        Create a new application.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/applications -d '{"name": "MyApplication1"}' \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json'
        ```
      operationId: createAccountApplication
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account to retrieve.
          required: true
          type: string
        - in: body
          name: body
          description: The details of the application to create.
          required: true
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/Application'
      responses:
        '201':
          description: New entity created.
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/Application'
        '400':
          description: 'Error in input data, for example, missing name.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/applications/{application_id}':
    get:
      tags:
        - Tenant accounts - applications
      summary: Get application.
      description: |-
        Retrieve details of an application.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/applications/{application_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAccountApplication
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account to retrieve.
          required: true
          type: string
        - name: application_id
          in: path
          description: The ID of the application to retrieve.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/Application'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or application with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - Tenant accounts - applications
      summary: Update application details.
      description: |-
        Update application details.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```curl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/applications/{application_id} \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{"name": "TestApplication25"}'
        ```
      operationId: updateAccountApplication
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account to retrieve.
          required: true
          type: string
        - name: application_id
          in: path
          description: The ID of the application to update.
          required: true
          type: string
        - in: body
          name: body
          description: New applicationattributes to store.
          required: true
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/Application'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ApiKeyInfoResp'
        '400':
          description: 'Error in input data, for example, invalid display name.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or application with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - Tenant accounts - applications
      summary: Delete application.
      description: |-
        Delete the application.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/applications/{application_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: deleteAccountApplication
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account to retrieve.
          required: true
          type: string
        - name: application_id
          in: path
          description: The ID of the application to delete.
          required: true
          type: string
      responses:
        '204':
          description: Deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or application with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/applications/{application_id}/access-keys':
    get:
      tags:
        - Tenant accounts - applications
      summary: Get all access keys associated with the application.
      description: |-
        Retrieve an array of access keys associated with the application.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/applications/{application_id}/access-keys \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAllAccountApplicationAccessKeys
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account to retrieve.
          required: true
          type: string
        - name: application_id
          in: path
          description: The ID of the application.
          required: true
          type: string
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: total_count.'
          required: false
          type: string
        - name: status__eq
          in: query
          description: Status filter.
          required: false
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/AccessKeyList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or application with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - Tenant accounts - applications
      summary: Create a new application access key.
      description: |-
        Create a new access key for the application.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/applications/{application_id}/access-keys -d '{"name": "MyKey1"}' \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json'
        ```
      operationId: createAccountApplicationAccessKey
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account to retrieve.
          required: true
          type: string
        - name: application_id
          in: path
          description: The ID of the application.
          required: true
          type: string
        - in: body
          name: body
          description: The details of the access key to create.
          required: true
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/AccessKey'
      responses:
        '201':
          description: New entity created.
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/AccessKey'
        '400':
          description: 'Error in input data, for example, missing display name.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or application with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/applications/{application_id}/access-keys/{access_key_id}':
    get:
      tags:
        - Tenant accounts - applications
      summary: Get access key.
      description: |-
        Retrieve details of an access key associated with the application.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/applications/{application_id}/access-keys/{access_key_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAccountApplicationAccessKey
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account to retrieve.
          required: true
          type: string
        - name: application_id
          in: path
          description: The ID of the application.
          required: true
          type: string
        - name: access_key_id
          in: path
          description: The ID of the access key to retrieve.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/AccessKey'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account, application or access key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - Tenant accounts - applications
      summary: Update access key details.
      description: |-
        Update access key details.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```curl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/applications/{application_id}/access-keys/{access_key_id} \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{"name": "TestAccessKey"}'
        ```
      operationId: updateAccountApplicationAccessKey
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account to retrieve.
          required: true
          type: string
        - name: application_id
          in: path
          description: The ID of the application.
          required: true
          type: string
        - name: access_key_id
          in: path
          description: The ID of the access key to update.
          required: true
          type: string
        - in: body
          name: body
          description: New access key attributes to store.
          required: true
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/AccessKey'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/AccessKey'
        '400':
          description: 'Error in input data, for example, invalid display name.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account, application or access key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - Tenant accounts - applications
      summary: Delete access key associated with the application.
      description: |-
        Delete the access key associated with the application.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/applications/{application_id}/access-keys/{access_key_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: deleteAccountApplicationAccessKey
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account to retrieve.
          required: true
          type: string
        - name: application_id
          in: path
          description: The ID of the application.
          required: true
          type: string
        - name: access_key_id
          in: path
          description: The ID of the access key to delete.
          required: true
          type: string
      responses:
        '204':
          description: Deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account, application or access key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/applications/{application_id}/verification-keys':
    get:
      tags:
        - Tenant accounts - applications
      summary: Get all verification keys associated with the application.
      description: |-
        Retrieve an array of verification keys associated with the application.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/applications/{application_id}/verification-keys \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAllAccountApplicationVerificationKeys
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account to manage.
          required: true
          type: string
        - name: application_id
          in: path
          description: The ID of the application.
          required: true
          type: string
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: total_count.'
          required: false
          type: string
        - name: issuer__eq
          in: query
          description: Issuer filter.
          required: false
          type: string
        - name: subject__eq
          in: query
          description: Subject filter.
          required: false
          type: string
        - name: fingerprint__eq
          in: query
          description: Fingerprint filter.
          required: false
          type: string
        - name: status__eq
          in: query
          description: Status filter.
          required: false
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/VerificationKeyList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or application with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - Tenant accounts - applications
      summary: Create a new verification key.
      description: |-
        Create a new verification key for the application.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/applications/{application_id}/verification-keys -d '{"name": "MyKey1", "certificate": "..." }' \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json'
        ```
      operationId: createAccountApplicationVerificationKey
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account to manage.
          required: true
          type: string
        - name: application_id
          in: path
          description: The ID of the application.
          required: true
          type: string
        - in: body
          name: body
          description: The details of the verification key to create.
          required: true
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/VerificationKey'
      responses:
        '201':
          description: New entity created.
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/VerificationKey'
        '400':
          description: 'Error in input data, for example, missing display name.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or application with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: A verification key with the given name or certificate exists in the account already.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/applications/{application_id}/verification-keys/{verification_key_id}':
    get:
      tags:
        - Tenant Accounts - applications
      summary: Get verification key.
      description: |-
        Retrieve details of a verification key associated with the application.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/applications/{application_id}/verification-keys/{verification_key_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAccountApplicationVerificationKey
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account to manage.
          required: true
          type: string
        - name: application_id
          in: path
          description: The ID of the application.
          required: true
          type: string
        - name: verification_key_id
          in: path
          description: The ID of the verification key to retrieve.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/VerificationKey'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account, application or verification key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - Tenant accounts - applications
      summary: Update verification key details.
      description: |-
        Update verification key details.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/applications/{application_id}/verification-keys/{verification_key_id} \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{"name": "TestVerificationKey"}'
        ```
      operationId: updateAccountApplicationVerificationKey
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account to manage.
          required: true
          type: string
        - name: application_id
          in: path
          description: The ID of the application.
          required: true
          type: string
        - name: verification_key_id
          in: path
          description: The ID of the verification key to update.
          required: true
          type: string
        - in: body
          name: body
          description: New verification key attributes to store.
          required: true
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/VerificationKey'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/VerificationKey'
        '400':
          description: 'Error in input data, for example, invalid display name.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account, application or verification key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: A verification key with the given name or certificate exists in the account already.
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - Tenant accounts - applications
      summary: Delete verification key associated with the application.
      description: |-
        Delete the verification key associated with the application.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/applications/{application_id}/verification-keys/{verification_key_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: deleteAccountApplicationVerificationKey
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account to manage.
          required: true
          type: string
        - name: application_id
          in: path
          description: The ID of the application.
          required: true
          type: string
        - name: verification_key_id
          in: path
          description: The ID of the verification key to delete.
          required: true
          type: string
      responses:
        '204':
          description: Deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account, application or verification key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/applications/{application_id}/groups':
    get:
      tags:
        - Tenant accounts - applications
      summary: Get policy groups of an application.
      description: |-
        Retrieve an array of policy groups associated with an application.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/applications/{application_id}/groups \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getGroupsOfAccountApplication
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account to retrieve.
          required: true
          type: string
        - name: application_id
          in: path
          description: The ID of the application.
          required: true
          type: string
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: total_count.'
          required: false
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummaryList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or application with the given ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/applications/{application_id}/groups/add':
    post:
      tags:
        - Tenant accounts - applications
      summary: Add application to a list of groups.
      description: |-
        Add application to groups.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/applications/{application_id}/groups/add \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]'
        ```
      operationId: addAccountApplicationToGroups
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account to retrieve.
          required: true
          type: string
        - name: application_id
          in: path
          description: The ID of the application to add to the group.
          required: true
          type: string
        - in: body
          name: body
          description: A list of IDs of the groups to update.
          required: true
          schema:
            $ref: '#/definitions/GroupIdList'
      responses:
        '204':
          description: Successful operation.
        '400':
          description: Error in input data.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account, a group or application with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: The application is a member of the group already.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/applications/{application_id}/groups/remove':
    post:
      tags:
        - Tenant accounts - applications
      summary: Remove application from groups.
      description: |-
        Remove application from groups.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/applications/{application_id}/groups/remove \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]'
        ```
      operationId: removeAccountApplicationFromGroups
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account to retrieve.
          required: true
          type: string
        - name: application_id
          in: path
          description: The ID of the application to remove from the group.
          required: true
          type: string
        - in: body
          name: body
          description: A list of IDs of the groups to update.
          required: true
          schema:
            $ref: '#/definitions/GroupIdList'
      responses:
        '204':
          description: Successful operation.
        '400':
          description: 'Error in input data, for example, invalid group ID.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or application with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/branding-colors':
    delete:
      tags:
        - Tenant user interface configuration - colors
      summary: Delete all colors.
      description: |-
        Delete account branding colors for all themes.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example usage:**
        `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-colors -H 'Authorization: Bearer <access_key>'`
      operationId: deleteAllAccountColors
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
      responses:
        '204':
          description: Colors have been deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account or branding colors not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/branding-colors/dark':
    get:
      tags:
        - Tenant user interface configuration - colors
      summary: Get dark theme branding colors.
      description: |-
        Retrieve dark theme branding colors for an account.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-colors/dark \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAccountDarkColors
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/BrandingColorList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - Tenant user interface configuration - colors
      summary: Updates an array of dark theme branding colors.
      description: |-
        Update an array of dark theme branding colors.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id)/branding-colors/dark \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        '[{ "reference": "primary",
           "color": "#f3f93e" }]'
        ```
      operationId: bulkSetAccountDarkColors
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
        - in: body
          name: body
          description: List of branding colors.
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/BrandingColorUpdate'
      responses:
        '204':
          description: Colors have been set successfully.
        '400':
          description: Error in input data format.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - Tenant user interface configuration - colors
      summary: Delete colors in the dark theme.
      description: |-
        Delete account dark theme branding colors.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example usage:**
        `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-colors/dark -H 'Authorization: Bearer <access_key>'`
      operationId: deleteAllAccountDarkColors
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
      responses:
        '204':
          description: Colors have been deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account or branding colors not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/branding-colors/dark/{reference}':
    get:
      tags:
         - Tenant user interface configuration - colors
      summary: Get dark theme branding color.
      description: |-
        Retrieve the requested dark theme branding color.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-colors/dark/{reference} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAccountDarkColor
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
        - <<: *branding_color_param
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/BrandingColor'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Color or account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - Tenant user interface configuration - colors
      summary: Updates a dark theme branding color.
      description: |-
        Update a dark theme branding color.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id)/branding-colors/dark/primary \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{ "color": "#f3f93e" }'
        ```
      operationId: setAccountDarkColor
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
        - <<: *branding_color_param
        - in: body
          name: body
          description: The branding color.
          required: true
          schema:
            $ref: '#/definitions/BrandingColor'
      responses:
        '200':
          description: Color has been set successfully.
          schema:
            $ref: '#/definitions/BrandingColor'
        '400':
          description: Error in input data format.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Color or account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - Tenant user interface configuration - colors
      summary: Reset branding color to default.
      description: |-
        Resets the branding color to its dark theme default.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-colors/dark/{reference} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: resetAccountDarkColor
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
        - <<: *branding_color_param
      responses:
        '204':
          description: Deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Color or account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/branding-colors/light':
    get:
      tags:
        - Tenant user interface configuration - colors
      summary: Get light theme branding colors.
      description: |-
        Retrieve light theme branding colors for an account.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-colors/light \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAccountLightColors
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/BrandingColorList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - Tenant user interface configuration - colors
      summary: Updates an array of light theme branding colors.
      description: |-
        Update an array of light theme branding colors.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id)/branding-colors/light \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        '[{ "reference": "primary",
           "color": "purple" }]'
        ```
      operationId: bulkSetAccountLightColors
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
        - in: body
          name: body
          description: List of branding colors.
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/BrandingColorUpdate'
      responses:
        '204':
          description: Colors have been set successfully.
        '400':
          description: Error in input data format.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - Tenant user interface configuration - colors
      summary: Delete colors in the light theme.
      description: |-
        Delete account light theme branding colors.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example usage:**
        `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-colors/light -H 'Authorization: Bearer <access_key>'`
      operationId: deleteAllAccountLightColors
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
      responses:
        '204':
          description: Colors have been deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account or branding colors not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/branding-colors/light/{reference}':
    get:
      tags:
        - Tenant user interface configuration - colors
      summary: Get light theme branding color.
      description: |-
        Retrieve the requested light theme branding color.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-colors/light/{reference}
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAccountLightColor
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
        - <<: *branding_color_param
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/BrandingColor'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Color or account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - Tenant user interface configuration - colors
      summary: Updates light theme branding color.
      description: |-
        Update a light theme branding color.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id)/branding-colors/light/primary \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{ "color": "purple" }'
        ```
      operationId: setAccountLightColor
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
        - <<: *branding_color_param
        - in: body
          name: body
          description: The branding color.
          required: true
          schema:
            $ref: '#/definitions/BrandingColor'
      responses:
        '200':
          description: Color set successfully.
          schema:
            $ref: '#/definitions/BrandingColor'
        '400':
          description: Error in input data format.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Color or account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - Tenant user interface configuration - colors
      summary: Reset branding color to default.
      description: |-
        Resets the branding color to its light theme default.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-colors/light/{reference} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: resetAccountLightColor
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
        - <<: *branding_color_param
      responses:
        '204':
          description: Deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Color or account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/branding-images':
    delete:
      tags:
        - Tenant user interface configuration - images
      summary: Delete all images.
      description: |-
        Delete account branding images for all themes.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example usage:**
        `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-images -H 'Authorization: Bearer <access_key>'`
      operationId: deleteAllAccountImages
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
      responses:
        '204':
          description: Images have been deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account or branding images not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/branding-images/dark':
    get:
      tags:
        - Tenant user interface configuration - images
      summary: Get metadata of all dark theme images.
      description: |-
        Retrieve the metadata of all dark theme branding images.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-images/dark \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAllAccountDarkImageData
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/BrandingImageList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - Tenant user interface configuration - images
      summary: Delete images in the dark theme.
      description: |-
        Delete account dark theme branding images.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example usage:**
        `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-images/dark -H 'Authorization: Bearer <access_key>'`
      operationId: deleteAllAccountDarkImages
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
      responses:
        '204':
          description: Images have been deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account or branding images not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/branding-images/dark/{reference}':
    get:
      tags:
        - Tenant user interface configuration - images
      summary: Get metadata of a dark theme image.
      description: |-
        Retrieve metadata of one account dark theme branding image.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-images/dark/{reference} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAccountDarkImageData
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
        - <<: *branding_image_param
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/BrandingImage'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Unknown image reference, or account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/branding-images/dark/{reference}/clear':
    post:
      tags:
        - Tenant user interface configuration - images
      summary: Revert an image to dark theme default.
      description: |-
        Revert an account branding image to dark theme default.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-images/dark/{reference}/clear \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: clearAccountDarkImage
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
        - <<: *branding_image_param
      responses:
        '204':
          description: Image reverted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Unknown image reference, or account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/branding-images/dark/{reference}/upload':
    post:
      tags:
        - Tenant user interface configuration - images
      summary: Upload a dark theme image.
      description: |-
        Upload a new account dark theme branding image in PNG or JPEG format.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-images/dark/{reference}/upload \
        -H 'Authorization: Bearer <access_key>'
        -H 'content-type: image/png'  --data-binary '@myimage.png'
        ```
      operationId: uploadAccountDarkImage
      consumes:
        - image/png
        - image/jpeg
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
        - <<: *branding_image_param
        - in: body
          name: body
          description: The image in PNG or JPEG format.
          required: true
          schema:
            $ref: '#/definitions/Image'
      responses:
        '201':
          description: Image uploaded successfully.
          headers:
            Location:
              type: string
              description: Location of the image binary.
            Content-Location:
              type: string
              description: Location of the image metadata.
          schema:
            $ref: '#/definitions/BrandingImage'
        '400':
          description: 'Error in input data format, for example, image is too large.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Unknown image reference, or account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/branding-images/dark/{reference}/upload-multipart':
    post:
      tags:
        - Tenant user interface configuration - images
      summary: Upload a dark theme image.
      description: |-
        Upload a new account dark theme branding image as form data in PNG or JPEG format.
        <b>Note:</b> This endpoint is restricted to administrators.
      operationId: uploadAccountDarkImageMultipart
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
        - <<: *branding_image_param
        - in: formData
          name: image
          description: The image in PNG or JPEG format as multipart form data.
          required: true
          type: file
      responses:
        '201':
          description: Image uploaded successfully.
          headers:
            Location:
              type: string
              description: Location of the image binary.
            Content-Location:
              type: string
              description: Location of the image metadata.
          schema:
            $ref: '#/definitions/BrandingImage'
        '400':
          description: 'Error in input data format, for example, image is too large.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Unknown image reference.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/branding-images/light':
    get:
      tags:
        - Tenant user interface configuration - images
      summary: Get metadata of all light theme images.
      description: |-
        Retrieve the metadata of all light theme branding images.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-images/light \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAllAccountLightImageData
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/BrandingImageList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - Tenant user interface configuration - images
      summary: Delete images in the light theme.
      description: |-
        Delete account light theme branding images.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example usage:**
        `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-images/light -H 'Authorization: Bearer <access_key>'`
      operationId: deleteAllAccountLightImages
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
      responses:
        '204':
          description: Images have been deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account or branding images not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/branding-images/light/{reference}':
    get:
      tags:
        - Tenant user interface configuration - images
      summary: Get metadata of a light theme image.
      description: |-
        Retrieve metadata for one account light theme branding image.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-images/light/{reference} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAccountLightImageData
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
        - <<: *branding_image_param
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/BrandingImage'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Unknown image reference, or account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/branding-images/light/{reference}/clear':
    post:
      tags:
        - Tenant user interface configuration - images
      summary: Revert an image to light theme default.
      description: |-
        Revert an account branding image to light theme default.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-images/light/{reference}/clear \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: clearAccountLightImage
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
        - <<: *branding_image_param
      responses:
        '204':
          description: Image reverted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Unknown image reference, or account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/branding-images/light/{reference}/upload':
    post:
      tags:
        - Tenant user interface configuration - images
      summary: Upload a light theme image.
      description: |-
        Upload a new account light theme branding image in PNG or JPEG format.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-images/light/{reference}/upload \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: image/png' --data-binary '@myimage.png'
        ```
      operationId: uploadAccountLightImage
      consumes:
        - image/png
        - image/jpeg
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
        - <<: *branding_image_param
        - in: body
          name: body
          description: The image in PNG or JPEG format.
          required: true
          schema:
            $ref: '#/definitions/Image'
      responses:
        '201':
          description: Image uploaded successfully.
          headers:
            Location:
              type: string
              description: Location of the image binary.
            Content-Location:
              type: string
              description: Location of image metadata.
          schema:
            $ref: '#/definitions/BrandingImage'
        '400':
          description: 'Error in input data format, for example, image is too large.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Unknown image reference, or account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/branding-images/light/{reference}/upload-multipart':
    post:
      tags:
        - Tenant user interface configuration - images
      summary: Upload a light theme image.
      description: |-
        Upload a new account branding image as form data in PNG or JPEG format.
        <b>Note:</b> This endpoint is restricted to administrators.
      operationId: uploadAccountLightImageMultipart
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
        - <<: *branding_image_param
        - in: formData
          name: image
          description: The image in PNG or JPEG format as multipart form data.
          required: true
          type: file
      responses:
        '201':
          description: Image uploaded successfully.
          headers:
            Location:
              type: string
              description: Location of the image binary.
            Content-Location:
              type: string
              description: Location of the image metadata.
          schema:
            $ref: '#/definitions/BrandingImage'
        '400':
          description: 'Error in input data format, for example, image is too large.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Unknown image reference.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/identity-providers':
    get:
      tags:
        - Tenant accounts - identity providers
      summary: Get all identity providers.
      description: |-
        Retrieve an array of identity providers.
        <b>Note:</b> This endpoint is restricted to administrators.
      operationId: getAllAccountIdentityProviders
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: total_count.'
          required: false
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/IdentityProviderList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - Tenant accounts - identity providers
      summary: Create a new identity provider.
      description: |-
        Create a new identity provider.
        <b>Note:</b> This endpoint is restricted to administrators.
      operationId: createAccountIdentityProvider
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - <<: *discovery_param
        - in: body
          name: body
          description: Details of the identity provider to create.
          required: true
          schema:
            $ref: '#/definitions/IdentityProviderCreationReq'
      responses:
        '201':
          description: New entity created.
          headers:
            Location:
              type: string
              description: '/v3/accounts/{account_id}/identity-providers/{identity_provider_id}'
            Content-Location:
              type: string
              description: '/v3/accounts/{account_id}/identity-providers/{identity_provider_id}'
          schema:
            $ref: '#/definitions/IdentityProviderInfo'
        '400':
          description: 'Error in input data, for example, too long name.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/identity-providers/{identity_provider_id}':
    get:
      tags:
        - Tenant accounts - identity providers
      summary: Get an identity provider.
      description: |-
        Retrieve an identity provider.
        <b>Note:</b> This endpoint is restricted to administrators.
      operationId: getAccountIdentityProvider
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: identity_provider_id
          in: path
          description: The ID of the identity provider to retrieve.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/IdentityProviderInfo'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or identity provider not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - Tenant accounts - identity providers
      summary: Update an existing identity provider.
      description: |-
        Update an existing identity provider.
        <b>Note:</b> This endpoint is restricted to administrators.
      operationId: updateAccountIdentityProvider
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: identity_provider_id
          in: path
          description: The ID of the identity provider to update.
          required: true
          type: string
        - <<: *discovery_param
        - in: body
          name: body
          description: Details of the identity provider to update.
          required: true
          schema:
            $ref: '#/definitions/IdentityProviderUpdateReq'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/IdentityProviderInfo'
        '400':
          description: 'Error in input data, for example, missing name.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or identity provider not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - Tenant accounts - identity providers
      summary: Delete an identity provider by ID.
      description: |-
        Delete an identity provider by ID.
        <b>Note:</b> This endpoint is restricted to administrators.
      operationId: deleteAccountIdentityProvider
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: identity_provider_id
          in: path
          description: The ID of the identity provider to delete.
          required: true
          type: string
      responses:
        '204':
          description: Deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden, or identity provider is in use.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or identity provider not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/identity-providers/{identity_provider_id}/delete-sp-certificate':
    post:
      tags:
        - Tenant accounts - identity providers
      summary: Delete the service provider certificate.
      description: |-
        Delete a service provider certificate.
        <b>Note:</b> This endpoint is restricted to administrators.
      operationId: deleteAccountSpCertificate
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: identity_provider_id
          in: path
          description: The ID of the identity provider whose certificate should be deleted.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          headers:
            Content-Location:
              type: string
              description: '/v3/accounts/{account_id}/identity-providers/{identity_provider_id}'
          schema:
            $ref: '#/definitions/IdentityProviderInfo'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or identity provider not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/identity-providers/{identity_provider_id}/generate-sp-certificate':
    post:
      tags:
        - Tenant accounts - identity providers
      summary: Generate a new service provider certificate.
      description: |-
        Generate a new service provider certificate.
        <b>Note:</b> This endpoint is restricted to administrators.
      operationId: generateAccountSpCertificate
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: identity_provider_id
          in: path
          description: The ID of the identity provider for which to generate a certificate.
          required: true
          type: string
        - in: body
          name: body
          description: Details of the service provider certificate to be generated.
          required: true
          schema:
            $ref: '#/definitions/CertificateGenerationReq'
      responses:
        '200':
          description: Successful operation.
          headers:
            Content-Location:
              type: string
              description: '/v3/accounts/{account_id}/identity-providers/{identity_provider_id}'
          schema:
            $ref: '#/definitions/IdentityProviderInfo'
        '400':
          description: 'Error in input data, for example, invalid certificate validity value.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or identity provider not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/identity-providers/{identity_provider_id}/refresh-jwks':
    post:
      tags:
        - Tenant accounts - identity providers
      summary: Refresh the OIDC signing keys.
      description: |-
        Refresh an OIDC IdP's signing keys.
        <b>Note:</b> This endpoint is restricted to administrators.
      operationId: refreshAccountJwks
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account to be managed.
          required: true
          type: string
        - name: identity_provider_id
          in: path
          description: The ID of the identity provider for which to refresh the signing keys.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          headers:
            Content-Location:
              type: string
              description: '/v3/accounts/{account_id}/identity-providers/{identity_provider_id}'
          schema:
            $ref: '#/definitions/IdentityProviderInfo'
        '400':
          description: 'Not an OIDC IdP or JWKS URI is unspecified.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or identity provider not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/limitations':
    get:
      tags:
        - Tenant accounts - entitlement limitations
      summary: Get entitlement limitations.
      description: |-
        Retrieve an array of entitlement limitations.
        <b>Note:</b> This endpoint is restricted to administrators.
      operationId: aggregatorGetAccountLimitations
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
        - name: inherited__eq
          in: query
          description: Filter for finding account limitations by inheritance. True returns also inherited limitations. False returns only non-inherited ones.
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/AccountLimitationList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account with the given ID not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/limitations/{limitation_id}':
    get:
      tags:
        - Tenant accounts - entitlement limitations
      summary: Get an entitlement limitation.
      description: |-
        Retrieve an entitlement limitation.
        <b>Note:</b> This endpoint is restricted to administrators.
      operationId: aggregatorGetAccountLimitation
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
        - name: limitation_id
          in: path
          description: The ID of the limitation to be fetched.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/AccountLimitation'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Limitation or account with the given ID not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/notifications':
    get:
      tags:
        - Tenant accounts - email notification logs
      summary: Get email notifications.
      description: |-
        Retrieve an array of email notification logs.
        <b>Note:</b> This endpoint is restricted to administrators.
      operationId: getAccountNofificationEntries
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/NotificationEntryList'
        '400':
          description: 'Error in input data, or missing or invalid parameters.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account with the given ID not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/notifications/{notification_id}':
    get:
      tags:
        - Tenant accounts - email notification logs
      summary: Get an email notification.
      description: |-
        Retrieve an email notifications log entry.
        <b>Note:</b> This endpoint is restricted to administrators.
      operationId: getAccountNofificationEntry
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account for which this notification should be retrieved.
          required: true
          type: string
        - name: notification_id
          in: path
          description: The ID of the notification entry to be retrieved.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/NotificationEntry'
        '400':
          description: 'Error in input data, missing or invalid parameters.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: No entry found for the given ID.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/policy-groups':
    get:
      tags:
        - Tenant accounts - policy groups
      summary: Get policy groups.
      description: |-
        Retrieve an array of policy groups.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAllAccountGroups
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: total_count.'
          required: false
          type: string
        - name: name__eq
          in: query
          description: Filter for group name.
          required: false
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummaryList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - Tenant accounts - policy groups
      summary: Create a new group.
      description: |-
        Create a new group.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{"name": "MyGroup1"}'
        ```
      operationId: createAccountGroup
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - in: body
          name: body
          description: Details of the group to create.
          required: true
          schema:
            $ref: '#/definitions/GroupCreationInfo'
      responses:
        '201':
          description: New entity created.
          schema:
            $ref: '#/definitions/GroupSummary'
        '400':
          description: 'Error in input data, for example, invalid group name.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: A group with that name already exists.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/policy-groups/{group_id}':
    get:
      tags:
        - Tenant accounts - policy groups
      summary: Get policy group.
      description: |-
        Retrieve policy group details.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAccountGroupSummary
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: group_id
          in: path
          description: The ID of the group to retrieve.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummary'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - Tenant accounts - policy groups
      summary: Add members to a group.
      description: |-
        Add users and API keys to groups.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id} \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{"users": ["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]}'
        ```
      operationId: addSubjectsToAccountGroup
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: group_id
          in: path
          description: The ID of the group to update.
          required: true
          type: string
        - in: body
          name: body
          description: A list of users and API keys to add to the group.
          required: true
          schema:
            $ref: '#/definitions/SubjectList'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummary'
        '400':
          description: 'Error in input data, for example, the user or API key does not exist.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: The user of this API key is a member of the group already.
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - Tenant accounts - policy groups
      summary: Update the group name.
      description: |-
        Update a group name.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id}/ \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{"name": "TestGroup2"}'
        ```
      operationId: updateAccountGroupName
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: group_id
          in: path
          description: The ID of the group to update.
          required: true
          type: string
        - in: body
          name: body
          description: Details of the group to create.
          required: true
          schema:
            $ref: '#/definitions/GroupUpdateInfo'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummary'
        '400':
          description: 'Error in input data, for example, the group name is too long.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - Tenant accounts - policy groups
      summary: Delete a group.
      description: |-
        Delete a group.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: deleteAccountGroup
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: group_id
          in: path
          description: The ID of the group to delete.
          required: true
          type: string
      responses:
        '204':
          description: Deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden, or Administrators group cannot be removed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/policy-groups/{group_id}/api-keys':
    get:
      tags:
        - Tenant accounts - policy groups
      summary: Get API keys in a group.
      description: |-
        Retrieve an array of API keys associated with a policy group.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id}/api-keys \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getApiKeysOfAccountGroup
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: group_id
          in: path
          description: The ID of the group to retrieve API keys for.
          required: true
          type: string
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: total_count.'
          required: false
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ApiKeyInfoRespList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2020-08-01T00:00:00+00:00"
        end_of_life_at: "2021-08-01T00:00:00+00:00"
        comment: This endpoint is deprecated. Use GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id}/applications
        links: []
    post:
      tags:
        - Tenant accounts - policy groups
      summary: Add API keys to Account group.
      description: |-
        Add API keys to account groups.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id}/api-keys \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: addApiKeysToAccountGroup
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
        - name: group_id
          in: path
          description: The ID of the group to retrieve API keys for.
          required: true
          type: string
        - in: body
          name: body
          description: A list of API keys to add to the group.
          required: true
          schema:
            $ref: '#/definitions/SubjectList'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummary'
        '400':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: The API Key is a member of the group or account already.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2019-07-11T11:04:57+00:00"
        end_of_life_at: "2020-07-11T11:04:57+00:00"
        comment: This endpoint is deprecated. use POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id}/api-keys/add/
        links: []
    delete:
      tags:
        - Tenant accounts - policy groups
      summary: Remove API keys from a group.
      description: |-
        Remove API keys from groups.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id}/api-keys \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{"apikeys": ["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]}'
        ```
      operationId: removeApiKeysFromAccountGroup
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: group_id
          in: path
          description: The ID of the group to remove API keys from.
          required: true
          type: string
        - in: body
          name: body
          description: A list of API keys to remove from the group.
          required: true
          schema:
            $ref: '#/definitions/SubjectList'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummary'
        '400':
          description: 'Error in input data, for example, the array of API keys is missing.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2019-07-11T11:04:57+00:00"
        end_of_life_at: "2020-07-11T11:04:57+00:00"
        comment: This endpoint is deprecated. Use POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id}/api-keys/remove
        links: []
  '/v3/accounts/{account_id}/policy-groups/{group_id}/api-keys/add':
    post:
      tags:
        - Tenant accounts - policy groups
      summary: Add API keys to account group.
      description: |-
        Add API keys to account groups.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id}/api-keys/add \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{"apikeys": ["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]}'
        ```
      operationId: addListedApiKeysToAccountGroup
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
        - name: group_id
          in: path
          description: The ID of the group to remove API keys from.
          required: true
          type: string
        - in: body
          name: body
          description: A list of API keys to add to the group.
          required: true
          schema:
            $ref: '#/definitions/SubjectList'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummary'
        '400':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: The API key is a member of the account group already.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2020-08-01T00:00:00+00:00"
        end_of_life_at: "2021-08-01T00:00:00+00:00"
        comment: This endpoint is deprecated. Use GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id}/applications/add
        links: []
  '/v3/accounts/{account_id}/policy-groups/{group_id}/api-keys/remove':
    post:
      tags:
        - Tenant accounts - policy groups
      summary: Remove API keys from a group.
      description: |-
        Remove API keys from groups.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id}/api-keys/remove \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{"apikeys": ["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]}'
        ```
      operationId: removeListedApiKeysFromAccountGroup
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
        - name: group_id
          in: path
          description: The ID of the group to remove API keys from.
          required: true
          type: string
        - in: body
          name: body
          description: A list of API keys to remove from the group.
          required: true
          schema:
            $ref: '#/definitions/SubjectList'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummary'
        '400':
          description: 'Error in input data, for example, the array of API keys is missing.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2020-08-01T00:00:00+00:00"
        end_of_life_at: "2021-08-01T00:00:00+00:00"
        comment: This endpoint is deprecated. Use GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id}/applications/remove
        links: []
  '/v3/accounts/{account_id}/policy-groups/{group_id}/applications':
    get:
      tags:
        - Tenant accounts - policy groups
      summary: Get applications in a group.
      description: |-
        Retrieve an array of applications associated with a policy group.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id}/applications \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getApplicationsOfAccountGroup
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
        - name: group_id
          in: path
          description: The ID of the group to retrieve applications for.
          required: true
          type: string
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: total_count.'
          required: false
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/ApplicationList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/policy-groups/{group_id}/applications/add':
    post:
      tags:
        - Tenant accounts - policy groups
      summary: Add applications to account group.
      description: |-
        Add applications to account groups.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id}/applications/add \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{"applications": ["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]}'
        ```
      operationId: addListedApplicationsToAccountGroup
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
        - name: group_id
          in: path
          description: The ID of the group to add applications to.
          required: true
          type: string
        - in: body
          name: body
          description: A list of applications to add to the group.
          required: true
          schema:
            $ref: '#/definitions/SubjectList'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummary'
        '400':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: The application is a member of the group already.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/policy-groups/{group_id}/applications/remove':
    post:
      tags:
        - Tenant accounts - policy groups
      summary: Remove applications from a group.
      description: |-
        Remove applications from groups.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id}/applications/remove \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{"applications": ["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]}'
        ```
      operationId: removeListedApplicationsFromAccountGroup
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
        - name: group_id
          in: path
          description: The ID of the group to remove applications from.
          required: true
          type: string
        - in: body
          name: body
          description: A list of applications to remove from the group.
          required: true
          schema:
            $ref: '#/definitions/SubjectList'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummary'
        '400':
          description: 'Error in input data, for example, the array of applications is missing.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/policy-groups/{group_id}/users':
    get:
      tags:
        - Tenant accounts - policy groups
      summary: Get users in a policy group.
      description: |-
        Retrieve an array of users associated with a policy group.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id}/users \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getUsersOfAccountGroup
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: group_id
          in: path
          description: The ID of the group to retrieve users for.
          required: true
          type: string
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: total_count.'
          required: false
          type: string
        - name: status__eq
          in: query
          description: An optional filter to retrieve users by status.
          required: false
          type: string
        - name: status__in
          in: query
          description: An optional filter to retrieve users with a specified set of statuses.
          required: false
          type: string
        - name: status__nin
          in: query
          description: An optional filter to exclude users with a specified set of statuses.
          required: false
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/UserInfoRespList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - Tenant accounts - policy groups
      summary: Add users to account group.
      description: |-
        Add users to account group.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id}/users \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: addUsersToAccountGroup
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
        - name: group_id
          in: path
          description: The ID of the group to add users to.
          required: true
          type: string
        - in: body
          name: body
          description: A list of user IDs to add to the group.
          required: true
          schema:
            $ref: '#/definitions/SubjectList'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummary'
        '400':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: The user is a member of the account group already.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2019-07-11T11:04:57+00:00"
        end_of_life_at: "2020-07-11T11:04:57+00:00"
        comment: This endpoint is deprecated. Use POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id}/users/add/
        links: []
    delete:
      tags:
        - Tenant accounts - policy groups
      summary: Remove users from a group.
      description: |-
        Remove users from groups.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id}/users \
        -H 'Authorization: Bearer <access_key>' \
         -H 'content-type: application/json' \
        -d '{"users": ["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]}'
        ```
      operationId: removeUsersFromAccountGroup
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: group_id
          in: path
          description: The ID of the group to remove users from.
          required: true
          type: string
        - in: body
          name: body
          description: A list of users to remove from the group.
          required: true
          schema:
            $ref: '#/definitions/SubjectList'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummary'
        '400':
          description: 'Error in input data, for example, the last user to remove from Administrators group.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2019-07-11T11:04:57+00:00"
        end_of_life_at: "2020-07-11T11:04:57+00:00"
        comment: This endpoint is deprecated. Use POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id}/users/remove/
        links: []
  '/v3/accounts/{account_id}/policy-groups/{group_id}/users/add':
    post:
      tags:
        - Tenant accounts - policy groups
      summary: Add users to account group.
      description: |-
        Add users to account group.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id}/users/add \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: addListedUsersToAccountGroup
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
        - name: group_id
          in: path
          description: The ID of the group to retrieve users for.
          required: true
          type: string
        - in: body
          name: body
          description: A list of users to add to the group.
          required: true
          schema:
            $ref: '#/definitions/SubjectList'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummary'
        '400':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: The user is a member of the account group already.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/policy-groups/{group_id}/users/remove':
    post:
      tags:
        - Tenant accounts - policy groups
      summary: Remove users from a group.
      description: |-
        Remove users from groups.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/policy-groups/{group_id}/users/remove \
        -H 'Authorization: Bearer <access_key>' \
         -H 'content-type: application/json' \
        -d '{"users": ["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]}'
        ```
      operationId: removeListedUsersFromAccountGroup
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
        - name: group_id
          in: path
          description: The ID of the group to remove users from.
          required: true
          type: string
        - in: body
          name: body
          description: A list of users to remove from the group.
          required: true
          schema:
            $ref: '#/definitions/SubjectList'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummary'
        '400':
          description: 'Error in input data, for example, the last user to remove from Administrators group.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/trusted-certificates':
    get:
      tags:
        - Tenant security and identity - certificates
      summary: Get trusted certificates.
      description: |-
        Retrieve an array of trusted certificates.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/trusted-certificates \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAllAccountCertificates
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: total_count.'
          required: false
          type: string
        - name: name__eq
          in: query
          description: Filter for certificate name.
          required: false
          type: string
        - name: service__eq
          in: query
          description: Filter for service.
          required: false
          type: string
        - name: expire__eq
          in: query
          description: Filter for expire.
          required: false
          type: integer
          format: int32
        - name: device_execution_mode__eq
          in: query
          description: Filter for developer certificates.
          required: false
          type: integer
          format: int32
        - name: device_execution_mode__neq
          in: query
          description: Filter for not developer certificates.
          required: false
          type: integer
          format: int32
        - name: owner__eq
          in: query
          description: Owner name filter.
          required: false
          type: string
        - name: enrollment_mode__eq
          in: query
          description: Enrollment mode filter.
          required: false
          type: boolean
        - name: status__eq
          in: query
          description: Filter for certificate status.
          required: false
          type: string
        - name: issuer__like
          in: query
          description: 'Filter for issuer. Finds all matches where the filter value is a case-insensitive substring of the result. Example: issuer__like=cn=iss matches CN=issuer.'
          required: false
          type: string
        - name: subject__like
          in: query
          description: 'Filter for subject. Finds all matches where the filter value is a case-insensitive substring of the result. Example: subject__like=cn=su matches CN=subject.'
          required: false
          type: string
        - name: certificate_fingerprint__eq
          in: query
          description: Filter for certificate fingerprint.
          required: false
          type: string
        - name: valid__eq
          in: query
          description: 'Filter for finding certificates by validity. True returns certificates which are not yet expired. False returns certificates which have expired.'
          required: false
          type: boolean
        - name: is_public__eq
          in: query
          description: 'Filter for finding public certificates.'
          required: false
          type: boolean
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/TrustedCertificateRespList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: 'Forbidden, only available for administrators of commercial accounts.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account with the given ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - Tenant security and identity - certificates
      summary: Upload new trusted certificate.
      description: |-
        Upload new trusted certificate.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/trusted-certificates \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d {"name": "myCert1", "description": "very important cert", "certificate": "certificate_data", "service": "lwm2m"}
        ```
      operationId: addAccountCertificate
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - in: body
          name: body
          description: 'A trusted certificate object with attributes. Signature is optional.'
          required: true
          schema:
            $ref: '#/definitions/TrustedCertificateReq'
      responses:
        '201':
          description: New entity created.
          schema:
            $ref: '#/definitions/TrustedCertificateResp'
        '400':
          description: 'Invalid certificate data, certificate validation failed, certificate already expired or certificate uses unsupported, or weak cipher.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: 'Forbidden, only available for administrators of commercial accounts.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account with the given ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/trusted-certificates/{cert_id}':
    get:
      tags:
        - Tenant security and identity - certificates
      summary: Get a trusted certificate.
      description: |-
        Retrieve a trusted certificate.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/trusted-certificates/{cert_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAccountCertificate
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: cert_id
          in: path
          description: The ID of the trusted certificate to retrieve.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/TrustedCertificateResp'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: 'Forbidden, only available for administrators of commercial accounts.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or certificate with the given ID not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - Tenant security and identity - certificates
      summary: Update trusted certificate.
      description: |-
        Update a trusted certificate.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/trusted-certificates/{cert_id} \
         -H 'Authorization: Bearer <access_key>' \
         -H 'content-type: application/json' \
         -d {"description": "very important cert"}
         ```
      operationId: updateAccountCertificate
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: cert_id
          in: path
          description: The ID of the trusted certificate to update.
          required: true
          type: string
        - in: body
          name: body
          description: A trusted certificate object with attributes.
          required: true
          schema:
            $ref: '#/definitions/TrustedCertificateUpdateReq'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/TrustedCertificateResp'
        '400':
          description: 'Invalid certificate data, certificate validation failed, certificate already expired or certificate uses unsupported, or weak cipher.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: 'Forbidden, only available for administrators of commercial accounts.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or certificate with the given ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - Tenant security and identity - certificates
      summary: Delete a trusted certificate by ID.
      description: |-
        Delete a trusted certificate.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/trusted-certificates/{cert_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: deleteAccountCertificate
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: cert_id
          in: path
          description: The ID of the trusted certificate to delete.
          required: true
          type: string
      responses:
        '204':
          description: Deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: 'Forbidden, only available for administrators of commercial accounts.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or certificate with the given ID not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/trusted-certificates/{cert_id}/release':
    post:
      tags:
        - Tenant security and identity - certificates
      summary: Release an OEM certificate.
      description: |-
        Mark an OEM trusted certificate as public.
        <b>Note:</b> This endpoint is restricted to OEM administrators.
        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/trusted-certificates/{cert_id}/release \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: releaseAccountCertificate
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: cert_id
          in: path
          description: The ID of the trusted certificate to release.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/TrustedCertificateResp'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or certificate not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/trusted-certificates/{cert_id}/unrelease':
    post:
      tags:
        - Tenant security and identity - certificates
      summary: Unrelease an OEM certificate.
      description: |-
        Unrelease an OEM trusted certificate for being private again.
        <b>Note:</b> This endpoint is restricted to OEM administrators.
        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/trusted-certificates/{cert_id}/unrelease \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: unreleaseAccountCertificate
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: cert_id
          in: path
          description: The ID of the trusted certificate to unrelease.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/TrustedCertificateResp'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or certificate not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  /v3/accounts/{account_id}/oem-certificates:
    get:
      tags:
        - Tenant security and identity - OEM certificates
      summary: Get all OEM certificates.
      description: |-
        Retrieve an array of OEM certificates.
        <b>Note:</b> This endpoint is restricted to administrators.
        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/oem-certificates \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAllAccountOemCertificates
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: total_count.'
          required: false
          type: string
        - name: service__eq
          in: query
          description: 'Service filter, either LwM2M or bootstrap.'
          required: false
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/TrustedCertificateRespList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account with the given ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/oem-certificates/{oem_cert_id}':
    get:
      tags:
        - Tenant security and identity - OEM certificates
      summary: Get an OEM certificate.
      description: |-
        Retrieve an OEM certificate.
        <b>Note:</b> This endpoint is restricted to administrators.
        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/oem-certificates/{oem_cert_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAccountOemCertificate
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: oem_cert_id
          in: path
          description: The ID of the OEM certificate to retrieve.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/TrustedCertificateResp'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or OEM certificate with the given ID not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/oem-certificates/{oem_cert_id}/import':
    post:
      tags:
        - Tenant security and identity - OEM certificates
      summary: Import an OEM certificate.
      description: |-
        Import an OEM certificate to an account.
        <b>Note:</b> This endpoint is restricted to administrators.
        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/oem-certificates/{oem_cert_id}/import \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: importAccountOemCertificate
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: oem_cert_id
          in: path
          description: The ID of the OEM certificate to import.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/TrustedCertificateResp'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or OEM certificate with the given ID not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/oem-certificates/{oem_cert_id}/remove':
    post:
      tags:
        - Tenant security and identity - OEM certificates
      summary: Removes an OEM certificate.
      description: |-
        Remove an OEM certificate from an account.
        <b>Note:</b> This endpoint is restricted to administrators.
        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/oem-certificates/{oem_cert_id}/remove \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: removeAccountOemCertificate
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: oem_cert_id
          in: path
          description: The ID of the OEM certificate to remove.
          required: true
          type: string
      responses:
        '204':
          description: Successful operation.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or OEM certificate with the given ID not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/user-invitations':
    get:
      tags:
        - Tenant accounts - user invitations
      summary: Get user invitations.
      description: |-
        Retrieve an array of active user invitations.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/user-invitations \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAllAccountInvitations
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: login_profiles__eq
          in: query
          description: Filter to retrieve user invitations by a specified login profile.
          required: false
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/UserInvitationRespList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - Tenant accounts - user invitations
      summary: Create a user invitation.
      description: |-
        Invite a new or existing user.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accouns/{account_id}/user-invitations \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d {"email": "myemail@company.com"}
        ```
      operationId: createAccountInvitation
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - in: body
          name: body
          description: A user invitation object with attributes.
          required: true
          schema:
            $ref: '#/definitions/UserInvitationReq'
      responses:
        '201':
          description: New entity created.
          schema:
            $ref: '#/definitions/UserInvitationResp'
        '400':
          description: 'Error in input data, for example, invalid email address.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/user-invitations/{invitation_id}':
    get:
      tags:
        - Tenant accounts - user invitations
      summary: Details of a user invitation.
      description: |-
        Retrieve details of an active user invitation sent for a new or existing user.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/user-invitations/{invitation_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAccountInvitation
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: invitation_id
          in: path
          description: The ID of the invitation to retrieve.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/UserInvitationResp'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or invitation with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - Tenant accounts - user invitations
      summary: Delete a user invitation.
      description: |-
        Delete an active user invitation sent to a new or existing user.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/user-invitations/{invitation_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: deleteAccountInvitation
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: invitation_id
          in: path
          description: The ID of the invitation to delete.
          required: true
          type: string
      responses:
        '204':
          description: Deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or invitation with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/users':
    get:
      tags:
        - Tenant accounts - users
      summary: Get users.
      description: |-
        Retrieve an array of users.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAllAccountUsers
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: total_count.'
          required: false
          type: string
        - name: email__eq
          in: query
          description: Filter for email address.
          required: false
          type: string
        - name: status__eq
          in: query
          description: Filter for status.
          required: false
          type: string
        - name: status__in
          in: query
          description: An optional filter to retrieve users with a specified set of statuses.
          required: false
          type: string
        - name: status__nin
          in: query
          description: An optional filter to exclude users with a specified set of statuses.
          required: false
          type: string
        - name: login_profiles__eq
          in: query
          description: An optional filter to retrieve users with a specified login profile.
          required: false
          type: string
        - name: password_change_needed__eq
          in: query
          description: An optional filter to retrieve users that do or do not require password change.
          required: false
          type: boolean
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/UserInfoRespList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account with the given ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - Tenant accounts - users
      summary: Create a new user.
      description: |-
        Create or invite a new user to the account. Only email address is used; other attributes are set in the second step.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d {"email": "myemail@company.com"}
        ```
      operationId: createAccountUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - in: body
          name: body
          description: A user object with attributes.
          required: true
          schema:
            $ref: '#/definitions/UserInfoReq'
        - name: action
          in: query
          description: Create or invite user.
          required: false
          type: string
          default: create
      responses:
        '201':
          description: New entity created.
          schema:
            $ref: '#/definitions/UserInfoResp'
        '400':
          description: 'Error in input data, for example, an invalid email address.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: A user with the given username or email already exists.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/users/{user_id}':
    get:
      tags:
        - Tenant accounts - users
      summary: Details of the user.
      description: |-
        Retrieve user details.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users/{user_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAccountUser
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: user_id
          in: path
          description: The ID of the user to retrieve.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/UserInfoResp'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or user with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - Tenant accounts - users
      summary: Update user details.
      description: |-
        Update user details.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X PUT https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users/{user_id} \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{"username": "myusername"}'
        ```
      operationId: updateAccountUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: user_id
          in: path
          description: The ID of the user to update.
          required: true
          type: string
        - in: body
          name: body
          description: A user object with attributes.
          required: true
          schema:
            $ref: '#/definitions/UserUpdateReq'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/UserInfoResp'
        '400':
          description: 'Error in input data, for example, an invalid email address.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or user with the given ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: A user with the given username or email already exists.
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - Tenant accounts - users
      summary: Delete a user.
      description: |-
        Delete a user.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users/{user_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: deleteAccountUser
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: user_id
          in: path
          description: The ID of the user to delete.
          required: true
          type: string
      responses:
        '204':
          description: Deleted successfully.
        '400':
          description: 'Bad request, for example, trying to delete an active user.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or user with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/users/{user_id}/groups':
    get:
      tags:
        - Tenant accounts - users
      summary: Get policy groups for a user.
      description: |-
        Retrieve an array of policy groups associated with a user.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users/{user_id}/groups \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getGroupsOfAccountUser
      produces:
        - application/json
      parameters:
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: total_count.'
          required: false
          type: string
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: user_id
          in: path
          description: The ID of the user.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummaryList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or user with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - Tenant accounts - users
      summary: Add user to a list of groups.
      description: |-
        Add user to groups.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users/{user_id}/groups \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]'
        ```
      operationId: addAccountUserToGroups
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: user_id
          in: path
          description: The ID of the user to add to the group.
          required: true
          type: string
        - in: body
          name: body
          description: A list of IDs of the groups to update.
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/UserInfoResp'
        '400':
          description: Error in input data.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: 'An account, user, or group with that ID does not exist.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: The user is a member of the group already.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2019-07-11T11:04:57+00:00"
        end_of_life_at: "2020-07-11T11:04:57+00:00"
        comment: This endpoint is deprecated. Use POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users/{user_id}/groups/add/
        links: []
    delete:
      tags:
        - Tenant accounts - users
      summary: Remove user from groups.
      description: |-
        Remove user from groups.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users/{user_id}/groups \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]'
        ```
      operationId: removeAccountUserFromGroups
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: user_id
          in: path
          description: The ID of the user to remove from the group.
          required: true
          type: string
        - in: body
          name: body
          description: A list of IDs of the groups to update.
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/UserInfoResp'
        '400':
          description: Error in input data.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: 'An account, user, or group with that ID does not exist.'
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2019-07-11T11:04:57+00:00"
        end_of_life_at: "2020-07-11T11:04:57+00:00"
        comment: This endpoint is deprecated. Use POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users/{user_id}/groups/remove/
        links: []
  '/v3/accounts/{account_id}/users/{user_id}/groups/add':
    post:
      tags:
        - Tenant accounts - users
      summary: Add user to a list of groups.
      description: |-
        Add a user to groups.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users/{user_id}/groups/add \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]'
        ```
      operationId: addAccountUserToListedGroups
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
        - name: user_id
          in: path
          description: The ID of the user to add to the group.
          required: true
          type: string
        - in: body
          name: body
          description: A list of IDs of the groups to update.
          required: true
          schema:
            $ref: '#/definitions/GroupIdList'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/UserInfoResp'
        '400':
          description: Error in input data.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: 'An account, user, or group with that ID does not exist.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: The user is a member of the group already.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/users/{user_id}/groups/remove':
    post:
      tags:
        - Tenant accounts - users
      summary: Remove user from groups.
      description: |-
        Remove a user from groups.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users/{user_id}/groups/remove \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]'
        ```
      operationId: removeAccountUserFromListedGroups
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
        - name: user_id
          in: path
          description: The ID of the user to remove from the group.
          required: true
          type: string
        - in: body
          name: body
          description: A list of IDs of the groups to update.
          required: true
          schema:
            $ref: '#/definitions/GroupIdList'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/UserInfoResp'
        '400':
          description: Error in input data.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: 'An account, user, or group with that ID does not exist.'
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/users/{user_id}/remove':
    post:
      tags:
        - Tenant accounts - users
      summary: Remove user from the account.
      description: |-
        Remove user from the account.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users/{user_id}/remove \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: removeAccountUserFromAccount
      parameters:
        - name: account_id
          in: path
          description: The ID of the account.
          required: true
          type: string
        - name: user_id
          in: path
          description: The ID of the user to remove from the account.
          required: true
          type: string
      responses:
        '204':
          description: Successful operation.
        '400':
          description: Error removing user from the account.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: 'An account or user with that ID does not exist.'
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/accounts/{account_id}/users/{user_id}/validate-email':
    post:
      tags:
        - Tenant accounts - users
      summary: Validate the user email.
      description: |-
        Validate user email.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/users/{user_id}/validate-email \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: validateAccountUserEmail
      produces:
        - application/json
      parameters:
        - name: account_id
          in: path
          description: Account ID.
          required: true
          type: string
        - name: user_id
          in: path
          description: The ID of the user.
          required: true
          type: string
      responses:
        '204':
          description: Email validation successfully requested.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An account or user with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
  /v3/api-keys:
    get:
      tags:
        - Account - API keys
      summary: Get all API keys.
      description: |-
        Retrieve an array of API keys, optionally filtered by the owner.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/api-keys \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAllApiKeys
      produces:
        - application/json
      parameters:
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: total_count.'
          required: false
          type: string
        - name: key__eq
          in: query
          description: API key filter. Do not include the private portion of the API key (the last 32 characters).
          required: false
          type: string
        - name: owner__eq
          in: query
          description: |-
              Owner name filter.
              <b>Note:</b> This parameter is restricted to administrators.
          required: false
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ApiKeyInfoRespList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2020-08-01T00:00:00+00:00"
        end_of_life_at: "2021-08-01T00:00:00+00:00"
        comment: This endpoint is deprecated. Use GET https://api.us-east-1.mbedcloud.com/v3/applications/{application_id}/access-keys
        links: []
    post:
      tags:
        - Account - API keys
      summary: Create a new API key.
      description: |-
        Create a new API key.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/api-keys -d '{"name": "MyKey1"}' \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json'
        ```
      operationId: createApiKey
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: The details of the API key to create.
          required: true
          schema:
            $ref: '#/definitions/ApiKeyInfoReq'
      responses:
        '201':
          description: New entity created.
          schema:
            $ref: '#/definitions/ApiKeyInfoResp'
        '400':
          description: 'Error in input data, for example, missing API key name.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2020-08-01T00:00:00+00:00"
        end_of_life_at: "2021-08-01T00:00:00+00:00"
        comment: This endpoint is deprecated. Use POST https://api.us-east-1.mbedcloud.com/v3/applications/{application_id}/access-keys
        links: []
  /v3/api-keys/me:
    get:
      tags:
        - Account - API keys
      summary: Get current API key.
      description: |-
        Retrieve details of current API key.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/api-keys/me \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getMyApiKey
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ApiKeyInfoResp'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2020-08-01T00:00:00+00:00"
        end_of_life_at: "2021-08-01T00:00:00+00:00"
        comment: This endpoint is deprecated.
        links: []
    put:
      tags:
        - Account - API keys
      summary: Update API key details.
      description: |-
        Update API key details.

        **Example:**
        ```
        curl -X PUT https://api.us-east-1.mbedcloud.com/v3/api-keys/me \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{"name": "TestApiKey25"}'
        ```
      operationId: updateMyApiKey
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: New API key attributes to store.
          required: true
          schema:
            $ref: '#/definitions/ApiKeyUpdateReq'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ApiKeyInfoResp'
        '400':
          description: 'Error in input data, for example, invalid API key name.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2020-08-01T00:00:00+00:00"
        end_of_life_at: "2021-08-01T00:00:00+00:00"
        comment: This endpoint is deprecated.
        links: []
  /v3/api-keys/me/groups:
    get:
      tags:
        - Account - API keys
      summary: Get policy groups of the current API key.
      description: |-
        Retrieve an array of policy groups associated with the current API key.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/api-keys/me/groups \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getGroupsOfMyApiKey
      produces:
        - application/json
      parameters:
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: total_count.'
          required: false
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummaryList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2020-08-01T00:00:00+00:00"
        end_of_life_at: "2021-08-01T00:00:00+00:00"
        comment: This endpoint is deprecated.
        links: []
    post:
      tags:
        - Account - API keys
      summary: Add API key to a list of groups.
      description: |-
        Add API key to groups.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/api-keys/me/groups \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]'
        ```
      operationId: addMyApiKeyToGroups
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: A list of IDs of the groups to update.
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ApiKeyInfoResp'
        '400':
          description: Error in input data.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden. Adding API key to the 'Administrators' group is restricted to administrators.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: The API key is a member of the group already.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2019-07-11T11:04:57+00:00"
        end_of_life_at: "2020-07-11T11:04:57+00:00"
        comment: This endpoint is deprecated. Use POST https://api.us-east-1.mbedcloud.com/v3/api-keys/me/groups/add/
        links: []
    delete:
      tags:
        - Account - API keys
      summary: Remove API key from groups.
      description: |-
        Remove API key from groups.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/api-keys/me/groups \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]'
        ```
      operationId: removeMyApiKeyListedGroups
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: A list of IDs of groups to update.
          required: true
          schema:
            $ref: '#/definitions/GroupIdList'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ApiKeyInfoResp'
        '400':
          description: Error in input data.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2019-07-11T11:04:57+00:00"
        end_of_life_at: "2020-07-11T11:04:57+00:00"
        comment: This endpoint is deprecated. Use POST https://api.us-east-1.mbedcloud.com/v3/api-keys/me/groups/remove/
        links: []
  /v3/api-keys/me/groups/add:
    post:
      tags:
        - Account - API keys
      summary: Add API key to a list of groups.
      description: |-
        Add API key to groups.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/api-keys/me/groups/add/ \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]'
        ```
      operationId: addMyApiKeyToListedGroups
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: A list of IDs of the groups to update.
          required: true
          schema:
            $ref: '#/definitions/GroupIdList'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ApiKeyInfoResp'
        '400':
          description: Error in input data.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden. Adding API key to the 'Administrators' group is restricted to administrators.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: The API key is a member of the group already.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2020-08-01T00:00:00+00:00"
        end_of_life_at: "2021-08-01T00:00:00+00:00"
        comment: This endpoint is deprecated. Use POST https://api.us-east-1.mbedcloud.com/v3/applications/{application_id}/groups/add
        links: []
  /v3/api-keys/me/groups/remove:
    post:
      tags:
        - Account - API keys
      summary: Remove API key from groups.
      description: |-
        Remove API key from groups.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/api-keys/me/groups/remove \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]'
        ```
      operationId: removeMyApiKeyFromListedGroups
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: A list of IDs of groups to update.
          required: true
          schema:
            $ref: '#/definitions/GroupIdList'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ApiKeyInfoResp'
        '400':
          description: Error in input data.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2020-08-01T00:00:00+00:00"
        end_of_life_at: "2021-08-01T00:00:00+00:00"
        comment: This endpoint is deprecated. Use POST https://api.us-east-1.mbedcloud.com/v3/applications/{application_id}/groups/remove
        links: []
  '/v3/api-keys/{apikey_id}':
    get:
      tags:
        - Account - API keys
      summary: Get API key.
      description: |-
        Retrieve details of an API key.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getApiKey
      produces:
        - application/json
      parameters:
        - name: apikey_id
          in: path
          description: The ID of the API key to retrieve.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ApiKeyInfoResp'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An API key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2020-08-01T00:00:00+00:00"
        end_of_life_at: "2021-08-01T00:00:00+00:00"
        comment: This endpoint is deprecated. Use GET https://api.us-east-1.mbedcloud.com/v3/applications/{application_id}/access-keys/{access_key_id}
        links: []
    put:
      tags:
        - Account - API keys
      summary: Update API key details.
      description: |-
        Update API key details.

        **Example:**
        ```
        curl -X PUT https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey_id} \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{"name": "TestApiKey25"}'
        ```
      operationId: updateApiKey
      produces:
        - application/json
      parameters:
        - name: apikey_id
          in: path
          description: The ID of the API key to update.
          required: true
          type: string
        - in: body
          name: body
          description: New API key attributes to store.
          required: true
          schema:
            $ref: '#/definitions/ApiKeyUpdateReq'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ApiKeyInfoResp'
        '400':
          description: 'Error in input data, for example, invalid API key name.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden. Only the owner of the API key or an administrator can update an API key.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An API key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2020-08-01T00:00:00+00:00"
        end_of_life_at: "2021-08-01T00:00:00+00:00"
        comment: This endpoint is deprecated. Use PUT https://api.us-east-1.mbedcloud.com/v3/applications/{application_id}/access-keys/{access_key_id}
        links: []
    delete:
      tags:
        - Account - API keys
      summary: Delete API key.
      description: |-
        Delete the API key.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: deleteApiKey
      produces:
        - application/json
      parameters:
        - name: apikey_id
          in: path
          description: The ID of the API key to delete.
          required: true
          type: string
      responses:
        '204':
          description: Deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden. Only the owner of the API key or an administrator can delete an API key.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An API key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2020-08-01T00:00:00+00:00"
        end_of_life_at: "2021-08-01T00:00:00+00:00"
        comment: This endpoint is deprecated. Use DELETE https://api.us-east-1.mbedcloud.com/v3/applications/{application_id}/access-keys/{access_key_id}
        links: []
  '/v3/api-keys/{apikey_id}/groups':
    get:
      tags:
        - Account - API keys
      summary: Get policy groups of an API key.
      description: |-
        Retrieve an array of policy groups associated with an API key.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey_id}/groups \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getGroupsOfApikey
      produces:
        - application/json
      parameters:
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: total_count.'
          required: false
          type: string
        - name: apikey_id
          in: path
          description: The ID of the API key.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummaryList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An API key with the given ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2020-08-01T00:00:00+00:00"
        end_of_life_at: "2021-08-01T00:00:00+00:00"
        comment: This endpoint is deprecated. Use GET https://api.us-east-1.mbedcloud.com/v3/applications/{application_id}/groups
        links: []
    post:
      tags:
        - Account - API keys
      summary: Add API key to a list of groups.
      description: |-
        Add API key to groups.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey_id}/groups \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]'
        ```
      operationId: addApiKeyToGroups
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: apikey_id
          in: path
          description: The ID of the API key to add to the group.
          required: true
          type: string
        - in: body
          name: body
          description: A list of IDs of the groups to update.
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ApiKeyInfoResp'
        '400':
          description: Error in input data.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A group or API key with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: The API key is a member of the group already.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2019-07-11T11:04:57+00:00"
        end_of_life_at: "2020-07-11T11:04:57+00:00"
        comment: This endpoint is deprecated. Use POST https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey_id}/groups/add/
        links: []
    delete:
      tags:
        - Account - API keys
      summary: Remove API key from groups.
      description: |-
        Remove API key from groups.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey_id}/groups \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]'
        ```
      operationId: removeApiKeyFromGroups
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: apikey_id
          in: path
          description: The ID of the API key to remove from the group.
          required: true
          type: string
        - in: body
          name: body
          description: A list of IDs of the groups to update.
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ApiKeyInfoResp'
        '400':
          description: 'Error in input data.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An API key with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2019-07-11T11:04:57+00:00"
        end_of_life_at: "2020-07-11T11:04:57+00:00"
        comment: This endpoint is deprecated. Use POST https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey_id}/groups/remove/
        links: []
  '/v3/api-keys/{apikey_id}/groups/add':
    post:
      tags:
        - Account - API keys
      summary: Add API key to a list of groups.
      description: |-
        Add API key to groups.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey_id}/groups/add \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]'
        ```
      operationId: addApiKeyToListedGroups
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: apikey_id
          in: path
          description: The ID of the API key to add to the group.
          required: true
          type: string
        - in: body
          name: body
          description: A list of IDs of the groups to update.
          required: true
          schema:
            $ref: '#/definitions/GroupIdList'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ApiKeyInfoResp'
        '400':
          description: Error in input data.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A group or API key with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: The API key is a member of the group already.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2020-08-01T00:00:00+00:00"
        end_of_life_at: "2021-08-01T00:00:00+00:00"
        comment: This endpoint is deprecated. Use POST https://api.us-east-1.mbedcloud.com/v3/applications/{application_id}/groups/add
        links: []
  '/v3/api-keys/{apikey_id}/groups/remove':
    post:
      tags:
        - Account - API keys
      summary: Remove API key from groups.
      description: |-
        Remove API key from groups.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey_id}/groups/remove \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]'
        ```
      operationId: removeApiKeyFromListedGroups
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: apikey_id
          in: path
          description: The ID of the API key to remove from the group.
          required: true
          type: string
        - in: body
          name: body
          description: A list of IDs of the groups to update.
          required: true
          schema:
            $ref: '#/definitions/GroupIdList'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ApiKeyInfoResp'
        '400':
          description: 'Error in input data.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An API key with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2020-08-01T00:00:00+00:00"
        end_of_life_at: "2021-08-01T00:00:00+00:00"
        comment: This endpoint is deprecated. Use POST https://api.us-east-1.mbedcloud.com/v3/applications/{application_id}/groups/remove
        links: []
  '/v3/api-keys/{apikey_id}/reset-secret':
    post:
      tags:
        - Account - API keys
      summary: Reset the secret key.
      description: |-
        Reset the secret key of the API key.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/api-keys/{apikey_id}/reset-secret \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: resetSecret
      produces:
        - application/json
      parameters:
        - name: apikey_id
          in: path
          description: The ID of the API key to reset.
          required: true
          type: string
        - in: body
          name: body
          description: New API key attributes to be stored.
          required: false
          schema:
            $ref: '#/definitions/ApiKeyUpdateReq'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ApiKeyInfoResp'
        '400':
          description: Error in input data format.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An API key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2020-08-01T00:00:00+00:00"
        end_of_life_at: "2021-08-01T00:00:00+00:00"
        comment: This endpoint is deprecated.
        links: []
  '/v3/access-keys':
    get:
      tags:
        - Account - access keys
      summary: Get all access keys.
      description: |-
        Retrieve an array of access keys.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/access-keys \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAllAccessKeys
      produces:
        - application/json
      parameters:
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: total_count.'
          required: false
          type: string
        - name: status__eq
          in: query
          description: Status filter.
          required: false
          type: string
        - name: application_id__eq
          in: query
          description: Application filter.
          required: false
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/AccessKeyList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/access-keys/{access_key_id}':
    get:
      tags:
        - Account - access keys
      summary: Get access key.
      description: |-
        Retrieve details of an access key.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/access-keys/{access_key_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAccessKey
      produces:
        - application/json
      parameters:
        - name: access_key_id
          in: path
          description: The ID of the access key to retrieve.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/AccessKey'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An access key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
  /v3/applications:
    get:
      tags:
        - Account - applications
      summary: Get all applications.
      description: |-
        Retrieve an array of applications.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/applications \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAllApplications
      produces:
        - application/json
      parameters:
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: total_count.'
          required: false
          type: string
        - name: status__eq
          in: query
          description: Status filter.
          required: false
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/ApplicationList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - Account - applications
      summary: Create a new application.
      description: |-
        Create a new application.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/applications -d '{"name": "MyApplication1"}' \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json'
        ```
      operationId: createApplication
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: The details of the application to create.
          required: true
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/Application'
      responses:
        '201':
          description: New entity created.
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/Application'
        '400':
          description: 'Error in input data, for example, missing name.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/applications/{application_id}':
    get:
      tags:
        - Account - applications
      summary: Get application.
      description: |-
        Retrieve details of an application.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/applications/{application_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getApplication
      produces:
        - application/json
      parameters:
        - name: application_id
          in: path
          description: The ID of the application to retrieve.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/Application'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An application with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - Account - applications
      summary: Update applicationdetails.
      description: |-
        Update application details.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X PUT https://api.us-east-1.mbedcloud.com/v3/applications/{application_id} \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{"name": "TestApplication25"}'
        ```
      operationId: updateApplication
      produces:
        - application/json
      parameters:
        - name: application_id
          in: path
          description: The ID of the application to update.
          required: true
          type: string
        - in: body
          name: body
          description: New applicationattributes to store.
          required: true
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/Application'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ApiKeyInfoResp'
        '400':
          description: 'Error in input data, for example, invalid display name.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An application with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - Account - applications
      summary: Delete application.
      description: |-
        Delete the application.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/applications/{application_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: deleteApplication
      produces:
        - application/json
      parameters:
        - name: application_id
          in: path
          description: The ID of the application to delete.
          required: true
          type: string
      responses:
        '204':
          description: Deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An application with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/applications/{application_id}/access-keys':
    get:
      tags:
        - Account - applications
      summary: Get all access keys associated with the application.
      description: |-
        Retrieve an array of access keys associated with the application.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/applications/{application_id}/access-keys \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAllApplicationAccessKeys
      produces:
        - application/json
      parameters:
        - name: application_id
          in: path
          description: The ID of the application.
          required: true
          type: string
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: total_count.'
          required: false
          type: string
        - name: status__eq
          in: query
          description: Status filter.
          required: false
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/AccessKeyList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An application with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - Account - applications
      summary: Create a new applicationaccess key.
      description: |-
        Create a new access key for the application.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/applications/{application_id}/access-keys -d '{"name": "MyKey1"}' \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json'
        ```
      operationId: createApplicationAccessKey
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: application_id
          in: path
          description: The ID of the application.
          required: true
          type: string
        - in: body
          name: body
          description: The details of the access key to create.
          required: true
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/AccessKey'
      responses:
        '201':
          description: New entity created.
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/AccessKey'
        '400':
          description: 'Error in input data, for example, missing display name.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An application with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/applications/{application_id}/access-keys/{access_key_id}':
    get:
      tags:
        - Account - applications
      summary: Get access key.
      description: |-
        Retrieve details of an access key associated with the application.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/applications/{application_id}/access-keys/{access_key_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getApplicationAccessKey
      produces:
        - application/json
      parameters:
        - name: application_id
          in: path
          description: The ID of the application.
          required: true
          type: string
        - name: access_key_id
          in: path
          description: The ID of the access key to retrieve.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/AccessKey'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An application or access key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - Account - applications
      summary: Update access key details.
      description: |-
        Update access key details.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X PUT https://api.us-east-1.mbedcloud.com/v3/applications/{application_id}/access-keys/{access_key_id} \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{"name": "TestAccessKey"}'
        ```
      operationId: updateApplicationAccessKey
      produces:
        - application/json
      parameters:
        - name: application_id
          in: path
          description: The ID of the application.
          required: true
          type: string
        - name: access_key_id
          in: path
          description: The ID of the access key to update.
          required: true
          type: string
        - in: body
          name: body
          description: New access key attributes to store.
          required: true
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/AccessKey'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/AccessKey'
        '400':
          description: 'Error in input data, for example, invalid display name.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An application or access key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - Account - applications
      summary: Delete access key associated with the application.
      description: |-
        Delete the access key associated with the application.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/applications/{application_id}/access-keys/{access_key_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: deleteApplicationAccessKey
      produces:
        - application/json
      parameters:
        - name: application_id
          in: path
          description: The ID of the application.
          required: true
          type: string
        - name: access_key_id
          in: path
          description: The ID of the access key to delete.
          required: true
          type: string
      responses:
        '204':
          description: Deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An application or access key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/applications/{application_id}/verification-keys':
    get:
      tags:
        - Account - applications
      summary: Get all verification keys associated with the application.
      description: |-
        Retrieve an array of verification keys associated with the application.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/applications/{application_id}/verification-keys \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAllApplicationVerificationKeys
      produces:
        - application/json
      parameters:
        - name: application_id
          in: path
          description: The ID of the application.
          required: true
          type: string
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: total_count.'
          required: false
          type: string
        - name: issuer__eq
          in: query
          description: Issuer filter.
          required: false
          type: string
        - name: subject__eq
          in: query
          description: Subject filter.
          required: false
          type: string
        - name: fingerprint__eq
          in: query
          description: Fingerprint filter.
          required: false
          type: string
        - name: status__eq
          in: query
          description: Status filter.
          required: false
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/VerificationKeyList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An application with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - Account - applications
      summary: Create a new verification key.
      description: |-
        Create a new verification key for the application.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/applications/{application_id}/verification-keys -d '{"name": "MyKey1", "certificate": "..." }' \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json'
        ```
      operationId: createApplicationVerificationKey
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: application_id
          in: path
          description: The ID of the application.
          required: true
          type: string
        - in: body
          name: body
          description: The details of the verification key to create.
          required: true
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/VerificationKey'
      responses:
        '201':
          description: New entity created.
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/VerificationKey'
        '400':
          description: 'Error in input data, for example, missing display name.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An application with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: A verification key with the given name or certificate exists in the account already.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/applications/{application_id}/verification-keys/{verification_key_id}':
    get:
      tags:
        - Account - applications
      summary: Get verification key.
      description: |-
        Retrieve details of a verification key associated with the application.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/applications/{application_id}/verification-keys/{verification_key_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getApplicationVerificationKey
      produces:
        - application/json
      parameters:
        - name: application_id
          in: path
          description: The ID of the application.
          required: true
          type: string
        - name: verification_key_id
          in: path
          description: The ID of the verification key to retrieve.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/VerificationKey'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An application or verification key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - Account - applications
      summary: Update verification key details.
      description: |-
        Update verification key details.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X PUT https://api.us-east-1.mbedcloud.com/v3/applications/{application_id}/verification-keys/{verification_key_id} \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{"name": "TestVerificationKey"}'
        ```
      operationId: updateApplicationVerificationKey
      produces:
        - application/json
      parameters:
        - name: application_id
          in: path
          description: The ID of the application.
          required: true
          type: string
        - name: verification_key_id
          in: path
          description: The ID of the verification key to update.
          required: true
          type: string
        - in: body
          name: body
          description: New verification key attributes to store.
          required: true
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/VerificationKey'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/VerificationKey'
        '400':
          description: 'Error in input data, for example, invalid display name.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An application or verification key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: A verification key with the given name or certificate exists in the account already.
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - Account - applications
      summary: Delete verification key associated with the application.
      description: |-
        Delete the verification key associated with the application.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/applications/{application_id}/verification-keys/{verification_key_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: deleteApplicationVerificationKey
      produces:
        - application/json
      parameters:
        - name: application_id
          in: path
          description: The ID of the application.
          required: true
          type: string
        - name: verification_key_id
          in: path
          description: The ID of the verification key to delete.
          required: true
          type: string
      responses:
        '204':
          description: Deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An application or verification key with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/applications/{application_id}/groups':
    get:
      tags:
        - Account - applications
      summary: Get policy groups of an application.
      description: |-
        Retrieve an array of policy groups associated with an application.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/applications/{application_id}/groups \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getGroupsOfApplication
      produces:
        - application/json
      parameters:
        - name: application_id
          in: path
          description: The ID of the application.
          required: true
          type: string
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: total_count.'
          required: false
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummaryList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An application with the given ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/applications/{application_id}/groups/add':
    post:
      tags:
        - Account - applications
      summary: Add application to a list of groups.
      description: |-
        Add application to groups.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/applications/{application_id}/groups/add \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]'
        ```
      operationId: addApplicationToGroups
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: application_id
          in: path
          description: The ID of the application to add to the group.
          required: true
          type: string
        - in: body
          name: body
          description: A list of IDs of the groups to update.
          required: true
          schema:
            $ref: '#/definitions/GroupIdList'
      responses:
        '204':
          description: Successful operation.
        '400':
          description: Error in input data.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A group or application with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: The application is a member of the group already.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/applications/{application_id}/groups/remove':
    post:
      tags:
        - Account - applications
      summary: Remove application from groups.
      description: |-
        Remove application from groups.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/applications/{application_id}/groups/remove \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]'
        ```
      operationId: removeApplicationFromGroups
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: application_id
          in: path
          description: The ID of the application to remove from the group.
          required: true
          type: string
        - in: body
          name: body
          description: A list of IDs of the groups to update.
          required: true
          schema:
            $ref: '#/definitions/GroupIdList'
      responses:
        '204':
          description: Successful operation.
        '400':
          description: 'Error in input data, for example, invalid API key name.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden. Only the owner of the API key or an administrator can reset an API key.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An application with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
  /v3/branding-colors:
    delete:
      tags:
        - User interface configuration - colors
      summary: Delete all colors.
      description: |-
        Delete account branding colors for all themes.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example usage:**
        `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/branding-colors -H 'Authorization: Bearer <access_key>'`
      operationId: deleteAllColors
      produces:
        - application/json
      parameters: []
      responses:
        '204':
          description: Colors have been deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account branding colors not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  /v3/branding-colors/dark:
    get:
      tags:
        - User interface configuration - colors
      summary: Get dark theme branding colors.
      description: |-
        Retrieve the dark theme branding colors.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/branding-colors/dark \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getDarkColors
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/BrandingColorList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - User interface configuration - colors
      summary: Updates an array of dark theme branding colors.
      description: |-
        Update an array of dark theme branding colors.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X PUT https://api.us-east-1.mbedcloud.com/v3/branding-colors/dark \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        '[{ "reference": "primary",
           "color": "#f3f93e" }]'
        ```
      operationId: bulkSetDarkColors
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: List of branding colors.
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/BrandingColorUpdate'
      responses:
        '204':
          description: Colors have been set successfully.
        '400':
          description: Error in input data format.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - User interface configuration - colors
      summary: Delete colors in the dark theme.
      description: |-
        Delete account dark theme branding colors.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example usage:**
        `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/branding-colors/dark -H 'Authorization: Bearer <access_key>'`
      operationId: deleteAllDarkColors
      produces:
        - application/json
      parameters: []
      responses:
        '204':
          description: Colors have been deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account branding colors not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/branding-colors/dark/{reference}':
    get:
      tags:
        - User interface configuration - colors
      summary: Get dark theme branding color.
      description: |-
        Retrieve the requested dark theme branding color.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/branding-colors/dark/{reference} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getDarkColor
      produces:
        - application/json
      parameters:
        - <<: *branding_color_param
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/BrandingColor'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Color not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - User interface configuration - colors
      summary: Updates a dark theme branding color.
      description: |-
        Update a dark theme branding color.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X PUT https://api.us-east-1.mbedcloud.com/v3/branding-colors/dark/primary \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{ "color": "#f3f93e" }'
        ```
      operationId: setDarkColor
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - <<: *branding_color_param
        - in: body
          name: body
          description: The branding color.
          required: true
          schema:
            $ref: '#/definitions/BrandingColor'
      responses:
        '200':
          description: Color has been set successfully.
          schema:
            $ref: '#/definitions/BrandingColor'
        '400':
          description: Error in input data format.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Color not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - User interface configuration - colors
      summary: Reset branding color to default.
      description: |-
        Resets the branding color to its dark theme default.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/branding-colors/light/{reference} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: resetDarkColor
      produces:
        - application/json
      parameters:
        - <<: *branding_color_param
      responses:
        '204':
          description: Deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Color not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  /v3/branding-colors/light:
    get:
      tags:
        - User interface configuration - colors
      summary: Get light theme branding colors.
      description: |-
        Retrieve the light theme branding colors.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/branding-colors/light \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getLightColors
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/BrandingColorList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - User interface configuration - colors
      summary: Updates an array of light theme branding colors.
      description: |-
        Update an array of light theme branding colors.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X PUT https://api.us-east-1.mbedcloud.com/v3/branding-colors/light \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        '[{ "reference": "primary",
           "color": "purple" }]'
        ```
      operationId: bulkSetLightColors
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: List of branding colors.
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/BrandingColorUpdate'
      responses:
        '204':
          description: Colors have been set successfully.
        '400':
          description: Error in input data format.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - User interface configuration - colors
      summary: Delete colors in the light theme.
      description: |-
        Delete account light theme branding colors.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example usage:**
        `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/branding-colors/light -H 'Authorization: Bearer <access_key>'`
      operationId: deleteAllLightColors
      produces:
        - application/json
      parameters: []
      responses:
        '204':
          description: Colors have been deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account branding colors not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/branding-colors/light/{reference}':
    get:
      tags:
        - User interface configuration - colors
      summary: Get light theme branding color.
      description: |-
        Retrieve the requested light theme branding color.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/branding-colors/light/{reference} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getLightColor
      produces:
        - application/json
      parameters:
        - <<: *branding_color_param
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/BrandingColor'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Color not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - User interface configuration - colors
      summary: Updates light theme branding color.
      description: |-
        Update light theme branding color.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X PUT https://api.us-east-1.mbedcloud.com/v3/branding-colors/light/primary \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{ "color": "purple" }'
        ```
      operationId: setLightColor
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - <<: *branding_color_param
        - in: body
          name: body
          description: The branding color.
          required: true
          schema:
            $ref: '#/definitions/BrandingColor'
      responses:
        '200':
          description: Color has been set successfully.
          schema:
            $ref: '#/definitions/BrandingColor'
        '400':
          description: Error in input data format.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Color not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - User interface configuration - colors
      summary: Reset branding color to default.
      description: |-
        Resets the branding color to its light theme default.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/branding-colors/light/{reference} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: resetLightColor
      produces:
        - application/json
      parameters:
        - <<: *branding_color_param
      responses:
        '204':
          description: Deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Color not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  /v3/branding-images:
    delete:
      tags:
        - User interface configuration - images
      summary: Delete all images.
      description: |-
        Delete account branding images for all themes.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example usage:**
        `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/branding-images -H 'Authorization: Bearer <access_key>'`
      operationId: deleteAllImages
      produces:
        - application/json
      parameters: []
      responses:
        '204':
          description: Images have been deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account branding images not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  /v3/branding-images/dark:
    get:
      tags:
        - User interface configuration - images
      summary: Get metadata of all dark theme images.
      description: |-
        Retrieve metadata for all dark theme branding images.

        **Example:**
        `curl -X GET https://api.us-east-1.mbedcloud.com/v3/branding-images/dark \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAllDarkImageData
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/BrandingImageList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - User interface configuration - images
      summary: Delete images in the dark theme.
      description: |-
        Delete account dark theme branding images.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example usage:**
        `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/branding-images/dark -H 'Authorization: Bearer <access_key>'`
      operationId: deleteAllDarkImages
      produces:
        - application/json
      parameters: []
      responses:
        '204':
          description: Images have been deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account branding images not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/branding-images/dark/{reference}':
    get:
      tags:
        - User interface configuration - images
      summary: Get metadata of a dark theme image.
      description: |-
        Retrieve metadata for one account dark theme branding image.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/branding-images/dark/{reference} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getDarkImageData
      produces:
        - application/json
      parameters:
        - <<: *branding_image_param
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/BrandingImage'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Unknown image reference.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/branding-images/dark/{reference}/clear':
    post:
      tags:
        - User interface configuration - images
      summary: Revert an image to dark theme default.
      description: |-
        Revert an account branding image to dark theme default.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/branding-images/dark/{reference}/clear \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: clearDarkImage
      produces:
        - application/json
      parameters:
        - <<: *branding_image_param
      responses:
        '204':
          description: Image reverted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Unknown image reference.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/branding-images/dark/{reference}/upload':
    post:
      tags:
        - User interface configuration - images
      summary: Upload a dark theme image.
      description: |-
        Upload a new account branding image in the dark theme in PNG or JPEG format.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/branding-images/dark/{reference}/upload \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: image/png'  --data-binary '@myimage.png'
        ```
      operationId: uploadDarkImage
      consumes:
        - image/png
        - image/jpeg
      produces:
        - application/json
      parameters:
        - <<: *branding_image_param
        - in: body
          name: body
          description: The image in PNG or JPEG format.
          required: true
          schema:
            $ref: '#/definitions/Image'
      responses:
        '201':
          description: Image uploaded successfully.
          headers:
            Location:
              type: string
              description: Location of the image binary.
            Content-Location:
              type: string
              description: Location of the image metadata.
          schema:
            $ref: '#/definitions/BrandingImage'
        '400':
          description: 'Error in input data format, for example, image is too large.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Unknown image reference.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/branding-images/dark/{reference}/upload-multipart':
    post:
      tags:
        - User interface configuration - images
      summary: Upload a dark theme image.
      description: |-
        Upload a new account branding image as form data in the dark theme in PNG or JPEG format.
        <b>Note:</b> This endpoint is restricted to administrators.
      operationId: uploadDarkImageMultipart
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - <<: *branding_image_param
        - in: formData
          name: image
          description: The image in PNG or JPEG format as multipart form data.
          required: true
          type: file
      responses:
        '201':
          description: Image uploaded successfully.
          headers:
            Location:
              type: string
              description: Location of the image binary.
            Content-Location:
              type: string
              description: Location of the image metadata.
          schema:
            $ref: '#/definitions/BrandingImage'
        '400':
          description: 'Error in input data format, for example, image is too large.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Unknown image reference.
          schema:
            $ref: '#/definitions/ErrorResponse'
  /v3/branding-images/light:
    get:
      tags:
        - User interface configuration - images
      summary: Get metadata of all light theme images.
      description: |-
        Retrieve the metadata of all light theme branding images.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/branding-images/light \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAllLightImageData
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/BrandingImageList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - User interface configuration - images
      summary: Delete images in the light theme.
      description: |-
        Delete account light theme branding images.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example usage:**
        `curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/branding-images/light -H 'Authorization: Bearer <access_key>'`
      operationId: deleteAllLightImages
      produces:
        - application/json
      parameters: []
      responses:
        '204':
          description: Images have been deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account branding images not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/branding-images/light/{reference}':
    get:
      tags:
        - User interface configuration - images
      summary: Get metadata of a light theme image.
      description: |-
        Retrieve metadata for one account light theme branding image.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/branding-images/light/{reference} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getLightImageData
      produces:
        - application/json
      parameters:
        - <<: *branding_image_param
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/BrandingImage'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Unknown image reference.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/branding-images/light/{reference}/clear':
    post:
      tags:
        - User interface configuration - images
      summary: Revert an image to light theme default.
      description: |-
        Revert an account branding image to light theme default.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/branding-images/light/{reference}/clear \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: clearLightImage
      produces:
        - application/json
      parameters:
        - <<: *branding_image_param
      responses:
        '204':
          description: Image reverted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Unknown image reference.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/branding-images/light/{reference}/upload':
    post:
      tags:
        - User interface configuration - images
      summary: Upload a light theme image.
      description: |-
        Upload a new account light theme branding image in PNG or JPEG format.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/branding-images/light/{reference}/upload \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: image/png' --data-binary '@myimage.png'
        ```
      operationId: uploadLightImage
      consumes:
        - image/png
        - image/jpeg
      produces:
        - application/json
      parameters:
        - <<: *branding_image_param
        - in: body
          name: body
          description: The image in PNG or JPEG format.
          required: true
          schema:
            $ref: '#/definitions/Image'
      responses:
        '201':
          description: Image uploaded successfully.
          headers:
            Location:
              type: string
              description: Location of the image binary.
            Content-Location:
              type: string
              description: Location of the image metadata.
          schema:
            $ref: '#/definitions/BrandingImage'
        '400':
          description: 'Error in input data format, for example, image is too large.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Unknown image reference.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/branding-images/light/{reference}/upload-multipart':
    post:
      tags:
        - User interface configuration - images
      summary: Upload a light theme image.
      description: |-
        Upload a new account branding image as form data in the light theme in PNG or JPEG format.
        <b>Note:</b> This endpoint is restricted to administrators.
      operationId: uploadLightImageMultipart
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - <<: *branding_image_param
        - in: formData
          name: image
          description: The image in PNG or JPEG format as multipart form data.
          required: true
          type: file
      responses:
        '201':
          description: Image uploaded successfully.
          headers:
            Location:
              type: string
              description: Location of the image binary.
            Content-Location:
              type: string
              description: Location of the image metadata.
          schema:
            $ref: '#/definitions/BrandingImage'
        '400':
          description: 'Error in input data format, for example, image is too large.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Unknown image reference.
          schema:
            $ref: '#/definitions/ErrorResponse'
  /v3/identity-providers:
    get:
      tags:
        - Account - identity providers
      summary: Get all identity providers.
      description: |-
        Retrieve an array of identity providers.
        <b>Note:</b> This endpoint is restricted to administrators.
      operationId: getAllIdentityProviders
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: total_count.'
          required: false
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/IdentityProviderList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - Account - identity providers
      summary: Create a new identity provider.
      description: |-
        Create a new identity provider.
        <b>Note:</b> This endpoint is restricted to administrators.
      operationId: createIdentityProvider
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - <<: *discovery_param
        - in: body
          name: body
          description: Details of the identity provider to create.
          required: true
          schema:
            $ref: '#/definitions/IdentityProviderCreationReq'
      responses:
        '201':
          description: New entity created.
          headers:
            Location:
              type: string
              description: '/v3/identity-providers/{identity_provider_id}'
            Content-Location:
              type: string
              description: '/v3/identity-providers/{identity_provider_id}'
          schema:
            $ref: '#/definitions/IdentityProviderInfo'
        '400':
          description: 'Error in input data, for example, name is too long.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/identity-providers/{identity_provider_id}':
    get:
      tags:
        - Account - identity providers
      summary: Get identity provider.
      description: |-
        Retrieve an identity provider.
        <b>Note:</b> This endpoint is restricted to administrators.
      operationId: getIdentityProvider
      produces:
        - application/json
      parameters:
        - name: identity_provider_id
          in: path
          description: The ID of the identity provider to retrieve.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/IdentityProviderInfo'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An identity provider not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - Account - identity providers
      summary: Update an existing identity provider.
      description: |-
        Update an existing identity provider.
        <b>Note:</b> This endpoint is restricted to administrators.
      operationId: updateIdentityProvider
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: identity_provider_id
          in: path
          description: The ID of the identity provider to update.
          required: true
          type: string
        - <<: *discovery_param
        - in: body
          name: body
          description: Details of the identity provider to update.
          required: true
          schema:
            $ref: '#/definitions/IdentityProviderUpdateReq'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/IdentityProviderInfo'
        '400':
          description: 'Error in input data, for example, missing name.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An identity provider not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - Account - identity providers
      summary: Delete an identity provider by ID.
      description: |-
        Delete an identity provider by ID.
        <b>Note:</b> This endpoint is restricted to administrators.
      operationId: deleteIdentityProvider
      produces:
        - application/json
      parameters:
        - name: identity_provider_id
          in: path
          description: The ID of the identity provider to delete.
          required: true
          type: string
      responses:
        '204':
          description: Deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden, or identity provider is in use.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An identity provider not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/identity-providers/{identity_provider_id}/delete-sp-certificate':
    post:
      tags:
        - Account - identity providers
      summary: Delete the service provider certificate.
      description: |-
        Delete a service provider certificate.
        <b>Note:</b> This endpoint is restricted to administrators.
      operationId: deleteSpCertificate
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: identity_provider_id
          in: path
          description: The ID of the identity provider.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          headers:
            Content-Location:
              type: string
              description: '/v3/identity-providers/{identity_provider_id}'
          schema:
            $ref: '#/definitions/IdentityProviderInfo'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An identity provider not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/identity-providers/{identity_provider_id}/generate-sp-certificate':
    post:
      tags:
        - Account - identity providers
      summary: Generate a new service provider certificate.
      description: |-
        Generate a new service provider certificate.
        <b>Note:</b> This endpoint is restricted to administrators.
      operationId: generateSpCertificate
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: identity_provider_id
          in: path
          description: The ID of the identity provider to generate a certificate for.
          required: true
          type: string
        - in: body
          name: body
          description: Details of the service provider certificate to generate.
          required: false
          schema:
            $ref: '#/definitions/CertificateGenerationReq'
      responses:
        '200':
          description: Successful operation.
          headers:
            Content-Location:
              type: string
              description: '/v3/identity-providers/{identity_provider_id}'
          schema:
            $ref: '#/definitions/IdentityProviderInfo'
        '400':
          description: 'Error in input data, for example, invalid certificate validity value.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An identity provider not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/identity-providers/{identity_provider_id}/refresh-jwks':
    post:
      tags:
        - Account - identity providers
      summary: Refreshes the OIDC signing keys.
      description: |-
        Refreshes an OIDC IdP's signing keys.
        <b>Note:</b> This endpoint is restricted to administrators.
      operationId: refreshJwks
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: identity_provider_id
          in: path
          description: The ID of the identity provider for which to refresh the signing keys.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          headers:
            Content-Location:
              type: string
              description: '/v3/identity-providers/{identity_provider_id}'
          schema:
            $ref: '#/definitions/IdentityProviderInfo'
        '400':
          description: 'Not an OIDC IdP or JWKS URI is unspecified.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An identity provider not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  /v3/limitations:
    get:
      tags:
        - Account - entitlement limitations
      summary: Get entitlement limitations.
      description: Retrieve an array of entitlement limitations.
      operationId: getAccountLimitations
      produces:
        - application/json
      parameters:
        - name: inherited__eq
          in: query
          description: Filter for finding account limitations by inheritance. True returns also inherited limitations. False returns only non-inherited ones.
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/AccountLimitationList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/limitations/{limitation_id}':
    get:
      tags:
        - Account - entitlement limitations
      summary: Get an entitlement limitation.
      description: Retrieve an entitlement limitation.
      operationId: getAccountLimitation
      produces:
        - application/json
      parameters:
        - name: limitation_id
          in: path
          description: The ID of the limitation to be fetched.
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/AccountLimitation'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Limitation with the given ID not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  /v3/policy-groups:
    get:
      tags:
        - Account - policy groups
      summary: Get policy groups.
      description: |-
        Retrieve an array of policy groups.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/policy-groups \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAllGroups
      produces:
        - application/json
      parameters:
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: total_count.'
          required: false
          type: string
        - name: name__eq
          in: query
          description: Filter for group name.
          required: false
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummaryList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - Account - policy groups
      summary: Create a new group.
      description: |-
        Create a new group.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/policy-groups \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' -d '{"name": "MyGroup1"}'
        ```
      operationId: createGroup
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Details of the group to create.
          required: true
          schema:
            $ref: '#/definitions/GroupCreationInfo'
      responses:
        '201':
          description: New entity created.
          schema:
            $ref: '#/definitions/GroupSummary'
        '400':
          description: 'Error in input data, for example, invalid group name.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: A group with that name already exists.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/policy-groups/{group_id}':
    get:
      tags:
        - Account - policy groups
      summary: Get a policy group.
      description: |-
        Retrieve a policy group.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getGroupSummary
      produces:
        - application/json
      parameters:
        - name: group_id
          in: path
          description: The ID of the policy group to retrieve.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummary'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - Account - policy groups
      summary: Add members to a group.
      description: |-
        Add users and API keys to a group.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id} \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{"users": ["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]}'
        ```
      operationId: addSubjectsToGroup
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: group_id
          in: path
          description: The ID of the group to update.
          required: true
          type: string
        - in: body
          name: body
          description: A list of users and API keys to add to the group.
          required: true
          schema:
            $ref: '#/definitions/SubjectList'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummary'
        '400':
          description: 'Error in input data, for example, the user or API key does not exist.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: The user of this API key is a member of the group already.
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - Account - policy groups
      summary: Update the group name.
      description: |-
        Update a group name.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X PUT https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id} \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{"name": "TestGroup2"}'
        ```
      operationId: updateGroupName
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: group_id
          in: path
          description: The ID of the group to update.
          required: true
          type: string
        - in: body
          name: body
          description: Details of the group to create.
          required: true
          schema:
            $ref: '#/definitions/GroupUpdateInfo'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummary'
        '400':
          description: 'Error in input data, for example, the group name is too long.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - Account - policy groups
      summary: Delete a group.
      description: |-
        Delete a group.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: deleteGroup
      produces:
        - application/json
      parameters:
        - name: group_id
          in: path
          description: The ID of the group to delete.
          required: true
          type: string
      responses:
        '204':
          description: Deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden, or Administrators group cannot be removed.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/policy-groups/{group_id}/applications':
    get:
      tags:
        - Account - policy groups
      summary: Get the applications of a policy group.
      description: |-
        Retrieve an array of applications associated with a policy group.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id}/applications \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getApplicationsOfGroup
      produces:
        - application/json
      parameters:
        - name: group_id
          in: path
          description: The ID of the group.
          required: true
          type: string
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: total_count.'
          required: false
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '../../api-common-definitions/iam.yaml#/definitions/ApplicationList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/policy-groups/{group_id}/applications/add':
    post:
      tags:
        - Account - policy groups
      summary: Add applications to the group.
      description: |-
        Add applications to the group.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id}/applications/remove \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{ "applications": ["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"] }'
        ```
      operationId: addListedApplicationsToGroup
      produces:
        - application/json
      parameters:
        - name: group_id
          in: path
          description: The ID of the group.
          required: true
          type: string
        - in: body
          name: body
          description: A list of applications to add to the group.
          required: true
          schema:
            $ref: '#/definitions/SubjectList'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummary'
        '400':
          description: 'Error in input data, for example, the group Id does not exist.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: The application is a member of the group already.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/policy-groups/{group_id}/applications/remove':
    post:
      tags:
        - Account - policy groups
      summary: Remove applications from a group.
      description: |-
        Remove applications from groups.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id}/applications/remove \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{ "applications": ["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"] }'
        ```
      operationId: removeListedApplicationsFromGroup
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: group_id
          in: path
          description: The ID of the group.
          required: true
          type: string
        - in: body
          name: body
          description: A list of applications to remove from the group.
          required: true
          schema:
            $ref: '#/definitions/SubjectList'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummary'
        '400':
          description: 'Error in input data, for example, the array of applications is missing.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/policy-groups/{group_id}/api-keys':
    get:
      tags:
        - Account - policy groups
      summary: Get the API keys of a policy group.
      description: |-
        Retrieve an array of API keys associated with a policy group.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id}/api-keys \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getApiKeysOfGroup
      produces:
        - application/json
      parameters:
        - name: group_id
          in: path
          description: The ID of the group.
          required: true
          type: string
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: total_count.'
          required: false
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/ApiKeyInfoRespList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2020-08-01T00:00:00+00:00"
        end_of_life_at: "2021-08-01T00:00:00+00:00"
        comment: This endpoint is deprecated, GET https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id}/applications
        links: []
    post:
      tags:
        - Account - policy groups
      summary: Add API keys to the group.
      description: |-
        Add API keys to the group.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id}/api-keys \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{ "apikeys" : ["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"] }'
        ```
      operationId: addApiKeysToGroup
      produces:
        - application/json
      parameters:
        - name: group_id
          in: path
          description: The ID of the group.
          required: true
          type: string
        - in: body
          name: body
          description: A list of API keys to add to the group.
          required: true
          schema:
            $ref: '#/definitions/SubjectList'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummary'
        '400':
          description: 'Error in input data, for example, the group Id does not exist.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden. Adding an API key to the 'Administrators' group is restricted to administrators.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: The API key is a member of the group already.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2019-07-11T11:04:57+00:00"
        end_of_life_at: "2020-07-11T11:04:57+00:00"
        comment: This endpoint is deprecated, use POST https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id}/api-keys/add/
        links: []
    delete:
      tags:
        - Account - policy groups
      summary: Remove API keys from a group.
      description: |-
        Remove API keys from groups.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id}/api-keys \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{ "apikeys": ["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"] }'
        ```
      operationId: removeApiKeysFromGroup
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: group_id
          in: path
          description: The ID of the group.
          required: true
          type: string
        - in: body
          name: body
          description: A list of API keys to remove from the group.
          required: true
          schema:
            $ref: '#/definitions/SubjectList'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummary'
        '400':
          description: 'Error in input data, for example, the array of API keys is missing.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2019-07-11T11:04:57+00:00"
        end_of_life_at: "2020-07-11T11:04:57+00:00"
        comment: This endpoint is deprecated. Use POST https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id}/api-keys/remove/
        links: []
  '/v3/policy-groups/{group_id}/api-keys/add':
    post:
      tags:
        - Account - policy groups
      summary: Add API Keys to the group.
      description: |-
        Add API keys to the group.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id}/api-keys/add \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{ "apikeys" : ["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"] }'
        ```
      operationId: addListedApiKeysToGroup
      produces:
        - application/json
      parameters:
        - name: group_id
          in: path
          description: The ID of the group.
          required: true
          type: string
        - in: body
          name: body
          description: A list of API keys to add to the group.
          required: true
          schema:
            $ref: '#/definitions/SubjectList'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummary'
        '400':
          description: 'Error in input data, for example, the group Id does not exist.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden. Adding an API key to the 'Administrators' group is restricted to administrators.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: The API key is a member of the group already.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2020-08-01T00:00:00+00:00"
        end_of_life_at: "2021-08-01T00:00:00+00:00"
        comment: This endpoint is deprecated, POST https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id}/applications/add
        links: []
  '/v3/policy-groups/{group_id}/api-keys/remove':
    post:
      tags:
        - Account - policy groups
      summary: Remove API keys from a group.
      description: |-
        Remove API keys from groups.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id}/api-keys/remove \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{ "apikeys" : ["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"] }'
        ```
      operationId: removeListedApiKeysFromGroup
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: group_id
          in: path
          description: The ID of the group.
          required: true
          type: string
        - in: body
          name: body
          description: A list of API keys to remove from the group.
          required: true
          schema:
            $ref: '#/definitions/SubjectList'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummary'
        '400':
          description: 'Error in input data, for example, the array of API keys is missing.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2020-08-01T00:00:00+00:00"
        end_of_life_at: "2021-08-01T00:00:00+00:00"
        comment: This endpoint is deprecated, POST https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id}/applications/remove
        links: []
  '/v3/policy-groups/{group_id}/users':
    get:
      tags:
        - Account - policy groups
      summary: Get users of a policy group.
      description: |-
        Retrieve an array of users associated with a policy group.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id}/users \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getUsersOfGroup
      produces:
        - application/json
      parameters:
        - name: group_id
          in: path
          description: The ID of the group.
          required: true
          type: string
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: total_count.'
          required: false
          type: string
        - name: status__eq
          in: query
          description: An optional filter to retrieve users by status.
          required: false
          type: string
        - name: status__in
          in: query
          description: An optional filter to retrieve users with a specified set of statuses.
          required: false
          type: string
        - name: status__nin
          in: query
          description: An optional filter to exclude users with a specified set of statuses.
          required: false
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/UserInfoRespList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - Account - policy groups
      summary: Add users to the group.
      description: |-
        Add users to the group.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id}/users \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{ "users": ["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"] }'
        ```
      operationId: addUsersToGroup.
      produces:
        - application/json
      parameters:
        - name: group_id
          in: path
          description: The ID of the group.
          required: true
          type: string
        - in: body
          name: body
          description: A list of API keys to add to the group.
          required: true
          schema:
            $ref: '#/definitions/SubjectList'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummary'
        '400':
          description: 'Error in input data, for example, the group Id does not exist.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: The user is a member of the group already.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2019-07-11T11:04:57+00:00"
        end_of_life_at: "2020-07-11T11:04:57+00:00"
        comment: This endpoint is deprecated, POST https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id}/users/add/
        links: []
    delete:
      tags:
        - Account - policy groups
      summary: Remove users from a group.
      description: |-
        Manage policy groups.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id}/users \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{ "users": ["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"] }'
        ```
      operationId: removeUsersFromGroup
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: group_id
          in: path
          description: The ID of the group.
          required: true
          type: string
        - in: body
          name: body
          description: A list of users to remove from the group.
          required: true
          schema:
            $ref: '#/definitions/SubjectList'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummary'
        '400':
          description: 'Error in input data, for example, the user removing themselves from the Administrators group.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2019-07-11T11:04:57+00:00"
        end_of_life_at: "2020-07-11T11:04:57+00:00"
        comment: This endpoint is deprecated, POST https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id}/users/remove/
        links: []
  '/v3/policy-groups/{group_id}/users/remove':
    post:
      tags:
        - Account - policy groups
      summary: Remove users from a group.
      description: |-
        Remove users from a policy group.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id}/users/remove \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{ "users": ["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"] }'
        ```
      operationId: removeListedUsersFromGroup
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: group_id
          in: path
          description: The ID of the group.
          required: true
          type: string
        - in: body
          name: body
          description: A list of users to remove from the group.
          required: true
          schema:
            $ref: '#/definitions/SubjectList'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummary'
        '400':
          description: 'Error in input data, for example, the user removing themselves from the Administrators group.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/policy-groups/{group_id}/users/add':
    post:
      tags:
        - Account - policy groups
      summary: Add users to the group.
      description: |-
        Add users to the group.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/policy-groups/{group_id}/users/add \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{ "users": ["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"] }'
        ```
      operationId: addListedUsersToGroup.
      produces:
        - application/json
      parameters:
        - name: group_id
          in: path
          description: The ID of the group.
          required: true
          type: string
        - in: body
          name: body
          description: A list of API keys to add to the group.
          required: true
          schema:
            $ref: '#/definitions/SubjectList'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummary'
        '400':
          description: 'Error in input data, for example, the group Id does not exist.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: The user is a member of the group already.
          schema:
            $ref: '#/definitions/ErrorResponse'
  /v3/trusted-certificates:
    get:
      tags:
        - Security and identity - certificates
      summary: Get all trusted certificates.
      description: |-
        Retrieve an array of trusted certificates.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/trusted-certificates \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAllCertificates
      produces:
        - application/json
      parameters:
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: total_count.'
          required: false
          type: string
        - name: name__eq
          in: query
          description: Filter for certificate name.
          required: false
          type: string
        - name: service__eq
          in: query
          description: 'Service filter, either LwM2M or bootstrap.'
          required: false
          type: string
        - name: expire__eq
          in: query
          description: Expire filter in days.
          required: false
          type: integer
          format: int32
        - name: device_execution_mode__eq
          in: query
          description: 'Device execution mode: 1 for developer certificates or another natural integer value.'
          required: false
          type: integer
          format: int32
        - name: device_execution_mode__neq
          in: query
          description: Device execution mode `not_equals` filter.
          required: false
          type: integer
          format: int32
        - name: owner__eq
          in: query
          description: Owner name filter.
          required: false
          type: string
        - name: enrollment_mode__eq
          in: query
          description: Enrollment mode filter.
          required: false
          type: boolean
        - name: status__eq
          in: query
          description: Filter for certificate status.
          required: false
          type: string
        - name: issuer__like
          in: query
          description: 'Issuer filter. Finds all matches where the filter value is a case-insensitive substring of the result. Example: issuer__like=cn=iss matches CN=issuer.'
          required: false
          type: string
        - name: subject__like
          in: query
          description: 'Subject filter. Finds all matches where the filter value is a case-insensitive substring of the result. Example: subject__like=cn=su matches CN=subject.'
          required: false
          type: string
        - name: certificate_fingerprint__eq
          in: query
          description: Filter for certificate fingerprint.
          required: false
          type: string
        - name: valid__eq
          in: query
          description: 'Filter for finding certificates by validity. True returns certificates which are not yet expired. False returns certificates which have expired.'
          required: false
          type: boolean
        - name: is_public__eq
          in: query
          description: 'Filter for finding public certificates.'
          required: false
          type: boolean
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/TrustedCertificateRespList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - Security and identity - certificates
      summary: Upload a new trusted certificate.
      description: |-
        Upload new trusted certificates.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/trusted-certificates \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d {"name": "myCert1", "description": "very important cert", "certificate": "certificate_data", "service": "lwm2m"}
        ```
      operationId: addCertificate
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: A trusted certificate object with attributes.
          required: true
          schema:
            $ref: '#/definitions/TrustedCertificateReq'
      responses:
        '201':
          description: New entity created.
          schema:
            $ref: '#/definitions/TrustedCertificateResp'
        '400':
          description: Invalid certificate data, or missing or invalid parameters.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: 'Forbidden, only available for administrators of commercial accounts.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Certificate with the given name or subject already exists.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/trusted-certificates/{cert_id}':
    get:
      tags:
        - Security and identity - certificates
      summary: Get a trusted certificate.
      description: |-
        Retrieve a trusted certificate.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getCertificate
      produces:
        - application/json
      parameters:
        - name: cert_id
          in: path
          description: The ID of the trusted certificate to retrieve.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/TrustedCertificateResp'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A certificate not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - Security and identity - certificates
      summary: Update trusted certificate.
      description: |-
        Update existing trusted certificates.

        **Example:**
        ```
        curl -X PUT https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert_id} \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d {"description": "very important cert"}
        ```
      operationId: updateCertificate
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: cert_id
          in: path
          description: The ID of the trusted certificate to update.
          required: true
          type: string
        - in: body
          name: body
          description: A trusted certificate object with attributes.
          required: true
          schema:
            $ref: '#/definitions/TrustedCertificateUpdateReq'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/TrustedCertificateResp'
        '400':
          description: Invalid certificate data, or missing or invalid parameters.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A certificate not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: Certificate with the given name or subject already exists.
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - Security and identity - certificates
      summary: Delete a trusted certificate by ID.
      description: |-
        Delete a trusted certificate.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: deleteCertificate
      produces:
        - application/json
      parameters:
        - name: cert_id
          in: path
          description: The ID of the trusted certificate to delete.
          required: true
          type: string
      responses:
        '204':
          description: Deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A certificate not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/trusted-certificates/{cert_id}/release':
    post:
      tags:
        - Security and identity - certificates
      summary: Release an OEM certificate.
      description: |-
        Mark an OEM trusted certificate as public.
        <b>Note:</b> This endpoint is restricted to OEM administrators.
        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert_id}/release \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: releaseCertificate
      produces:
        - application/json
      parameters:
        - name: cert_id
          in: path
          description: The ID of the trusted certificate to release.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/TrustedCertificateResp'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A certificate not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/trusted-certificates/{cert_id}/unrelease':
    post:
      tags:
        - Security and identity - certificates
      summary: Unrelease an OEM certificate.
      description: |-
        Unrelease an OEM trusted certificate for being private again.
        <b>Note:</b> This endpoint is restricted to OEM administrators.
        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/trusted-certificates/{cert_id}/unrelease \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: unreleaseCertificate
      produces:
        - application/json
      parameters:
        - name: cert_id
          in: path
          description: The ID of the trusted certificate to unrelease.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/TrustedCertificateResp'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A certificate not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  /v3/oem-certificates:
    get:
      tags:
        - Security and identity - OEM certificates
      summary: Get all OEM certificates.
      description: |-
        Retrieve an array of OEM certificates.
        <b>Note:</b> This endpoint is restricted to administrators.
        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/oem-certificates \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAllOemCertificates
      produces:
        - application/json
      parameters:
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: total_count.'
          required: false
          type: string
        - name: service__eq
          in: query
          description: 'Service filter, either LwM2M or bootstrap.'
          required: false
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/TrustedCertificateRespList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/oem-certificates/{oem_cert_id}':
    get:
      tags:
        - Security and identity - OEM certificates
      summary: Get an OEM certificate.
      description: |-
        Retrieve an OEM certificate.
        <b>Note:</b> This endpoint is restricted to administrators.
        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/oem-certificates/{oem_cert_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getOemCertificate
      produces:
        - application/json
      parameters:
        - name: oem_cert_id
          in: path
          description: The ID of the OEM certificate to retrieve.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/TrustedCertificateResp'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An OEM certificate not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/oem-certificates/{oem_cert_id}/import':
    post:
      tags:
        - Security and identity - OEM certificates
      summary: Import an OEM certificate.
      description: |-
        Import an OEM certificate to this account.
        <b>Note:</b> This endpoint is restricted to administrators.
        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/oem-certificates/{oem_cert_id}/import \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: importOemCertificate
      produces:
        - application/json
      parameters:
        - name: oem_cert_id
          in: path
          description: The ID of the OEM certificate to import.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/TrustedCertificateResp'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An OEM certificate not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/oem-certificates/{oem_cert_id}/remove':
    post:
      tags:
        - Security and identity - OEM certificates
      summary: Removes an OEM certificate.
      description: |-
        Remove an OEM certificate from this account.
        <b>Note:</b> This endpoint is restricted to administrators.
        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/oem-certificates/{oem_cert_id}/remove \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: removeOemCertificate
      produces:
        - application/json
      parameters:
        - name: oem_cert_id
          in: path
          description: The ID of the OEM certificate to remove.
          required: true
          type: string
      responses:
        '204':
          description: Successful operation.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An OEM certificate not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
  /v3/user-invitations:
    get:
      tags:
        - Account - user invitations
      summary: Get user invitations.
      description: |-
        Retrieve an array of active user invitations sent by email.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/user-invitations \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAllInvitations
      produces:
        - application/json
      parameters:
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: login_profiles__eq
          in: query
          description: Filter to retrieve user invitations by a specified login profile.
          required: false
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/UserInvitationRespList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - Account - user invitations
      summary: Create a user invitation.
      description: |-
        Invite a new or existing user.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/user-invitations \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d {"email": "myemail@company.com"}
        ```
      operationId: createInvitation
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: A user invitation object with attributes.
          required: true
          schema:
            $ref: '#/definitions/UserInvitationReq'
      responses:
        '201':
          description: New entity created.
          schema:
            $ref: '#/definitions/UserInvitationResp'
        '400':
          description: 'Error in input data, for example, an invalid email address.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/user-invitations/{invitation_id}':
    get:
      tags:
        - Account - user invitations
      summary: Details of a user invitation.
      description: |-
        Retrieve the details of an active user invitation.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/user-invitations/{invitation_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getInvitation
      produces:
        - application/json
      parameters:
        - name: invitation_id
          in: path
          description: The ID of the invitation to retrieve.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/UserInvitationResp'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An invitation with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - Account - user invitations
      summary: Delete a user invitation.
      description: |-
        Delete an active user invitation sent to a new or existing user.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/user-invitations/{invitation_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: deleteInvitation
      produces:
        - application/json
      parameters:
        - name: invitation_id
          in: path
          description: The ID of the invitation to delete.
          required: true
          type: string
      responses:
        '204':
          description: Deleted successfully.
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: An invitation with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
  /v3/users:
    get:
      tags:
        - Account - users
      summary: Get users.
      description: |-
        Retrieve an array of users.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/users \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getAllUsers
      produces:
        - application/json
      parameters:
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: total_count.'
          required: false
          type: string
        - name: email__eq
          in: query
          description: Filter for email address
          required: false
          type: string
        - name: status__eq
          in: query
          description: 'Filter for status, for example, active or reset.'
          required: false
          type: string
        - name: status__in
          in: query
          description: An optional filter to retrieve users with a specified set of statuses.
          required: false
          type: string
        - name: status__nin
          in: query
          description: An optional filter to exclude users with a specified set of statuses.
          required: false
          type: string
        - name: login_profiles__eq
          in: query
          description: An optional filter to retrieve users with a specified login profile.
          required: false
          type: string
        - name: password_change_needed__eq
          in: query
          description: An optional filter to retrieve users that do or do not require password change.
          required: false
          type: boolean
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/UserInfoRespList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - Account - users
      summary: Create a new user.
      description: |-
        Create or invite a new user to the account. The invited user has to accept the invitation by clicking the link in the invitation email.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/users?action=invite \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d {"email": "myemail@company.com"}
        ```
      operationId: createUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: A user object with attributes.
          required: true
          schema:
            $ref: '#/definitions/UserInfoReq'
        - name: action
          in: query
          description: 'Action, either `create` or `invite`.'
          required: false
          type: string
          default: create
      responses:
        '201':
          description: New entity created.
          schema:
            $ref: '#/definitions/UserInfoResp'
        '400':
          description: 'Error in input data, for example, an invalid email address.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: A user with the given username or email already exists.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/users/{user_id}':
    get:
      tags:
        - Account - users
      summary: Details of a user.
      description: |-
        Retrieve the details of a user.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/users/{user_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getUser
      produces:
        - application/json
      parameters:
        - name: user_id
          in: path
          description: The ID of the user.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/UserInfoResp'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A user with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      tags:
        - Account - users
      summary: Update user details.
      description: |-
        Update user details.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X PUT https://api.us-east-1.mbedcloud.com/v3/users/{user_id} \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '{"username": "myusername"}'
        ```
      operationId: updateUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: user_id
          in: path
          description: The ID of the user.
          required: true
          type: string
        - in: body
          name: body
          description: A user object with attributes.
          required: true
          schema:
            $ref: '#/definitions/UserUpdateReq'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/UserInfoResp'
        '400':
          description: 'Error in input data, for example, an invalid email address.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A user with the given ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: A user with the given username or email already exists.
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      tags:
        - Account - users
      summary: Delete a user.
      description: |-
        Delete a user.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/users/{user_id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: deleteUser
      produces:
        - application/json
      parameters:
        - name: user_id
          in: path
          description: The ID of the user to delete.
          required: true
          type: string
      responses:
        '204':
          description: Deleted successfully.
        '400':
          description: 'Bad request, for example, trying to delete active user.'
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A user with the specified ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/users/{user_id}/groups':
    get:
      tags:
        - Account - users
      summary: Get policy groups for a user.
      description: |-
        Retrieve an array of policy groups associated with a user.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/users/{user_id}/groups \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getGroupsOfUser
      produces:
        - application/json
      parameters:
        - name: limit
          in: query
          description: 'The number of results to return (2-1000). Default 50.'
          required: false
          type: integer
          default: 50
          format: int32
        - name: after
          in: query
          description: The entity ID to retrieve after the given one.
          required: false
          type: string
        - name: order
          in: query
          description: 'Record order based on creation. Acceptable values: ASC, DESC. Default: ASC.'
          required: false
          type: string
          default: ASC
        - name: include
          in: query
          description: 'Comma-separated additional data to return. Currently supported: total_count.'
          required: false
          type: string
        - name: user_id
          in: path
          description: The ID of the user.
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/GroupSummaryList'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A user with the given ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
    post:
      tags:
        - Account - users
      summary: Add user to a list of groups.
      description: |-
        Add user to groups.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/users/{user_id}/groups \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]'
        ```
      operationId: addUserToGroups
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: user_id
          in: path
          description: The ID of the user to add to the group.
          required: true
          type: string
        - in: body
          name: body
          description: A list of IDs of the groups to update.
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/UserInfoResp'
        '400':
          description: Error in input data.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A user or group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: The user is a member of the group already.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2019-07-11T11:04:57+00:00"
        end_of_life_at: "2020-07-11T11:04:57+00:00"
        comment: This endpoint is deprecated, use POST https://api.us-east-1.mbedcloud.com/v3/users/{user_id}/groups/add/
        links: []
    delete:
      tags:
        - Account - users
      summary: Remove user from groups.
      description: |-
        Remove user from groups.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/users/{user_id}/groups \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]'
        ```
      operationId: removeUserFromGroups
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: user_id
          in: path
          description: The ID of the user to remove from the group.
          required: true
          type: string
        - in: body
          name: body
          description: A list of IDs of the groups to update.
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/UserInfoResp'
        '400':
          description: Error in input data.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A user with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
      deprecated: true
      x-deprecation:
        issued_at: "2019-07-11T11:04:57+00:00"
        end_of_life_at: "2020-07-11T11:04:57+00:00"
        comment: This endpoint is deprecated, use POST https://api.us-east-1.mbedcloud.com/v3/users/{user_id}/groups/remove/
        links: []
  '/v3/users/{user_id}/groups/add':
    post:
      tags:
        - Account - users
      summary: Add user to a list of groups.
      description: |-
        Add user to groups.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/users/{user_id}/groups/add \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]'
        ```
      operationId: addUserToListedGroups
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: user_id
          in: path
          description: The ID of the user to add to the group.
          required: true
          type: string
        - in: body
          name: body
          description: A list of IDs of the groups to update.
          required: true
          schema:
            $ref: '#/definitions/GroupIdList'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/UserInfoResp'
        '400':
          description: Error in input data.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A user or group with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '409':
          description: The user is a member of the group already.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/users/{user_id}/groups/remove':
    post:
      tags:
        - Account - users
      summary: Remove user from groups.
      description: |-
        Remove user from groups.
        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/users/{user_id}/groups/remove \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '["0162056a9a1586f30242590700000000","0117056a9a1586f30242590700000000"]'
        ```
      operationId: removeUserFromListedGroups
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: user_id
          in: path
          description: The ID of the user to remove from the group.
          required: true
          type: string
        - in: body
          name: body
          description: A list of IDs of the groups to update.
          required: true
          schema:
            $ref: '#/definitions/GroupIdList'
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: '#/definitions/UserInfoResp'
        '400':
          description: Error in input data.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A user with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
  '/v3/users/{user_id}/remove':
    post:
      tags:
        - Account - users
      summary: Remove user from the account.
      description: |-
        Remove user from the account.

        <b>Note:</b> This endpoint is restricted to administrators.

        **Example:**
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v3/users/{user_id}/remove \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: removeUserFromAccount
      parameters:
        - name: user_id
          in: path
          description: The ID of the user to remove from the account.
          required: true
          type: string
      responses:
        '204':
          description: Successful operation.
        '400':
          description: Error removing user from the account.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Authentication failure.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: A user with that ID does not exist.
          schema:
            $ref: '#/definitions/ErrorResponse'
definitions:
  AccountCreationReq:
    type: object
    required:
      - end_market
    properties:
      display_name:
        type: string
        maxLength: 100
        x-nullable: true
        example: ARM
        description: 'The display name for the tenant account.'
      company:
        type: string
        maxLength: 100
        x-nullable: true
        example: ARM Holdings Plc
        description: 'The name of the company used in billing. Required for commercial accounts only.'
      country:
        type: string
        maxLength: 100
        x-nullable: true
        example: United Kingdom
        description: 'The country part of the postal address. Required for commercial accounts only.'
      address_line1:
        type: string
        maxLength: 100
        x-nullable: true
        example: 110 Fulbourn Rd
        description: 'Postal address line 1. Required for commercial accounts only.'
      address_line2:
        type: string
        maxLength: 100
        x-nullable: true
        example: ' '
        description: 'Postal address line 2.'
      city:
        type: string
        maxLength: 100
        x-nullable: true
        example: Cambridge
        description: 'The city part of the postal address. Required for commercial accounts only.'
      state:
        x-nullable: true
        type: string
        maxLength: 100
        example: ' '
        description: 'The state part of the postal address.'
      postal_code:
        type: string
        maxLength: 100
        x-nullable: true
        example: CB1 9NJ
        description: 'The postal code part of the postal address.'
      contact:
        type: string
        maxLength: 100
        x-nullable: true
        example: J. Doe
        description: 'The name of the contact person for this account. Required for commercial accounts only.'
      email:
        type: string
        x-nullable: true
        example: info@arm.com
        description: 'The company email address for this account. Required for commercial accounts only.'
        <<: *email_pattern
      phone_number:
        type: string
        maxLength: 100
        x-nullable: true
        example: +44 (1223) 400 400
        description: 'The phone number of a representative of the company.'
      aliases:
        type: array
        maxItems: 10
        x-nullable: true
        description: 'An array of aliases for the tenant account ID. The aliases must be globally unique.'
        items:
          type: string
          pattern: '[\w\-._]{8,100}'
      end_market:
        type: string
        example: IT
        description: 'The end market of the account to create.'
      admin_name:
        type: string
        example: admin
        x-nullable: true
        description: 'The username of the admin user to create.'
        <<: *username_pattern
      admin_password:
        type: string
        x-nullable: true
        example: PZf9eEUH43DAPE9ULINFeuj
        description: 'The password when creating a new user. Generated when not present in the request.'
      admin_email:
        type: string
        x-nullable: true
        example: admin@arm.com
        description: 'The email address of the account admin'
        <<: *email_pattern
      admin_full_name:
        type: string
        maxLength: 100
        x-nullable: true
        example: Admin Doe
        description: 'The full name of the admin user to create.'
      contract_number:
        type: string
        maxLength: 100
        x-nullable: true
        example: 1NX25_0001
        description: 'Contract number of the customer.'
      customer_number:
        type: string
        maxLength: 100
        x-nullable: true
        example: 1NC25_0001
        description: 'Customer number of the customer.'
      business_model:
        $ref: '#/definitions/BusinessModel'
    description: 'Represents an account creation request.'
  AccountInfo:
    type: object
    required:
      - end_market
      - etag
      - id
      - object
      - status
      - tier
    properties:
      object:
        type: string
        description: 'Entity name: always `account`.'
        enum:
          - account
      id:
        type: string
        example: 01619571e2e90242ac12000600000000
        description: 'Account ID.'
        pattern: '[a-f0-9]{32}'
      etag:
        type: string
        example: '1'
        description: 'API resource entity version.'
      created_at:
        type: string
        format: date-time
        example: '2018-02-13T09:35:20Z'
        description: 'Creation UTC time RFC3339.'
      updated_at:
        type: string
        format: date-time
        example: '2018-02-14T15:24:14Z'
        description: 'Last update UTC time RFC3339.'
      parent_id:
        type: string
        x-nullable: true
        example: 01619571dad80242ac12000600000000
        description: 'The ID of the parent account, if any.'
        pattern: '[a-f0-9]{32}'
      display_name:
        type: string
        maxLength: 100
        x-nullable: true
        example: ARM
        description: 'The display name for the tenant account.'
      company:
        type: string
        maxLength: 100
        x-nullable: true
        example: ARM Holdings Plc
        description: 'The name of the company used in billing.'
      country:
        type: string
        maxLength: 100
        x-nullable: true
        example: United Kingdom
        description: 'The country part of the postal address.'
      address_line1:
        type: string
        maxLength: 100
        x-nullable: true
        example: 110 Fulbourn Rd
        description: 'Postal address line 1.'
      address_line2:
        type: string
        maxLength: 100
        x-nullable: true
        example: ' '
        description: 'Postal address line 2.'
      city:
        type: string
        maxLength: 100
        x-nullable: true
        example: Cambridge
        description: 'The city part of the postal address.'
      state:
        type: string
        maxLength: 100
        x-nullable: true
        example: ' '
        description: 'The state part of the postal address.'
      postal_code:
        type: string
        maxLength: 100
        x-nullable: true
        example: CB1 9NJ
        description: 'The postal code part of the postal address.'
      contact:
        type: string
        maxLength: 100
        x-nullable: true
        example: J. Doe
        description: 'The name of the contact person for this account.'
      email:
        type: string
        x-nullable: true
        example: info@arm.com
        description: 'The company email address for this account.'
        <<: *email_pattern
      phone_number:
        type: string
        maxLength: 100
        x-nullable: true
        example: +44 (1223) 400 400
        description: 'The phone number of a company representative.'
      aliases:
        type: array
        maxItems: 10
        description: 'An array of aliases for the tenant account ID. The aliases must be globally unique.'
        items:
          type: string
          pattern: '[\w\-._]{8,100}'
      tier:
        type: string
        example: '1'
        description: 'The tier level of the account; `0`: free tier, `1`: commercial account, `2`: partner tier. Other values are reserved for the future.'
      status:
        type: string
        example: ACTIVE
        description: 'The status of the account.'
        enum:
          - ENROLLING
          - ACTIVE
          - RESTRICTED
          - SUSPENDED
      upgraded_at:
        type: string
        format: date-time
        example: '2018-02-14T15:24:14Z'
        description: 'Time when upgraded to commercial account in UTC format RFC3339.'
      limits:
        type: object
        x-nullable: true
        x-deprecation:
          issued_at: "2019-08-27T12:03:58+00:00"
          end_of_life_at: "2020-08-27T12:03:58+00:00"
          comment: Replaced by the limitations parameter.
        description: 'DEPRECATED: Replaced by the limitations parameter.'
        additionalProperties:
          type: string
      policies:
        type: array
        x-nullable: true
        description: 'List of policies if requested.'
        items:
          $ref: '#/definitions/FeaturePolicy'
      template_id:
        type: string
        x-nullable: true
        example: 01619571e7160242ac12000600000000
        description: 'Account template ID.'
        pattern: '[a-f0-9]{32}'
      reason:
        type: string
        x-nullable: true
        example: Subscription paid.
        description: 'A note with the reason for account status update.'
      sub_accounts:
        type: array
        x-nullable: true
        description: 'List of sub accounts. Not available for developer users.'
        items:
          $ref: '#/definitions/AccountInfo'
      end_market:
        type: string
        example: IT
        description: 'Account end market.'
      idle_timeout:
        type: integer
        minimum: 1
        maximum: 120
        x-nullable: true
        example: '30'
        description: 'The reference token expiration time, in minutes, for this account.'
      password_policy:
        description: 'The password policy for this account.'
        x-nullable: true
        $ref: '#/definitions/PasswordPolicy'
      reference_note:
        type: string
        x-nullable: true
        example: ARM-INT-0001
        description: 'A reference note for updating the status of the account.'
      custom_fields:
        type: object
        x-nullable: true
        description: "Account's custom properties as key-value pairs."
        additionalProperties:
          type: string
      mfa_status:
        type: string
        x-nullable: true
        description: 'The enforcement status of multi-factor authentication, either `enforced` or `optional`.'
        enum:
          - enforced
          - optional
      notification_emails:
        type: array
        x-nullable: true
        description: 'A list of notification email addresses.'
        items:
          type: string
          <<: *email_pattern
      sales_contact:
        type: string
        example: sales@arm.com
        x-nullable: true
        description: 'Email address of the sales contact.'
        <<: *email_pattern
      expiration_warning_threshold:
        type: integer
        minimum: 1
        maximum: 180
        example: '180'
        x-nullable: true
        description: 'Indicates how many days (1-180) before account expiration a notification email is sent.'
      contract_number:
        type: string
        example: 1NX25_0001
        x-nullable: true
        description: 'Contract number of the customer.'
      customer_number:
        type: string
        example: 1NC25_0001
        x-nullable: true
        description: 'Customer number of the customer.'
      parent_account:
        description: 'Contact details of the parent account.'
        x-nullable: true
        $ref: '#/definitions/ParentAccountInfo'
      expiration:
        type: string
        x-nullable: true
        format: date-time
        description: 'Expiration time of the account, as UTC time RFC3339.'
      limitations:
        type: array
        description: List of account limitation objects.
        items:
          $ref: '../../api-common-definitions/iam.yaml#/definitions/AccountLimitation'
      password_recovery_expiration:
        type: integer
        format: int32
        minimum: 1
        maximum: 45
        description: 'Indicates for how many minutes a password recovery email is valid.'
      business_model:
        $ref: '#/definitions/BusinessModel'
      business_model_history:
        type: array
        description: 'Business model history for this account.'
        items:
          $ref: '#/definitions/BusinessModelHistory'
      tier_history:
        type: array
        description: 'Tier history for this account.'
        items:
          $ref: '#/definitions/TierHistory'
    description: 'Represents an account in requests and responses.'
  AccountCreationResp:
    type: object
    properties:
      object:
        type: string
        description: 'Entity name: always `account`.'
        enum:
          - account
      id:
        type: string
        example: 01619571e2e90242ac12000600000000
        description: 'Account ID.'
        pattern: '[a-f0-9]{32}'
      etag:
        type: string
        example: '1'
        description: 'API resource entity version.'
      created_at:
        type: string
        format: date-time
        example: '2018-02-13T09:35:20Z'
        description: 'Creation UTC time RFC3339.'
      updated_at:
        type: string
        format: date-time
        example: '2018-02-14T15:24:14Z'
        description: 'Last update UTC time RFC3339.'
      parent_id:
        type: string
        x-nullable: true
        example: 01619571dad80242ac12000600000000
        description: 'The ID of the parent account, if any.'
        pattern: '[a-f0-9]{32}'
      display_name:
        type: string
        maxLength: 100
        x-nullable: true
        example: ARM
        description: 'The display name for the tenant account.'
      company:
        type: string
        maxLength: 100
        x-nullable: true
        example: ARM Holdings Plc
        description: 'The name of the company used in billing.'
      country:
        type: string
        maxLength: 100
        x-nullable: true
        example: United Kingdom
        description: 'The country part of the postal address.'
      address_line1:
        type: string
        maxLength: 100
        x-nullable: true
        example: 110 Fulbourn Rd
        description: 'Postal address line 1.'
      address_line2:
        type: string
        maxLength: 100
        x-nullable: true
        example: ' '
        description: 'Postal address line 2.'
      city:
        type: string
        maxLength: 100
        x-nullable: true
        example: Cambridge
        description: 'The city part of the postal address.'
      state:
        type: string
        maxLength: 100
        x-nullable: true
        example: ' '
        description: 'The state part of the postal address.'
      postal_code:
        type: string
        maxLength: 100
        x-nullable: true
        example: CB1 9NJ
        description: 'The postal code part of the postal address.'
      contact:
        type: string
        maxLength: 100
        x-nullable: true
        example: J. Doe
        description: 'The name of the contact person for this account.'
      email:
        type: string
        x-nullable: true
        example: info@arm.com
        description: 'The company email address for this account.'
        <<: *email_pattern
      phone_number:
        type: string
        maxLength: 100
        x-nullable: true
        example: +44 (1223) 400 400
        description: 'The phone number of a company representative.'
      aliases:
        type: array
        maxItems: 10
        description: 'An array of aliases for the tenant account ID. The aliases must be globally unique.'
        items:
          type: string
          pattern: '[\w\-._]{8,100}'
      tier:
        type: string
        example: '1'
        description: 'The tier level of the account; `0`: free tier, `1`: commercial account, `2`: partner tier. Other values are reserved for the future.'
      status:
        type: string
        example: ACTIVE
        description: 'The status of the account.'
        enum:
          - ENROLLING
          - ACTIVE
          - RESTRICTED
          - SUSPENDED
      upgraded_at:
        type: string
        format: date-time
        example: '2018-02-14T15:24:14Z'
        description: 'Time when upgraded to commercial account in UTC format RFC3339.'
      limits:
        type: object
        x-nullable: true
        x-deprecation:
          issued_at: "2019-08-27T12:03:58+00:00"
          end_of_life_at: "2020-08-27T12:03:58+00:00"
          comment: Replaced by the limitations parameter.
        description: 'DEPRECATED: Replaced by the limitations parameter.'
        additionalProperties:
          type: string
      policies:
        type: array
        x-nullable: true
        description: 'List of policies if requested.'
        items:
          $ref: '#/definitions/FeaturePolicy'
      template_id:
        type: string
        x-nullable: true
        example: 01619571e7160242ac12000600000000
        description: 'Account template ID.'
        pattern: '[a-f0-9]{32}'
      reason:
        type: string
        x-nullable: true
        example: Subscription paid.
        description: 'A note with the reason for account status update.'
      sub_accounts:
        type: array
        x-nullable: true
        description: 'List of sub accounts. Not available for developer users.'
        items:
          $ref: '#/definitions/AccountInfo'
      end_market:
        type: string
        example: IT
        description: 'Account end market.'
      idle_timeout:
        type: integer
        minimum: 1
        maximum: 120
        x-nullable: true
        example: '30'
        description: 'The reference token expiration time, in minutes, for this account.'
      password_policy:
        description: 'The password policy for this account.'
        x-nullable: true
        $ref: '#/definitions/PasswordPolicy'
      reference_note:
        type: string
        x-nullable: true
        example: ARM-INT-0001
        description: 'A reference note for updating the status of the account.'
      custom_fields:
        type: object
        x-nullable: true
        description: "Account's custom properties as key-value pairs."
        additionalProperties:
          type: string
      mfa_status:
        type: string
        x-nullable: true
        description: 'The enforcement status of multi-factor authentication, either `enforced` or `optional`.'
        enum:
          - enforced
          - optional
      notification_emails:
        type: array
        x-nullable: true
        description: 'A list of notification email addresses.'
        items:
          type: string
          <<: *email_pattern
      sales_contact:
        type: string
        example: sales@arm.com
        x-nullable: true
        description: 'Email address of the sales contact.'
        <<: *email_pattern
      expiration_warning_threshold:
        type: integer
        minimum: 1
        maximum: 180
        example: '180'
        x-nullable: true
        description: 'Indicates how many days (1-180) before account expiration a notification email is sent.'
      contract_number:
        type: string
        example: 1NX25_0001
        x-nullable: true
        description: 'Contract number of the customer.'
      customer_number:
        type: string
        example: 1NC25_0001
        x-nullable: true
        description: 'Customer number of the customer.'
      parent_account:
        description: 'Contact details of the parent account.'
        x-nullable: true
        $ref: '#/definitions/ParentAccountInfo'
      expiration:
        type: string
        x-nullable: true
        format: date-time
        description: 'Expiration time of the account, as UTC time RFC3339.'
      admin_id:
        type: string
        x-nullable: true
        example: 01619571e2e89242ac12000600000000
        description: 'The ID of the admin user created for this account. Present only in the response for the account creation.'
        pattern: '[a-f0-9]{32}'
      admin_name:
        type: string
        maxLength: 100
        x-nullable: true
        example: admin
        description: 'The username of the admin user created for this account. Present only in the response for account creation.'
      admin_email:
        type: string
        x-nullable: true
        example: admin@arm.com
        description: 'The email address of the admin user created for this account. Present only in the response for account creation.'
        <<: *email_pattern
      admin_key:
        type: string
        x-nullable: true
        example: ak_1MDE2MTk1NzFmNmU4MDI0MmFjMTIwMDA2MDAwMDAwMDA01619571f7020242ac12000600000000B40IkJADMANmAscAj0Ot0n2yeQnyt9tT
        description: 'The admin API key created for this account. Present only in the response for account creation.'
        readOnly: true
        x-deprecation:
          issued_at: "2020-09-01T00:00:00+00:00"
          end_of_life_at: "2021-09-01T00:00:00+00:00"
          comment: 'This field is deprecated, do not use it anymore.'
          links: []
      admin_password:
        type: string
        x-nullable: true
        example: PZf9eEUH43DAPE9ULINFeuj
        description: 'The password of the admin user created for this account. Present only in the response for account creation.'
      admin_full_name:
        type: string
        maxLength: 100
        x-nullable: true
        example: Admin Doe
        description: 'The full name of the admin user created for this account. Present only in the response for account creation.'
      limitations:
        type: array
        description: List of account limitation objects.
        items:
          $ref: '../../api-common-definitions/iam.yaml#/definitions/AccountLimitation'
      password_recovery_expiration:
        type: integer
        format: int32
        minimum: 1
        maximum: 45
        description: 'Indicates for how many minutes a password recovery email is valid.'
      business_model:
        $ref: '#/definitions/BusinessModel'
      business_model_history:
        type: array
        description: 'Business model history for this account.'
        items:
          $ref: '#/definitions/BusinessModelHistory'
      tier_history:
        type: array
        description: 'Tier history for this account.'
        items:
          $ref: '#/definitions/TierHistory'
      is_oem:
        type: boolean
        example: false
        readOnly: true
        description: 'Flag indicating whether this is an OEM account or not.'
      oem_name:
        type: string
        maxLength: 100
        example: Acme Inc.
        readOnly: true
        description: 'OEM account name'
    description: 'Represents an account in requests and responses.'
  AccountInfoList:
    type: object
    required:
      - data
      - has_more
      - limit
      - object
      - total_count
    properties:
      object:
        type: string
        description: 'Entity name: always `list`.'
        enum:
          - list
      limit:
        type: integer
        format: int32
        example: 50
        description: 'The number of results to return (2-1000), or equal to `total_count`.'
      after:
        type: string
        example: 01619571f3c00242ac12000600000000
        description: 'The entity ID to retrieve after the given one.'
        pattern: '[a-f0-9]{32}'
      order:
        type: string
        description: 'The order of the records to return based on creation time. Available values: ASC, DESC; by default ASC.'
        enum:
          - ASC
          - DESC
      total_count:
        type: integer
        format: int32
        example: 20
        description: 'The total number of records, if requested.'
      has_more:
        type: boolean
        example: false
        description: 'Flag indicating whether there are more results.'
      data:
        type: array
        description: 'A list of entities.'
        items:
          $ref: '#/definitions/AccountInfo'
  AccountUpdateReq:
    type: object
    properties:
      display_name:
        type: string
        maxLength: 100
        x-nullable: true
        example: ARM
        description: 'The display name for the tenant account.'
      company:
        type: string
        maxLength: 100
        x-nullable: true
        example: ARM Holdings Plc
        description: 'The name of the company used in billing. Required for commercial accounts only.'
      country:
        type: string
        maxLength: 100
        x-nullable: true
        example: United Kingdom
        description: 'The country part of the postal address. Required for commercial accounts only.'
      address_line1:
        type: string
        maxLength: 100
        x-nullable: true
        example: 110 Fulbourn Rd
        description: 'Postal address line 1. Required for commercial accounts only.'
      address_line2:
        type: string
        maxLength: 100
        x-nullable: true
        example: ' '
        description: 'Postal address line 2.'
      city:
        type: string
        maxLength: 100
        x-nullable: true
        example: Cambridge
        description: 'The city part of the postal address. Required for commercial accounts only.'
      state:
        type: string
        maxLength: 100
        x-nullable: true
        example: ' '
        description: 'The state part of the postal address.'
      postal_code:
        type: string
        maxLength: 100
        x-nullable: true
        example: CB1 9NJ
        description: 'The postal code part of the postal address.'
      contact:
        type: string
        maxLength: 100
        x-nullable: true
        example: J. Doe
        description: 'The name of the contact person for this account. Required for commercial accounts only.'
      email:
        type: string
        x-nullable: true
        example: info@arm.com
        description: 'The company email address for this account. Required for commercial accounts only.'
        <<: *email_pattern
      phone_number:
        type: string
        maxLength: 100
        x-nullable: true
        example: +44 (1223) 400 400
        description: 'The phone number of a representative of the company.'
      aliases:
        type: array
        maxItems: 10
        x-nullable: true
        description: 'An array of aliases for the tenant account ID. The aliases must be globally unique.'
        items:
          type: string
          pattern: '[\w\-._]{8,100}'
      end_market:
        type: string
        maxLength: 100
        x-nullable: true
        example: IT
        description: 'The end market for this account.'
      idle_timeout:
        type: integer
        x-nullable: true
        minimum: 1
        maximum: 120
        description: 'Reference token expiration time in minutes.'
      password_policy:
        description: 'Password policy for this account.'
        x-nullable: true
        $ref: '#/definitions/PasswordPolicy'
      custom_fields:
        type: object
        maxItems: 10
        x-nullable: true
        description: "Account's custom properties as key-value pairs."
        additionalProperties:
          type: string
      mfa_status:
        type: string
        x-nullable: true
        description: 'The enforcement status of multi-factor authentication, either `enforced` or `optional`.'
        enum:
          - enforced
          - optional
      notification_emails:
        type: array
        x-nullable: true
        description: 'A list of notification email addresses.'
        items:
          type: string
          <<: *email_pattern
      expiration_warning_threshold:
        type: integer
        x-nullable: true
        minimum: 1
        maximum: 180
        description: 'Indicates how many days before account expiration a notification email is sent.'
      password_recovery_expiration:
        type: integer
        x-nullable: true
        format: int32
        minimum: 1
        maximum: 45
        description: 'Indicates for how many minutes a password recovery email is valid.'
    description: 'Represents an account creation request.'
  AccountUpdateRootReq:
    type: object
    properties:
      display_name:
        type: string
        maxLength: 100
        x-nullable: true
        example: ARM
        description: 'The display name for the tenant account.'
      company:
        type: string
        maxLength: 100
        x-nullable: true
        example: ARM Holdings Plc
        description: 'The name of the company used in billing. Required for commercial accounts only.'
      country:
        type: string
        maxLength: 100
        x-nullable: true
        example: United Kingdom
        description: 'The country part of the postal address. Required for commercial accounts only.'
      address_line1:
        type: string
        maxLength: 100
        x-nullable: true
        example: 110 Fulbourn Rd
        description: 'Postal address line 1. Required for commercial accounts only.'
      address_line2:
        type: string
        maxLength: 100
        x-nullable: true
        example: ' '
        description: 'Postal address line 2.'
      city:
        type: string
        maxLength: 100
        x-nullable: true
        example: Cambridge
        description: 'The city part of the postal address. Required for commercial accounts only.'
      state:
        type: string
        maxLength: 100
        x-nullable: true
        example: ' '
        description: 'The state part of the postal address.'
      postal_code:
        type: string
        maxLength: 100
        x-nullable: true
        example: CB1 9NJ
        description: 'The postal code part of the postal address.'
      contact:
        type: string
        maxLength: 100
        x-nullable: true
        example: J. Doe
        description: 'The name of the contact person for this account. Required for commercial accounts only.'
      email:
        type: string
        x-nullable: true
        example: info@arm.com
        description: 'The company email address for this account. Required for commercial accounts only.'
        <<: *email_pattern
      phone_number:
        type: string
        maxLength: 100
        x-nullable: true
        example: +44 (1223) 400 400
        description: 'The phone number of a representative of the company.'
      aliases:
        type: array
        maxItems: 10
        x-nullable: true
        description: 'An array of aliases for the tenant account ID. The aliases must be globally unique.'
        items:
          type: string
          pattern: '[\w\-._]{8,100}'
      end_market:
        type: string
        maxLength: 100
        x-nullable: true
        example: IT
        description: 'The end market for this account.'
      idle_timeout:
        type: integer
        minimum: 1
        maximum: 120
        x-nullable: true
        description: 'The reference token expiration time in minutes for this account. Between 1 and 120 minutes.'
      password_policy:
        description: 'Password policy for this account.'
        x-nullable: true
        $ref: '#/definitions/PasswordPolicy'
      custom_fields:
        type: object
        maxItems: 10
        x-nullable: true
        description: "Account's custom properties as key-value pairs."
        additionalProperties:
          type: string
      mfa_status:
        type: string
        x-nullable: true
        description: "The enforcement status of setting up the multi-factor authentication. 'Enforced' means that setting up the MFA is required after login. 'Optional' means that the MFA is not required."
        enum:
          - enforced
          - optional
      notification_emails:
        type: array
        x-nullable: true
        description: 'A list of notification email addresses.'
        items:
          type: string
          <<: *email_pattern
      sales_contact:
        type: string
        x-nullable: true
        description: 'Email address of the sales contact.'
        <<: *email_pattern
      expiration_warning_threshold:
        type: integer
        minimum: 1
        maximum: 180
        x-nullable: true
        description: 'Indicates how many days before account expiration a notification email is sent.'
      contract_number:
        type: string
        x-nullable: true
        description: 'Contract number of the customer. An administrator can set this property on tenant accounts only.'
      customer_number:
        type: string
        x-nullable: true
        description: 'Customer number of the customer. An administrator can set this property on tenant accounts only.'
      password_recovery_expiration:
        type: integer
        x-nullable: true
        format: int32
        minimum: 1
        maximum: 45
        description: 'Indicates for how many minutes a password recovery email is valid.'
      business_model:
        $ref: '#/definitions/BusinessModel'
    description: 'Represents an account update request.'
  ActiveSession:
    type: object
    required:
      - account_id
      - ip_address
      - login_time
      - object
      - reference_token
      - user_agent
    properties:
      account_id:
        type: string
        example: 01619571e2e90242ac12000600000000
        description: 'The UUID of the account.'
        pattern: '[a-f0-9]{32}'
      object:
        type: string
        description: 'Entity name: always ''user-session'''
        enum:
          - user-session
      ip_address:
        type: string
        example: 127.0.0.1
        description: 'IP address of the client.'
      login_time:
        type: string
        format: date-time
        example: '2018-02-14T17:52:07Z'
        description: 'The login time of the user.'
      user_agent:
        type: string
        example: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36'
        description: 'User Agent header from the login request.'
      reference_token:
        type: string
        example: rt_CI6+5hS8p9DrCmkRyS6u4doUdiXr71dX7MqD+g0327hYQthEkYTxMMnCwHyf1rDdk
        description: 'The reference token.'
      created_at:
        type: string
        format: date-time
        example: '2018-02-13T09:35:20Z'
        description: 'Creation UTC time RFC3339.'
    description: 'Represents an active user session.'
  ApiKeyInfoReq:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        maxLength: 100
        description: 'The display name for the API key.'
      owner:
        type: string
        description: 'The owner of this API key. Only an administrator can set the owner of an API key.'
      groups:
        type: array
        description: |-
          A list of group IDs this API key belongs to.
          Adding an API key to the 'Administrators' group is restricted to administrators.
        items:
          type: string
      status:
        type: string
        description: 'The status of the API key. Only an administrator can set the status of an API key.'
        enum:
          - ACTIVE
          - INACTIVE
    description: 'Represents an API key in requests towards Device Management.'
  ApiKeyInfoResp:
    type: object
    required:
      - etag
      - id
      - key
      - name
      - object
    properties:
      object:
        type: string
        description: 'Entity name: always ''api-key'''
        enum:
          - api-key
      id:
        type: string
        example: 01619571f7020242ac12000600000000
        description: 'The ID of the API key.'
        pattern: '[a-f0-9]{32}'
      etag:
        type: string
        example: '1'
        description: 'API resource entity version.'
      created_at:
        type: string
        format: date-time
        example: '2018-02-13T09:35:20Z'
        description: 'Creation UTC time RFC3339.'
      updated_at:
        type: string
        format: date-time
        example: '2018-02-14T15:24:14Z'
        description: 'Last update UTC time RFC3339.'
      key:
        type: string
        example: ak_1MDE2MTk1NzFmNmU4MDI0MmFjMTIwMDA2MDAwMDAwMDA01619571f7020242ac12000600000000
        description: 'The API key.'
      name:
        type: string
        maxLength: 100
        example: API key gorgon
        description: 'The display name for the API key.'
      groups:
        type: array
        description: 'A list of group IDs this API key belongs to.'
        items:
          type: string
      owner:
        type: string
        example: 01619571e2e89242ac12000600000000
        description: 'The owner of this API key, who is the creator by default.'
        pattern: '[a-f0-9]{32}'
      status:
        type: string
        example: ACTIVE
        description: 'The status of the API key.'
        enum:
          - ACTIVE
          - INACTIVE
      creation_time:
        type: integer
        format: int64
        example: 1518630727683
        description: 'The timestamp of the API key creation in the storage, in milliseconds.'
      last_login_time:
        type: integer
        format: int64
        example: 1518630727688
        description: 'The timestamp of the latest API key usage, in milliseconds.'
      account_id:
        type: string
        example: 01619571e2e90242ac12000600000000
        description: 'The ID of the account.'
        pattern: '[a-f0-9]{32}'
    description: 'Represents an API key in Device Management.'
  ApiKeyInfoRespList:
    type: object
    required:
      - data
      - has_more
      - limit
      - object
      - total_count
    properties:
      object:
        type: string
        description: 'Entity name: always `list`.'
        enum:
          - list
      limit:
        type: integer
        format: int32
        example: 50
        description: 'The number of results to return, or equal to `total_count`.'
      after:
        type: string
        example: 01619571f3c00242ac12000600000000
        description: 'The entity ID to retrieve after the given one.'
        pattern: '[a-f0-9]{32}'
      order:
        type: string
        description: 'The order of the records to return based on creation time. Available values: ASC, DESC; by default ASC.'
        enum:
          - ASC
          - DESC
      total_count:
        type: integer
        format: int32
        example: 20
        description: 'The total number of records, if requested.'
      has_more:
        type: boolean
        example: false
        description: 'Flag indicating whether there are more results.'
      data:
        type: array
        description: 'A list of entities.'
        items:
          $ref: '#/definitions/ApiKeyInfoResp'
  ApiKeyUpdateReq:
    type: object
    properties:
      name:
        type: string
        maxLength: 100
        description: 'The display name for the API key.'
      owner:
        type: string
        description: 'The owner of this API key. Only an administrator can update the owner of an API key.'
      groups:
        type: array
        description: 'A list of group IDs this API key belongs to. Only an administrator can update the group membership of an API key.'
        items:
          type: string
      status:
        type: string
        description: 'The status of the API key. Only the owner of the API key or an administrator can update the status of an API key.'
        enum:
          - ACTIVE
          - INACTIVE
    description: 'Represents an API key in requests towards Device Management.'
  BrandingColor:
    type: object
    properties:
      color:
        type: string
        example: '#f3f93e'
        description: 'The color given as name (purple) or as a hex code.'
        x-nullable: true
      object:
        type: string
        description: 'Entity name: always ''branding_color'''
        readOnly: true
        enum:
          - branding_color
      reference:
        type: string
        description: 'Color name.'
        <<: *branding_colors
      updated_at:
        type: string
        format: date-time
        example: '2018-02-14T15:24:14Z'
        description: 'Last update time in UTC.'
        readOnly: true
  BrandingColorUpdate:
    type: object
    required:
      - reference
    properties:
      color:
        type: string
        example: '#f3f93e'
        description: 'The color given as name (purple) or as a hex code.'
        x-nullable: true
      reference:
        type: string
        description: 'Color name.'
        <<: *branding_colors
  BrandingColorList:
    type: object
    required:
      - data
      - has_more
      - limit
      - object
      - total_count
    properties:
      object:
        type: string
        description: 'Entity name: always `list`.'
        enum:
          - list
      limit:
        type: integer
        format: int32
        example: 50
        description: 'The number of results to return, or equal to `total_count`.'
      after:
        type: string
        example: 01619571f3c00242ac12000600000000
        description: 'The entity ID to retrieve after the given one.'
        pattern: '[a-f0-9]{32}'
      order:
        type: string
        description: 'The order of the records to return based on creation time. Available values: ASC, DESC; by default ASC.'
        enum:
          - ASC
          - DESC
      total_count:
        type: integer
        format: int32
        example: 20
        description: 'The total number of records, if requested.'
      has_more:
        type: boolean
        example: false
        description: 'Flag indicating whether there are more results.'
      data:
        type: array
        description: 'A list of entities.'
        items:
          $ref: '#/definitions/BrandingColor'
  BrandingImage:
    type: object
    properties:
      static_uri:
        type: string
        format: uri
        example: 'https://static.mbed.com/123456789.jpg'
        description: 'The static link to the image.'
        readOnly: true
      object:
        type: string
        description: 'Entity name: always ''branding_image'''
        readOnly: true
        enum:
          - branding_image
      reference:
        type: string
        description: 'Name of the image.'
        <<: *branding_images
      updated_at:
        type: string
        format: date-time
        example: '2018-02-14T15:24:14Z'
        description: 'Last update time in UTC.'
        readOnly: true
  BrandingImageList:
    type: object
    required:
      - data
      - has_more
      - limit
      - object
      - total_count
    properties:
      object:
        type: string
        description: 'Entity name: always `list`.'
        enum:
          - list
      limit:
        type: integer
        format: int32
        example: 50
        description: 'The number of results to return, or equal to `total_count`.'
      after:
        type: string
        example: 01619571f3c00242ac12000600000000
        description: 'The entity ID to retrieve after the given one.'
        pattern: '[a-f0-9]{32}'
      order:
        type: string
        description: 'The order of the records to return based on creation time. Available values: ASC, DESC; by default ASC.'
        enum:
          - ASC
          - DESC
      total_count:
        type: integer
        format: int32
        example: 20
        description: 'The total number of records, if requested.'
      has_more:
        type: boolean
        example: false
        description: 'Flag indicating whether there are more results.'
      data:
        type: array
        description: 'A list of entities.'
        items:
          $ref: '#/definitions/BrandingImage'
  BusinessModel:
    type: string
    default: active_device_business_model
    example: api_calls_1_business_model
    description: 'Business model for this account. Manageable by the root admin only.'
    enum:
      - active_device_business_model
      - api_calls_1_business_model
  BusinessModelHistory:
    type: object
    properties:
      business_model:
        $ref: '#/definitions/BusinessModel'
      updated_at:
        type: string
        format: date-time
        example: '2018-02-14T15:24:14Z'
        description: 'Last update UTC time RFC3339.'
  TierHistory:
    type: object
    properties:
      tier:
        type: string
        example: '1'
        description: 'The tier level of the account; `0`: free tier, `1`: commercial account, `2`: partner tier. Other values are reserved for the future.'
      updatedAt:
        type: string
        format: date-time
        example: '2018-02-14T15:24:14Z'
        description: 'Last update UTC time RFC3339.'
  CertificateGenerationReq:
    type: object
    properties:
      algorithm:
        type: string
        description: 'The algorithm and its key size used for generating the certificate. Defaults to RSA2048.'
        enum:
          - RSA2048
          - RSA3072
          - EC224
          - EC256
          - EC384
          - EC521
          - ECDSA224
          - ECDSA256
          - ECDSA384
          - ECDSA521
      validity:
        type: integer
        format: int32
        description: 'Validity for the certificate in days.'
    description: 'Generate a new service provider certificate.'
  ErrorResponse:
    type: object
    required:
      - code
      - message
      - object
      - request_id
      - type
    properties:
      object:
        type: string
        description: 'Entity name, always ''error''.'
        enum:
          - error
      code:
        type: integer
        format: int32
        example: 400
        description: 'Response code.'
      type:
        type: string
        example: validation_error
        description: 'Error type.'
        enum:
          - success
          - created
          - accepted
          - permanently_deleted
          - validation_error
          - invalid_token
          - invalid_apikey
          - reauth_required
          - access_denied
          - account_limit_exceeded
          - not_found
          - method_not_supported
          - not_acceptable
          - duplicate
          - precondition_failed
          - unsupported_media_type
          - rate_limit_exceeded
          - internal_server_error
          - system_unavailable
      message:
        type: string
        example: Validation error
        description: 'A human readable message with detailed info.'
      request_id:
        type: string
        example: 0161991d63150242ac12000600000000
        description: 'Request ID.'
        pattern: '[a-f0-9]{32}'
      fields:
        type: array
        description: 'Failed input fields during request object validation.'
        items:
          $ref: '#/definitions/Field'
    description: 'Represents an error message.'
  FeaturePolicy:
    type: object
    properties:
      resource:
        type: string
        example: /v3/update-campaign
        description: 'Resource that is protected by this policy.'
      action:
        type: string
        example: GET
        description: 'Comma-separated list of actions, empty string represents all actions.'
      allow:
        type: boolean
        example: true
        description: 'True or false controlling whether an action is allowed or not.'
      feature:
        type: string
        example: update-campaigns
        description: 'Feature name corresponding to this policy.'
      inherited:
        type: boolean
        example: false
        description: 'Flag indicating whether this feature is inherited or overwritten specifically.'
        readOnly: true
      inherited_from:
        type: string
        example: 016ada3ec2d46665bf66e32e00000000
        description: 'An ID indicating where this policy is inherited from.'
        pattern: '[a-f0-9]{32}'
        readOnly: true
      inherited_type:
        type: string
        example: account
        description: 'Indicates the type of entity this policy is inherited from.'
        readOnly: true
        enum:
          - account
          - template
          - tier_template
    description: 'Represents a feature policy. Either the feature or the resource must be specified.'
  Field:
    type: object
    required:
      - message
      - name
    properties:
      name:
        type: string
        description: 'Name of the erroneous field.'
      message:
        type: string
        description: 'Message describing the erroneous situation.'
  GroupCreationInfo:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        maxLength: 100
        description: 'The group name.'
      members:
        description: 'The members of the group as arrays of user and API key IDs.'
        $ref: '#/definitions/SubjectList'
    description: 'This object is used when creating new groups.'
  GroupSummary:
    type: object
    required:
      - account_id
      - apikey_count
      - etag
      - id
      - name
      - object
      - user_count
    properties:
      object:
        type: string
        description: 'Entity name: always `group`.'
        enum:
          - group
      id:
        type: string
        example: 01619571dec00242ac12000600000000
        description: 'The ID of the group.'
        pattern: '[a-f0-9]{32}'
      etag:
        type: string
        example: '1'
        description: 'API resource entity version.'
      created_at:
        type: string
        format: date-time
        example: '2018-02-13T09:35:20Z'
        description: 'Creation UTC time RFC3339.'
      updated_at:
        type: string
        format: date-time
        example: '2018-02-14T15:24:14Z'
        description: 'Last update UTC time RFC3339.'
      account_id:
        type: string
        example: 01619571e2e90242ac12000600000000
        description: 'The ID of the account this group belongs to.'
        pattern: '[a-f0-9]{32}'
      name:
        type: string
        maxLength: 100
        example: Administrators
        description: 'The name of the group.'
      user_count:
        type: integer
        format: int32
        example: 1
        description: 'The number of users in this group.'
      application_count:
        type: integer
        format: int32
        example: 0
        description: 'The number of applications in this group.'
      apikey_count:
        type: integer
        format: int32
        example: 0
        description: 'The number of API keys in this group.'
        x-deprecation:
          issued_at: "2020-08-01T00:00:00+00:00"
          end_of_life_at: "2021-08-01T00:00:00+00:00"
          comment: This property is deprecated. See 'application_count' property.
          links: []
    description: 'This object contains basic information about groups.'
  GroupSummaryList:
    type: object
    required:
      - data
      - has_more
      - limit
      - object
      - total_count
    properties:
      object:
        type: string
        description: 'Entity name: always `list`.'
        enum:
          - list
      limit:
        type: integer
        format: int32
        example: 50
        description: 'The number of results to return (2-1000), or equal to `total_count`.'
      after:
        type: string
        example: 01619571f3c00242ac12000600000000
        description: 'The entity ID to retrieve after the given one.'
        pattern: '[a-f0-9]{32}'
      order:
        type: string
        description: 'The order of the records to return based on creation time. Available values: ASC, DESC; by default ASC.'
        enum:
          - ASC
          - DESC
      total_count:
        type: integer
        format: int32
        example: 20
        description: 'The total number of records, if requested.'
      has_more:
        type: boolean
        example: false
        description: 'Flag indicating whether there are more results.'
      data:
        type: array
        description: 'A list of entities.'
        items:
          $ref: '#/definitions/GroupSummary'
  GroupUpdateInfo:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        maxLength: 100
        description: 'The group name.'
    description: 'This object is used when Update groups.'
  IdentityProviderCreationReq:
    type: object
    required:
      - name
      - type
    properties:
      type:
        type: string
        description: 'Identity provider type.'
        enum:
          - SAML2
          - OIDC
      name:
        type: string
        maxLength: 100
        description: 'Name of the identity provider.'
      description:
        type: string
        maxLength: 500
        description: 'Description for the identity provider.'
      status:
        type: string
        description: 'Status of the identity provider.'
        enum:
          - ACTIVE
          - SUSPENDED
      saml2_attributes:
        description: 'SAML2 specific attributes.'
        $ref: '#/definitions/SAML2Req'
      oidc_attributes:
        description: 'OIDC specific attributes.'
        $ref: '#/definitions/OIDCInfo'
    description: 'This object is used for creating new federated identity provider module.'
  IdentityProviderInfo:
    type: object
    required:
      - etag
      - id
      - name
      - object
      - type
    properties:
      object:
        type: string
        description: 'Entity name: always ''identity-provider'''
        enum:
          - identity-provider
      id:
        type: string
        example: 01619571d01d0242ac12000600000000
        description: 'Entity ID.'
        pattern: '[a-f0-9]{32}'
      etag:
        type: string
        example: '1'
        description: 'API resource entity version.'
      created_at:
        type: string
        format: date-time
        example: '2018-02-13T09:35:20Z'
        description: 'Creation UTC time RFC3339.'
      updated_at:
        type: string
        format: date-time
        example: '2018-02-14T15:24:14Z'
        description: 'Last update UTC time RFC3339.'
      type:
        type: string
        description: 'Identity provider type.'
        enum:
          - NATIVE
          - MBED
          - SAML2
          - OIDC
      name:
        type: string
        maxLength: 100
        description: 'Name of the identity provider.'
      description:
        type: string
        maxLength: 500
        description: 'Description for the identity provider.'
      status:
        type: string
        description: 'Status of the identity provider.'
        enum:
          - ACTIVE
          - SUSPENDED
      saml2_attributes:
        description: 'SAML2 specific attributes.'
        $ref: '#/definitions/SAML2Info'
      oidc_attributes:
        description: 'OIDC specific attributes.'
        $ref: '#/definitions/OIDCInfo'
      account_id:
        type: string
        example: 01619571e2e90242ac12000600000000
        description: 'The ID of the account the identity provider belongs to.'
        pattern: '[a-f0-9]{32}'
      is_default:
        type: boolean
        description: Flag indicating whether this is the global default identity provider.
        readOnly: true
  IdentityProviderList:
    type: object
    required:
      - data
      - has_more
      - limit
      - object
      - total_count
    properties:
      object:
        type: string
        description: 'Entity name: always `list`.'
        enum:
          - list
      limit:
        type: integer
        format: int32
        example: 50
        description: 'The number of results to return , or equal to `total_count`.'
      after:
        type: string
        example: 01619571f3c00242ac12000600000000
        description: 'The entity ID to retrieve after the given one.'
        pattern: '[a-f0-9]{32}'
      order:
        type: string
        description: 'The order of the records to return based on creation time. Available values: ASC, DESC; by default ASC.'
        enum:
          - ASC
          - DESC
      total_count:
        type: integer
        format: int32
        example: 20
        description: 'The total number of records, if requested.'
      has_more:
        type: boolean
        example: false
        description: 'Flag indicating whether there are more results.'
      data:
        type: array
        description: 'A list of entities.'
        items:
          $ref: '#/definitions/IdentityProviderInfo'
  IdentityProviderUpdateReq:
    type: object
    required:
      - name
      - type
    properties:
      type:
        type: string
        description: 'Identity provider type.'
        enum:
          - SAML2
          - OIDC
      name:
        type: string
        maxLength: 100
        description: 'Name of the identity provider.'
      description:
        type: string
        maxLength: 500
        description: 'Description for the identity provider.'
      status:
        type: string
        description: 'Status of the identity provider.'
        enum:
          - ACTIVE
          - SUSPENDED
      saml2_attributes:
        description: 'SAML2 specific attributes.'
        $ref: '#/definitions/SAML2Req'
      oidc_attributes:
        description: 'OIDC specific attributes.'
        $ref: '#/definitions/OIDCInfo'
    description: 'Update existing federated identity provider module.'
  Image:
    type: string
    format: binary
  LoginHistory:
    type: object
    required:
      - date
      - ip_address
      - success
      - user_agent
    properties:
      date:
        type: string
        format: date-time
        example: '2018-02-14T17:52:07Z'
        description: 'UTC time RFC3339 for this login attempt.'
      success:
        type: boolean
        example: true
        description: 'Flag indicating whether login attempt was successful or not.'
      ip_address:
        type: string
        example: 127.0.0.1
        description: 'IP address of the client.'
      user_agent:
        type: string
        example: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36'
        description: 'User Agent header from the login request.'
    description: 'Represents an entry in login history.'
  NotificationEntry:
    type: object
    required:
      - etag
      - id
      - object
    properties:
      object:
        type: string
        description: 'Entity name: always ''notification-entry'''
        enum:
          - notification-entry
      id:
        type: string
        example: 01619571d01d0242ac12000600000000
        description: 'Entity ID.'
        pattern: '[a-f0-9]{32}'
      etag:
        type: string
        example: '1'
        description: 'API resource entity version.'
      created_at:
        type: string
        format: date-time
        example: '2018-02-13T09:35:20Z'
        description: 'Creation UTC time RFC3339.'
      account_id:
        type: string
        example: 01619571e2e90242ac12000600000000
        description: 'The ID of the account.'
        pattern: '[a-f0-9]{32}'
      message:
        type: string
        example: User limit has been reached.
        description: 'The message contained in this account notification entry.'
      type:
        type: string
        example: email
        description: 'The type of this account notification entry.'
      subject:
        type: string
        example: Account locked.
        description: 'The subject of this account notification entry.'
      receiver:
        type: string
        example: example@email-receiver.test
        description: 'The receiver this account notification entry.'
        <<: *email_pattern
      success:
        type: boolean
        description: 'A flag indiciating whether the sending of this account notification entry was successful, true or false.'
      error_msg:
        type: string
        example: Connection error.
        description: 'The error message if there was an error while transmitting the account notification.'
    description: 'Represents an account notification entry.'
  NotificationEntryList:
    type: object
    required:
      - data
      - has_more
      - limit
      - object
      - total_count
    properties:
      object:
        type: string
        description: 'Entity name: always `list`.'
        enum:
          - list
      limit:
        type: integer
        format: int32
        example: 50
        description: 'The number of results to return, or equal to `total_count`.'
      after:
        type: string
        example: 01619571f3c00242ac12000600000000
        description: 'The entity ID to retrieve after the given one.'
        pattern: '[a-f0-9]{32}'
      order:
        type: string
        description: 'The order of the records to return based on creation time. Available values: ASC, DESC; by default ASC.'
        enum:
          - ASC
          - DESC
      total_count:
        type: integer
        format: int32
        example: 20
        description: 'The total number of records, if requested.'
      has_more:
        type: boolean
        example: false
        description: 'Flag indicating whether there are more results.'
      data:
        type: array
        description: 'A list of entities.'
        items:
          $ref: '#/definitions/NotificationEntry'
  ParentAccountInfo:
    type: object
    properties:
      id:
        type: string
        example: 01619571dad80242ac12000600000000
        description: 'The ID of the parent account.'
        pattern: '[a-f0-9]{32}'
      admin_name:
        type: string
        maxLength: 100
        example: J. Doe
        description: 'The name of the admin user who is the contact person of the parent account.'
      admin_email:
        type: string
        example: info@arm.com
        description: 'The email address of the admin user who is the contact person of the parent account.'
        <<: *email_pattern
    description: 'Represents parent account contact details in responses.'
  PasswordPolicy:
    type: object
    required:
      - minimum_length
    properties:
      minimum_length:
        type: integer
        minimum: 8
        maximum: 512
        example: '8'
        description: 'Minimum length for the password.'
  SAML2Info:
    type: object
    properties:
      sso_endpoint:
        type: string
        description: "URL of the identity provider's SSO endpoint."
        x-nullable: true
      slo_endpoint:
        type: string
        description: "URL of the identity provider's SLO endpoint."
        x-nullable: true
      assertion_endpoint:
        type: string
        description: "URL of the service provider's assertion endpoint. Leave this empty to use the default assertion endpoint."
        x-nullable: true
      idp_entity_id:
        type: string
        description: 'Entity ID of the identity provider.'
        x-nullable: true
      sp_entity_id:
        type: string
        description: 'Entity ID of the service provider.'
        x-nullable: true
      idp_x509_certs:
        type: array
        description: 'List of public X509 certificates of the identity provider in PEM format.'
        items:
          type: string
        x-nullable: true
      sp_x509_cert:
        type: string
        description: 'Public X509 certificate of the service provider in PEM format. This is a read-only attribute, see API documentation about how to generate a new one or how to delete it.'
        readOnly: true
        x-nullable: true
      auto_enrollment:
        type: boolean
        description: 'Flag indicating whether the identity provider supports auto enrollment on login. When disabled the users must be invited by an administrator.'
        x-nullable: true
    description: 'Represents SAML2 specific attributes in responses.'
  SAML2Req:
    type: object
    properties:
      sso_endpoint:
        type: string
        description: "URL of the identity provider's SSO endpoint."
      slo_endpoint:
        type: string
        description: "URL of the identity provider's SLO endpoint."
      idp_entity_id:
        type: string
        description: 'Entity ID of the identity provider.'
      idp_x509_certs:
        type: array
        description: 'List of public X509 certificates of the identity provider. Certificates must be in PEM format.'
        items:
          type: string
      entity_descriptor:
        type: string
        format: byte
        maxLength: 65535
        description: "Contains an entity descriptor document for the identity provider. Can be used as an alternative method to provide the identity provider's attributes."
      sp_entity_id:
        type: string
        description: 'Entity ID of the service provider. We recommend that you leave it empty and let the system generate it.'
      auto_enrollment:
        type: boolean
        description: 'Enable to allow users to be enrolled automatically to the organization. When disabled the users must be invited by an administrator.'
        x-nullable: true
  SubjectList:
    type: object
    properties:
      users:
        type: array
        description: 'An array of user IDs.'
        items:
          type: string
      applications:
        type: array
        description: 'An array of applicationIDs.'
        items:
          type: string
      apikeys:
        type: array
        description: 'An array of API key IDs.'
        items:
          type: string
        x-deprecation:
          issued_at: "2020-08-01T00:00:00+00:00"
          end_of_life_at: "2021-08-01T00:00:00+00:00"
          comment: This field is deprecated, use 'applications'
          links: []
    description: 'Represents arrays of user and API key IDs.'
  OIDCInfo:
    type: object
    required:
      - issuer
    properties:
      issuer:
        type: string
        description: 'Issuer of the identity provider.'
      client_id:
        type: string
        description: "Client ID needed to authenticate and gain access to identity provider's API."
        x-nullable: true
      client_secret:
        type: string
        description: "Client secret needed to authenticate and gain access to identity provider's API."
        x-nullable: true
      use_pkce:
        type: boolean
        description: 'Enable or disable Proof Key for Code Exchange during OIDC flow.'
        x-nullable: true
      redirect_uri:
        type: string
        description: "The URI needed to authenticate and gain access to identity provider's API. Leave this empty to use the default redirect URI."
        x-nullable: true
      logout_redirect_uri:
        type: string
        description: "The URI to redirect the browser after the logout is performed on the federated identity provider. Leave this empty to use the default logout redirect URI."
        x-nullable: true
      authorization_endpoint:
        type: string
        description: "URL of the OAuth 2.0 authorization endpoint."
        x-nullable: true
      token_endpoint:
        type: string
        description: 'URL of the OAuth 2.0 authorization endpoint.'
        x-nullable: true
      userinfo_endpoint:
        type: string
        description: 'URL of the OAuth 2.0 UserInfo endpoint.'
        x-nullable: true
      revocation_endpoint:
        type: string
        description: "URL of the provider's token revocation endpoint."
        x-nullable: true
      end_session_endpoint:
        type: string
        description: "URL of the provider's end session endpoint."
        x-nullable: true
      jwks_uri:
        type: string
        description: "URL of the provider's JSON web key set document."
        x-nullable: true
      auto_enrollment:
        type: boolean
        description: 'Enable to allow users to be enrolled automatically to the organization. When disabled the users must be invited by an administrator.'
        x-nullable: true
      keys:
        type: array
        description: "Provider's public keys and key IDs used to sign ID tokens. PEM-encoded."
        items:
          $ref: '#/definitions/IdpPublicKey'
        x-nullable: true
      claim_mapping:
        description: Mapping table for supporting custom OIDC claims.
        $ref: '#/definitions/OIDCClaimMapping'
        x-nullable: true
      token_request_mode:
        type: string
        enum:
          - POST
          - GET
        default: POST
        description: "One way to obtain the access token. Since the request results in the transmission of clear-text credentials, the client must use the POST mode."
      token_response_path:
        type: string
        description: "Path to the standard data in the token response. Levels in the JSON structure must be separated by '.' (dot) characters."
        example: "oidc.data"
      scopes:
        type: string
        description: "Space-separated list of scopes sent in the authentication request. When not configured otherwise, the default scopes are ['openid profile email'](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)."
        example: "openid email"
    description: 'Represents OIDC specific attributes.'
  OIDCClaimMapping:
    description: 'Mapping for non-standard OIDC claim names.'
    type: object
    properties:
      sub:
        type: string
        description: Custom claim name for 'sub'.
        example: sub
        x-nullable: true
      email:
        type: string
        description: Custom claim name for 'email'.
        example: email_address
        x-nullable: true
      email_verified:
        type: string
        description: Custom claim name for 'email_verified'.
        example: email_verified
        x-nullable: true
      name:
        type: string
        description: Custom claim name for 'name'.
        example: name
        x-nullable: true
      given_name:
        type: string
        description: Custom claim name for 'given_name'.
        example: given_name
        x-nullable: true
      family_name:
        type: string
        description: Custom claim name for 'family_name'.
        example: family_name
        x-nullable: true
      phone_number:
        type: string
        description: Custom claim name for 'phone_number'.
        example: phone_number
        x-nullable: true
      updated_at:
        type: string
        description: Custom claim name for 'updated_at'.
        example: updated_at
        x-nullable: true
      updated_at_pattern:
        type: string
        description: Custom pattern for claim 'updated_at' as defined by the Java SimpleDateFormat class.
        example: yyyy-MM-dd'T'HH:mm:ssXXX
        x-nullable: true
  IdpPublicKey:
    type: object
    properties:
      key:
        type: string
        description: 'The public key.'
      kid:
        type: string
        description: 'The public key ID.'
    description: "Represents provider's public key and key ID used to sign ID tokens. PEM-encoded."
  TrustedCertificateReq:
    type: object
    required:
      - certificate
      - name
      - service
    properties:
      name:
        type: string
        maxLength: 100
        description: 'Certificate name.'
      description:
        type: string
        maxLength: 500
        x-nullable: true
        description: 'Human readable description of this certificate.'
      certificate:
        type: string
        description: 'A chain of X509.v3 trusted certificates in PEM format. The chain must contain all certificates from root to leaf.'
      service:
        type: string
        description: 'Service name where the certificate must be used.'
        enum:
          - lwm2m
          - bootstrap
      status:
        type: string
        description: 'Status of the certificate.'
        enum:
          - ACTIVE
          - INACTIVE
      signature:
        type: string
        description: 'DEPRECATED: Base64 encoded signature of the account ID signed by the certificate to upload. The signature must be hashed with SHA256.'
      enrollment_mode:
        type: boolean
        description: 'DEPRECATED: Certificate is used in enrollment mode. Default value is false.'
        x-deprecation:
          issued_at: "2020-11-01T00:00:00+00:00"
          end_of_life_at: "2021-11-01T00:00:00+00:00"
          comment: 'This field is deprecated, do not use it anymore.'
          links: []
    description: 'Represents a trusted certificate in upload requests.'
  TrustedCertificateResp:
    type: object
    required:
      - account_id
      - certificate
      - certificate_fingerprint
      - etag
      - id
      - issuer
      - name
      - object
      - service
      - subject
      - validity
    properties:
      object:
        type: string
        description: 'Entity name: always ''trusted-cert'''
        enum:
          - trusted-cert
      id:
        type: string
        example: 01619571d01d0242ac12000600000000
        description: 'Entity ID.'
        pattern: '[a-f0-9]{32}'
      etag:
        type: string
        example: '1'
        description: 'API resource entity version.'
      created_at:
        type: string
        format: date-time
        example: '2018-02-13T09:35:20Z'
        description: 'Creation UTC time RFC3339.'
      updated_at:
        type: string
        format: date-time
        example: '2018-02-14T15:24:14Z'
        description: 'Last update UTC time RFC3339.'
      name:
        type: string
        maxLength: 100
        example: My certificate
        description: 'Certificate name.'
      description:
        type: string
        maxLength: 500
        x-nullable: true
        example: Certificate created by me.
        description: 'Human readable description of this certificate.'
      account_id:
        type: string
        example: 01619571e2e90242ac12000600000000
        description: 'The ID of the account.'
        pattern: '[a-f0-9]{32}'
      owner_id:
        x-nullable: true
        type: string
        example: 01619571dad80242ac12000600000000
        description: 'The ID of the owner.'
        pattern: '[a-f0-9]{32}'
      certificate:
        type: string
        example: '-----BEGIN CERTIFICATE----- ... -----END CERTIFICATE-----'
        description: 'X509.v3 trusted certificate in PEM format.'
      service:
        type: string
        description: 'Service name where the certificate is used.'
        enum:
          - lwm2m
          - bootstrap
      issuer:
        type: string
        example: CN=issuer
        description: 'Issuer of the certificate.'
      subject:
        type: string
        example: CN=subject
        description: 'Subject of the certificate.'
      validity:
        type: string
        format: date-time
        example: '2038-02-14T15:24:14Z'
        description: 'Expiration time in UTC formatted as RFC3339.'
      status:
        type: string
        example: ACTIVE
        description: 'Status of the certificate.'
        enum:
          - ACTIVE
          - INACTIVE
      device_execution_mode:
        type: integer
        format: int32
        example: 1
        description: 'Device execution mode where 1 means a developer certificate.'
      enrollment_mode:
        type: boolean
        example: false
        description: 'DEPRECATED: Certificate is used in enrollment mode. Default value is false.'
        x-deprecation:
          issued_at: "2020-11-01T00:00:00+00:00"
          end_of_life_at: "2021-11-01T00:00:00+00:00"
          comment: 'This field is deprecated, do not use it anymore.'
          links: []
      certificate_fingerprint:
        type: string
        example: a10fb2c8ba90e6de927bd0ae391dcc38f6115685de2d7024712af37ead0608f1
        description: 'A SHA-256 fingerprint of the certificate.'
      valid:
        type: boolean
        example: true
        description: 'This read-only flag indicates whether the certificate is valid or not.'
        readOnly: true
      is_public:
        type: boolean
        readOnly: true
        example: false
        description: 'The certificate is public and can be imported into other accounts.'
      released_at:
        type: string
        readOnly: true
        format: date-time
        example: '2021-11-30T09:00:00Z'
        description: 'For OEM certificates this field shows the time when it was released.'
      imported_at:
        type: string
        readOnly: true
        format: date-time
        example: '2021-12-01T09:00:00Z'
        description: 'For OEM certificates this field shows the time when it was imported to this account.'
      source_id:
        type: string
        readOnly: true
        example: 01619571d01d0242ac12000600000000
        description: 'If imported, this field shows the original ID of the OEM certificate.'
        pattern: '[a-f0-9]{32}'
    description: 'Represents a trusted certificate in responses.'
  TrustedCertificateRespList:
    type: object
    required:
      - data
      - has_more
      - limit
      - object
      - total_count
    properties:
      object:
        type: string
        description: 'Entity name: always `list`.'
        enum:
          - list
      limit:
        type: integer
        format: int32
        example: 50
        description: 'The number of results to return (2-1000), or equal to `total_count`.'
      after:
        type: string
        example: 01619571f3c00242ac12000600000000
        description: 'The entity ID to retrieve after the given one.'
        pattern: '[a-f0-9]{32}'
      order:
        type: string
        description: 'The order of the records to return based on creation time. Available values: ASC, DESC; by default ASC.'
        enum:
          - ASC
          - DESC
      total_count:
        type: integer
        format: int32
        example: 20
        description: 'The total number of records, if requested.'
      has_more:
        type: boolean
        example: false
        description: 'Flag indicating whether there are more results.'
      data:
        type: array
        description: 'A list of entities.'
        items:
          $ref: '#/definitions/TrustedCertificateResp'
  TrustedCertificateUpdateReq:
    type: object
    properties:
      name:
        type: string
        maxLength: 100
        description: 'Certificate name.'
      description:
        type: string
        maxLength: 500
        x-nullable: true
        description: 'Human readable description of this certificate.'
      certificate:
        type: string
        description: 'A chain of X509.v3 trusted certificates in PEM format. The chain must contain all certificates from root to leaf.'
      service:
        type: string
        description: 'Service name where the certificate must be used. Service cannot be updated for developer certificates.'
        enum:
          - lwm2m
          - bootstrap
      status:
        type: string
        description: 'Status of the certificate.'
        enum:
          - ACTIVE
          - INACTIVE
      signature:
        type: string
        description: 'DEPRECATED: Base64 encoded signature of the account ID signed by the certificate to be uploaded. The signature must be hashed with SHA256.'
      enrollment_mode:
        type: boolean
        description: 'Certificate is used in enrollment mode. Default value is false.'
    description: 'Represents a trusted certificate in update requests.'
  UserInfoReq:
    type: object
    required:
      - email
    properties:
      password:
        type: string
        description: 'The password for a new user. Generated when not present in the request.'
        x-nullable: true
      email:
        type: string
        description: 'The email address.'
        <<: *email_pattern
      groups:
        type: array
        description: 'A list of IDs of the groups this user belongs to.'
        items:
          type: string
      address:
        type: string
        maxLength: 100
        description: 'Address.'
        x-nullable: true
      is_marketing_accepted:
        type: boolean
        description: 'A flag indicating that the user has consented to receive marketing information.'
      phone_number:
        type: string
        maxLength: 100
        description: 'Phone number.'
        x-nullable: true
      full_name:
        type: string
        maxLength: 100
        x-nullable: true
        description: 'The full name of the user.'
      is_gtc_accepted:
        type: boolean
        description: 'A flag indicating that the user has accepted General Terms and Conditions.'
      username:
        type: string
        description: 'A username.'
        <<: *username_pattern
        x-nullable: true
      login_profiles:
        type: array
        description: 'A list of login profiles for the user. Specified as the identity providers the user should be associated with. Only the ID attribute of the login profile should be set in the request object.'
        items:
          $ref: '../../api-common-definitions/iam.yaml#/definitions/LoginProfile'
    description: 'Represents a user in requests towards Device Management.'
  UserInfoResp:
    type: object
    required:
      - account_id
      - email
      - etag
      - id
      - object
      - status
    properties:
      object:
        type: string
        description: 'Entity name: always `user`.'
        enum:
          - user
      id:
        type: string
        example: 01619571e2e89242ac12000600000000
        description: 'The ID of the user.'
        pattern: '[a-f0-9]{32}'
      etag:
        type: string
        example: '1'
        description: 'API resource entity version.'
      created_at:
        type: string
        format: date-time
        example: '2018-02-13T09:35:20Z'
        description: 'Creation UTC time RFC3339.'
      updated_at:
        type: string
        format: date-time
        example: '2018-02-14T15:24:14Z'
        description: 'Last update UTC time RFC3339.'
      status:
        type: string
        example: ACTIVE
        description: 'The status of the user. ENROLLING state indicates that the user is in the middle of the enrollment process. INVITED means that the user has not accepted the invitation request. RESET means that the user has not finished the password recovery process yet. INACTIVE users are locked out and not permitted to use the system.'
        enum:
          - ENROLLING
          - INVITED
          - ACTIVE
          - RESET
          - INACTIVE
      username:
        type: string
        example: admin
        description: 'A username.'
        x-nullable: true
        <<: *username_pattern
      password:
        type: string
        example: PZf9eEUH43DAPE9ULINFeuj
        description: 'The password when creating a new user. It will be generated when not present in the request.'
        x-nullable: true
      full_name:
        type: string
        maxLength: 100
        example: User Doe
        x-nullable: true
        description: 'The full name of the user.'
      email:
        type: string
        example: user@arm.com
        description: 'The email address.'
        <<: *email_pattern
      address:
        type: string
        example: '110 Fulbourn Rd, Cambridge, United Kingdom'
        description: 'Address.'
        x-nullable: true
      phone_number:
        type: string
        maxLength: 100
        example: +44 (1223) 400 400
        description: 'Phone number.'
        x-nullable: true
      groups:
        type: array
        description: 'A list of IDs of the groups this user belongs to.'
        items:
          type: string
      is_gtc_accepted:
        type: boolean
        example: true
        description: 'A flag indicating that the user has accepted General Terms and Conditions.'
      is_marketing_accepted:
        type: boolean
        example: true
        description: 'A flag indicating that the user has consented to receive marketing information.'
      email_verified:
        type: boolean
        example: true
        description: "A flag indicating whether the user's email address has been verified or not."
      creation_time:
        type: integer
        format: int64
        example: 1518630727683
        description: 'A timestamp of the user creation in the storage, in milliseconds.'
      last_login_time:
        type: integer
        format: int64
        example: 1518630727688
        description: 'A timestamp of the latest login of the user, in milliseconds.'
      password_changed_time:
        type: integer
        format: int64
        example: 1518630727688
        description: 'A timestamp of the latest change of the user password, in milliseconds.'
      is_password_change_needed:
        type: boolean
        example: false
        description: A flag indicating whether the password change flow should be started after next login.
      account_id:
        type: string
        example: 01619571e2e90242ac12000600000000
        description: 'The ID of the account.'
        pattern: '[a-f0-9]{32}'
      login_history:
        type: array
        maxItems: 5
        description: 'Timestamps, succeedings, IP addresses and user agent information of the last five logins of the user, with timestamps in RFC3339 format.'
        items:
          $ref: '#/definitions/LoginHistory'
      is_totp_enabled:
        type: boolean
        example: true
        description: 'A flag indicating whether two-factor authentication (TOTP) has been enabled.'
      login_profiles:
        type: array
        description: 'A list of login profiles for the user. Specified as the identity providers the user is associated with.'
        x-nullable: true
        items:
          $ref: '../../api-common-definitions/iam.yaml#/definitions/LoginProfile'
      totp_scratch_codes:
        type: array
        x-nullable: true
        description: 'A list of scratch codes for the two-factor authentication. Visible only when 2FA is requested to be enabled or the codes regenerated.'
        items:
          type: string
      custom_fields:
        type: object
        x-nullable: true
        description: "User's account-specific custom properties. The value is a string."
        additionalProperties:
          type: string
      active_sessions:
        type: array
        description: 'List of active user sessions.'
        items:
          $ref: '#/definitions/ActiveSession'
    description: 'Represents a user in Device Management.'
  UserInfoRespList:
    type: object
    required:
      - data
      - has_more
      - limit
      - object
      - total_count
    properties:
      object:
        type: string
        description: 'Entity name: always `list`.'
        enum:
          - list
      limit:
        type: integer
        format: int32
        example: 50
        description: 'The number of results to return (2-1000), or equal to `total_count`.'
      after:
        type: string
        example: 01619571f3c00242ac12000600000000
        description: 'The entity ID to retrieve after the given one.'
        pattern: '[a-f0-9]{32}'
      order:
        type: string
        description: 'The order of the records to return based on creation time. Available values: ASC, DESC; by default ASC.'
        enum:
          - ASC
          - DESC
      total_count:
        type: integer
        format: int32
        example: 20
        description: 'The total number of records, if requested.'
      has_more:
        type: boolean
        example: false
        description: 'Flag indicating whether there are more results.'
      data:
        type: array
        description: 'A list of entities.'
        items:
          $ref: '#/definitions/UserInfoResp'
  UserInvitationReq:
    type: object
    required:
      - email
    properties:
      email:
        type: string
        description: 'The email address.'
        <<: *email_pattern
      login_profiles:
        type: array
        description: 'A list of login profiles for the user. Specified as the identity providers the user should be associated with. Only the ID attribute of the login profile should be set in the request object.'
        items:
          $ref: '../../api-common-definitions/iam.yaml#/definitions/LoginProfile'
      valid_for_days:
        type: integer
        format: int32
        maximum: 100
        minimum: 1
        default: 30
        description: 'Specifies how many days the invitation will be valid for.'
      groups:
        type: array
        description: 'A list of IDs of the groups this user has been invited to.'
        items:
          type: string
    description: 'Represents a user invitation in requests towards Device Management.'
  UserInvitationResp:
    type: object
    required:
      - account_id
      - email
      - etag
      - id
      - object
      - user_id
    properties:
      object:
        type: string
        description: 'Entity name: always ''user-invitation'''
        enum:
          - user-invitation
      id:
        type: string
        example: 01619571e2e89242ac12000600000000
        description: 'The ID of the invitation.'
        pattern: '[a-f0-9]{32}'
      etag:
        type: string
        example: '1'
        description: 'API resource entity version.'
      created_at:
        type: string
        format: date-time
        example: '2018-02-13T09:35:20Z'
        description: 'Creation UTC time RFC3339.'
      updated_at:
        type: string
        format: date-time
        example: '2018-02-14T15:24:14Z'
        description: 'Last update UTC time RFC3339.'
      email:
        type: string
        example: friend@arm.com
        description: 'Email address of the invited user.'
        <<: *email_pattern
      user_id:
        type: string
        example: 01619571e2e90242ac12000600000000
        description: 'The ID of the invited user.'
        pattern: '[a-f0-9]{32}'
      account_id:
        type: string
        example: 01619571e2e90242ac12000600000000
        description: 'The ID of the account the user is invited to.'
        pattern: '[a-f0-9]{32}'
      groups:
        type: array
        description: 'A list of IDs of the groups the user is invited to.'
        items:
          type: string
      expiration:
        type: string
        format: date-time
        example: '2018-02-14T15:24:14Z'
        description: 'Invitation expiration as UTC time RFC3339.'
      login_profiles:
        type: array
        description: 'A list of login profiles for the user. Specified as the identity providers the user is associated with.'
        x-nullable: true
        items:
          $ref: '../../api-common-definitions/iam.yaml#/definitions/LoginProfile'
    description: 'Represents an user invitation in responses.'
  UserInvitationRespList:
    type: object
    required:
      - data
      - has_more
      - limit
      - object
      - total_count
    properties:
      object:
        type: string
        description: 'Entity name: always `list`.'
        enum:
          - list
      limit:
        type: integer
        format: int32
        example: 50
        description: 'The number of results to return (2-1000), or equal to `total_count`.'
      after:
        type: string
        example: 01619571f3c00242ac12000600000000
        description: 'The entity ID to retrieve after the given one.'
        pattern: '[a-f0-9]{32}'
      order:
        type: string
        description: 'The order of the records to return based on creation time. Available values: ASC, DESC; by default ASC.'
        enum:
          - ASC
          - DESC
      total_count:
        type: integer
        format: int32
        example: 20
        description: 'The total number of records, if requested.'
      has_more:
        type: boolean
        example: false
        description: 'Flag indicating whether there are more results.'
      data:
        type: array
        description: 'A list of entities.'
        items:
          $ref: '#/definitions/UserInvitationResp'
  UserUpdateReq:
    type: object
    properties:
      email:
        type: string
        x-nullable: true
        description: "The email address. Not allowed to update other user's email address."
        <<: *email_pattern
      address:
        type: string
        maxLength: 100
        x-nullable: true
        description: 'Address.'
      is_marketing_accepted:
        type: boolean
        x-nullable: true
        description: 'A flag indicating that the user has consented to receive marketing information.'
      phone_number:
        type: string
        maxLength: 100
        x-nullable: true
        description: 'Phone number.'
      full_name:
        type: string
        maxLength: 100
        x-nullable: true
        description: 'The full name of the user.'
      is_gtc_accepted:
        type: boolean
        x-nullable: true
        description: 'A flag indicating that the user has accepted General Terms and Conditions.'
      username:
        type: string
        x-nullable: true
        description: 'A username.'
        <<: *username_pattern
      status:
        type: string
        x-nullable: true
        example: ACTIVE
        description: 'The status of the user. ENROLLING indicates that the user is in the middle of the enrollment process. INVITED means that the user has not accepted the invitation request. RESET means that the user has not finished the password recovery process yet. INACTIVE users are locked out and not permitted to use the system. Can be changed by the Aggregator Admin only.'
        enum:
          - ENROLLING
          - INVITED
          - ACTIVE
          - RESET
          - INACTIVE
      is_password_change_needed:
        type: boolean
        example: false
        description: A flag indicating whether the password change flow should be started after next login. Can be changed by the Aggregator Admin only.
      is_totp_enabled:
        type: boolean
        x-nullable: true
        description: 'A flag indicating whether two-factor authentication (TOTP) is enabled. An account administrator can disable it, but cannot enable it for other users.'
      groups:
        type: array
        x-nullable: true
        description: 'A list of group IDs this user belongs to. Can be updated by the Account Admin only.'
        items:
          type: string
      login_profiles:
        type: array
        x-nullable: true
        description: |-
          'A list of login profiles for the user, specified as identity providers associated with the user. Only the ID attribute of the login profile should be set in the request object. The list cannot be empty. Only an account admin may update login profiles.'
        items:
          $ref: '../../api-common-definitions/iam.yaml#/definitions/LoginProfile'
    description: 'Represents a user in requests towards Device Management.'
  GroupIdList:
    type: array
    items:
      type: string
      example: 01705c6383f6c85b76f92f4e00000000
  SubtenantConfiguration:
    type: object
    properties:
      object:
        type: string
        description: 'Entity name: always `subtenant-configuration`.'
        enum:
          - subtenant-configuration
      id:
        type: string
        example: 01619571e2e90242ac12000600000000
        description: 'Entity ID.'
        pattern: '[a-f0-9]{32}'
        readOnly: true
      etag:
        type: string
        example: '1'
        description: 'API resource entity version.'
        readOnly: true
      account_id:
        type: string
        example: 01619571e2e90242ac12000600000000
        description: 'ID of the aggregator account.'
        pattern: '[a-f0-9]{32}'
        readOnly: true
      created_at:
        type: string
        format: date-time
        example: '2018-02-13T09:35:20Z'
        description: 'Creation UTC time RFC3339.'
        readOnly: true
      updated_at:
        type: string
        format: date-time
        example: '2018-02-14T15:24:14Z'
        description: 'Last update UTC time RFC3339.'
        readOnly: true
      branding_inherited:
        type: boolean
        example: true
        description: Flag indicating whether subtenants should inherit the branding information from the parent.
      branding_overwrite_allowed:
        type: boolean
        example: false
        description: Flag indicating whether branding overwrite is allowed.
    description: 'Represents a subtenant configuration.'

