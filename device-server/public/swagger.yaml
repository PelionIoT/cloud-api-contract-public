swagger: '2.0'
info:
  title: Connect API
  description: |-
    Pelion Device Management Connect API lets web applications communicate with devices. You can read values from and write values to resources and subscribe to device resources to receive updates about resource changes.

    Device Management Connect allows queueing requests and caching resource values.

    Device Management Connect links pre-subscriptions and subscriptions to the application you use to set the subscriptions. Therefore, you must use access keys of the same application in subsequent requests.

    See <a href="https://developer.pelion.com/docs/device-management/current/service-api-references/troubleshooting-the-apis.html">Troubleshooting the APIs</a> for information on status and error codes.

    See documentation for [all public APIs](https://developer.pelion.com/docs/device-management/current/service-api-references/service-api-documentation.html).
  version: "2"
# array of all schemes that your API supports
schemes:
  - https
# will be prefixed to all paths
host: api.us-east-1.mbedcloud.com
tags:
  - name: Device data - requests
    description: Send an asynchronous request to a method (GET, POST, PUT, DELETE) on a device resource.
  - name: Device data - resources
    description: List the resources on a device.
  - name: Device data - subscriptions
    description: Manage subscriptions to device resource changes.
x-aliases:
  successfully_deleted: &successfully_deleted
    description: Successfully deleted.
  unauthorized: &unauthorized
    description: Unauthorized.
  forbidden: &forbidden
    description: Forbidden. The authorization token used is not an access key.
paths:
  /v2/endpoints/{device-id}:
    get:
      summary: List the resources on a device.
      description: |-
        Retrieves information about the resource structure for a device from Device Management. This call does not reach the device.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v2/endpoints/{device-id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getEndpointResources
      produces:
        - application/json
      parameters:
        - name: device-id
          in: path
          description: |-
            The device ID generated by Device Management. The ID must be an exact match. Do not use wildcards.
          required: true
          type: string
      tags:
        - Device data - resources
      responses:
        200:
          description: Successful response with an array of resources.
          schema:
            $ref: '#/definitions/ResourceArray'
        404:
          description: Endpoint not found.

  /v2/subscriptions/{device-id}/{resourcePath}:
    put:
      summary: Subscribe to a resource to receive updates about resource changes.
      description: |-

        Subscribe to a resource to receive updated resource content, periodically or based on a more sophisticated solution-dependent logic.

        To place dynamic observation rules for individual object instances and resources and define when the device sends observations, set [notification rules](https://developer.pelion.com/docs/device-management/current/resources/resource-change-webapp.html).

        **Note:** Device Management removes all manual subscriptions during a full device registration, at which point applications must re-subscribe. To avoid this, use `/subscriptions` to set a pre-subscription.

        You can subscribe to resources, objects and object instances.

        **Example:**
        ```
        curl -X PUT https://api.us-east-1.mbedcloud.com/v2/subscriptions/{device-id}/{resourcePath} \
        -H 'Authorization: Bearer <access_key>'
        ```

        **Important:** You must also call a [`/notification/callback`](https://developer.pelion.com/docs/device-management-api/notifications/) method for Device Management Connect to push resource change notifications.

      operationId: addResourceSubscription
      produces:
        - application/json
      parameters:
        - name: device-id
          in: path
          description: |-
            The device ID generated by Device Management. The ID must be an exact match. Do not use wildcards.
          required: true
          type: string
        - name: resourcePath
          in: path
          description: |-
            The resource URL. This can be the path to:

            - An object; for example, `3303`.
            - An object instance; for example `3303/0`.
            - A resource; for example `3303/0/5602`.

            For more information about the Device Management resource model, please see the [Device Management documentation](https://developer.pelion.com/docs/device-management/current/resources/resource-model.html).
          required: true
          type: string
      tags:
        - Device data - subscriptions
      responses:
        200:
          description: Successfully subscribed.
        202:
          description: Accepted. Returns an asynchronous response ID used to reference the future asynchronous response.
          schema:
            $ref: '#/definitions/AsyncID'
        400:
          description: Bad request, malformed content.
        404:
          description: |-
            Not found. Contains one of these errors:
            <table>
              <thead>
                <tr>
                  <th>Error message</th>
                  <th>Description</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td><b>DEVICE_NOT_FOUND</b></td>
                  <td>The device cannot be found. Either it never connected, it deregistered or did not connect in time and is expired.</td>
                </tr>
                <tr>
                  <td><b>URI_PATH_DOES_NOT_EXISTS</b></td>
                  <td>The requested resource does not exist on the device. Check that the resource path is correct.</td>
                </tr>
              </tbody>
            </table>
        429:
          description: |-
            Cannot accept the request at the moment. Contains one of these errors:
            <table>
              <thead>
                <tr>
                  <th>Error message</th>
                  <th>Description</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td><b>LIMITS_EXCEEDED</b></td>
                  <td>This account has reached its transaction quota limit.</td>
                </tr>
                <tr>
                  <td><b>CONGESTION_CONTROL</b></td>
                  <td>The subscription has been queued but cannot currently be sent to the device because too many requests are being directed at the device at this time.</td>
                </tr>
                <tr>
                  <td><b>QUEUE_IS_FULL</b></td>
                  <td>The Device Management service queue is full. The subscription will be rejected until some queued messages are delivered or expired.</td>
                </tr>
              </tbody>
            </table>
        502:
          description: 'Subscription failed. Endpoint not connected.'

    get:
      summary: Read the subscription status for a specific resource.
      description: Check whether you are subscribed to receive resource content updates for a specific resource.
      operationId: checkResourceSubscription
      parameters:
        - name: device-id
          in: path
          description: |-
            The device ID generated by Device Management. The ID must be an exact match. Do not use wildcards.
          required: true
          type: string
        - name: resourcePath
          in: path
          description: |-
            The resource URL. This can be the path to:

            - An object; for example, `3303`.
            - An object instance; for example `3303/0`.
            - A resource; for example `3303/0/5602`.

            For more information about the Device Management resource model, please see the [Device Management documentation](https://developer.pelion.com/docs/device-management/current/resources/resource-model.html).

          required: true
          type: string
      tags:
        - Device data - subscriptions
      responses:
        200:
          description: Resource is subscribed.
        404:
          description: Resource is not subscribed.

    delete:
      summary: Remove a subscription.
      description: |-
        Remove an existing subscription to a resource.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v2/subscriptions/{device-id}/{resourcePath} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: deleteResourceSubscription
      parameters:
        - name: device-id
          in: path
          description: |-
            The device ID generated by Device Management. The ID must be an exact match. Do not use wildcards.
          required: true
          type: string
        - name: resourcePath
          in: path
          description: |-
            The resource URL. This can be the path to:

            - An object; for example, `3303`.
            - An object instance; for example `3303/0`.
            - A resource; for example `3303/0/5602`.

            For more information about the Device Management resource model, please see the [Device Management documentation](https://developer.pelion.com/docs/device-management/current/resources/resource-model.html).

          required: true
          type: string
      tags:
        - Device data - subscriptions
      responses:
        204:
          description: Successfully removed subscription.

  /v2/subscriptions/{device-id}:
    get:
      summary: View all subscriptions on a device.
      description: |-
        Retrieve a list of all subscribed resources on a single device.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v2/subscriptions/{device-id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getEndpointSubscriptions
      produces:
        - text/uri-list
      parameters:
        - name: device-id
          in: path
          description: |-
            The device ID generated by Device Management. The ID must be an exact match. Do not use wildcards.
          required: true
          type: string
      tags:
        - Device data - subscriptions
      responses:
        200:
          description: List of subscribed resources.
          schema:
            type: string
            description: "A list of resource URIs, one per line."
            example: "/sen/light"
        404:
          description: Endpoint not found, or there are no subscriptions for that endpoint.
    delete:
      summary: Delete all subscriptions on a device.
      description: |-
        Delete all resource subscriptions in a single device.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v2/subscriptions/{device-id} \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: deleteEndpointSubscriptions
      parameters:
        - name: device-id
          in: path
          description: |-
            The device ID generated by Device Management. The ID must be an exact match. Do not use wildcards.
          required: true
          type: string
      tags:
        - Device data - subscriptions
      responses:
        204:
          description: Successfully removed.

  /v2/subscriptions:
    put:
      summary: Set pre-subscriptions.
      description: |-
        A pre-subscription is a set of rules you define to subscribe to specific resources automatically when certain devices register or does a register update.
        You can set subscription rules based on the endpoint ID (optionally having an `*` character at the end), endpoint type, a list of resources, or expressions with an `*` character at the end.
        When a device that meets the subscription rules registered, Device Management Connect automatically sends subscription requests to the device for the resources you specify.
        To remove the pre-subscription data, put an empty array as a rule.
        To place dynamic observation rules for individual object instances and resources and define when the device sends observations, set [notification rules](https://developer.pelion.com/docs/device-management/current/resources/resource-change-webapp.html).

        **Note:** The subscription is bound to the application you are using. To get notifications of the resource value changes, you need to create an [event notification channel](https://developer.pelion.com/docs/device-management/current/integrate-web-app/event-notification.html) with an access key of the same application.

        **Example request:**
        ```
        curl -X PUT https://api.us-east-1.mbedcloud.com/v2/subscriptions \
        -H 'Authorization: Bearer <access_key>' \
        -H 'content-type: application/json' \
        -d '[
               {
                 "endpoint-name": "node-001",
                 "resource-path": ["/dev"]
               },
               {
                 "endpoint-type": "Light",
                 "resource-path": ["/sen/*"]
               },
               {
                 "endpoint-name": "node*"
               },
               {
                 "endpoint-type": "Sensor"
               },
               {
                 "resource-path": ["/dev/temp","/dev/hum"]
               }
            ]'
        ```

        - Subscribe to `/dev` resource of endpoint named `node-001`.
        - Subscribe to `Light` type of endpoints and their resources prefixed with `/sen/`.
        - Subscribe to all observable resources of endpoint names prefixed with `node`.
        - Subscribe to all observable resources of `Sensor` type endpoints.
        - Subscribe to `/dev/temp` and `/dev/hum` resources of all endpoints.

        **Limits**:

        - The maximum length of the endpoint name and endpoint type is 64 characters.
        - The maximum length of the resource path is 128 characters.
        - You can subscribe to 256 separate resource paths.
        - The maximum number of pre-subscription entries is 1024.

        **Note**: To save bandwidth and avoid unnecessary traffic, use resource path patterns to limit the matching resources in the presubscription data. This prevents your web application from receiving unwanted resource notifications. See [Subscribe only to what you need](https://developer.pelion.com/docs/device-management/current/resources/resource-change-webapp.html).

      operationId: updatePreSubscriptions
      consumes:
        - application/json
      tags:
        - Device data - subscriptions
      produces:
        - text/plain
      parameters:
        - name: presubscription
          in: body
          description: Array of pre-subscriptions.
          required: true
          schema:
            $ref: '#/definitions/PresubscriptionArray'
      responses:
        204:
          description: Successfully created.
        400:
          description: Bad request, malformed content.
        401:
          description: Unauthorized.
        403:
          description: 'Forbidden: the authorization token used is not an access key.'
    get:
      summary: View pre-subscriptions.
      description: |-
        Retrieve pre-subscription data. The server returns a JSON structure. If there are no pre-subscribed resources, the server returns an empty array.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v2/subscriptions \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getPreSubscriptions
      produces:
        - application/json
      tags:
        - Device data - subscriptions
      responses:
        200:
          description: OK.
          schema:
            $ref: '#/definitions/PresubscriptionArray'
        401:
          description: Unauthorized.
        403:
          description: 'Forbidden: the authorization token used is not an access key.'
    delete:
      summary: Remove pre-subscriptions.
      description: |-
        Remove pre-subscriptions.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v2/subscriptions \
        -H 'Authorization: Bearer <access_key>'
        ```
      operationId: deletePreSubscriptions
      tags:
        - Device data - subscriptions
      responses:
        204:
          description: Successfully removed subscriptions.
        401:
          description: Unauthorized.
        403:
          description: 'Forbidden: the authorization token used is not an access key.'

  /v2/device-requests/{device-id}:
    post:
      summary: Send an asynchronous request to read, write or post to a device resource.
      description: |-
        This API provides an interface to call CoAP (Constrained Application Protocol) methods on a device and send commands to device resources.
        For LWM2M details, please see the [Lightweight Machine to Machine Technical specification](http://www.openmobilealliance.org/release/LightweightM2M/V1_0-20170208-A/OMA-TS-LightweightM2M-V1_0-20170208-A.pdf) section 5.4 for read, write, write-attributes, execute, create and delete operations.

        As part of the request body, you must specify the CoAP method you want to call on the device:

        - Use the GET method to read resource values.

            For example, to read the value of resource `/3200/0/5501`, use:

            ```
            curl -X POST https://api.us-east-1.mbedcloud.com/v2/device-requests/{device_id}?async-id={async-response-id} \
            -H 'Authorization: Bearer {access_key}' \
            -H 'content-type: application/json' \
            -d '{"method": "GET", "uri": "/3200/0/5501"}'
            ```

        > For `GET` methods, the API may fetch values from an internal cache, instead of contacting the device.
        > If the value is not in the cache, the read command goes all the way to the device.


        - Use the PUT method to write [notification rules](https://developer.pelion.com/docs/device-management/current/resources/resource-change-webapp.html) or resource values for a resource.

          Example payload to write a notification rule:

            ```
            { "method": "PUT", "uri": "/5/0/1?lt=10&gt=60&pmax=120" }
            ```

        - Example payload to write a value to resource `/5/0/1`:

            ```
            { "method": "PUT", "uri": "/5/0/1?k1=v1&k2=v2", "accept": "text/plain", "content-type": "text/plain", "payload-b64": "dmFsdWUxCg==" }
            ```

        - Use the POST method to execute or create a resource on a LWM2M supporting device.

          The create operation targets an object, and the targeted object must exist in the device. The object must allow WRITE/POST to create object instances and resources.
          When you create a resource, `uri` must refer to an object, and `payload-b64` must be in LWM2M TLV format for example:

            ```
            { "method": "POST", "uri": "/123", "content-type": "application/vnd.oma.lwm2m+tlv", "payload-b64": "BwHFAnZhbHVl" }
            ```

        - Use the POST method to execute resource on a LWM2M supporting device.

          Example payload to execute LWM2M resource `/123/1/1`:

            ```
            { "method": "POST", "uri": "/123/1/1" }
            ```

        - Device Management sends responses through the currently configured notification channel as `AsyncIDResponse`.

          Example `AsyncIDResponse` delivered through the notification channel:

            ```
            { "async-responses": [ { "id": "123e4567-e89b-12d3-a456-426655440000", "status": 200, "payload": "dmFsdWUxCg==", "ct": "text/plain", "max-age": 600 } ] }
            ```

            ```
            { "async-responses": [ { "id": "123e4567-e89b-12d3-a456-426655440000", "status": 504, "error": "TIMEOUT" } ] }
            ```

        > If it cannot reach the device at the time of the request, Device Management puts the requests in a queue.

        **Queueing behavior**

        If Device Management does not reach the device, or the device fails to respond, the server queues the request and retries the delivery, for the period of time defined by `expiry-seconds`.

        The queue is limited to 20 requests per device. If the queue is full, subsequent messages will be rejected until some of the existing messages are delivered or expired.

        Device Management delivers requests from the queue in the order of insertion, one at a time, and not concurrently.

        Delivery attempts follow protocol-specific retransmission logic. There can be multiple transmissions, depending
        on the protocol. For CoAP, the retransmissions have an exponential backoff of 2, 4, 8, 16, and up to 64 seconds,
        taking in total over two minutes. If the device does not respond within this few minutes period,
        the delivery fails, and Device Management puts the request back into the queue to be redelivered.

        Device Management attempts to redeliver the request when the device next time contacts the server. If the request
        delivery fails during too many redeliveries, the server will then discard the request, and send an error in an
        `AsyncIDResponse`. For example, retries could be exhausted if the device periodically contacts the server and
        receives the request from the queue, but then fails to respond to the server.

        If the request is not yet delivered, and Device Management reaches the `expiry-seconds` limit, the server
        discards the request and sends an error in the `AsyncIDResponse`. For example, the device may lose its network
        connectivity, and the requests in the queue may expire and get discarded before the device regains connectivity.

        When Device Management delivers the request to the device, the status code in `AsyncIDResponse` is
        *2xx* or *4xx*, based on the device's response. If Device Management could not deliver the request,
        the server generates a status code of *429* or *5xx*.

      operationId: createAsyncRequest
      consumes:
        - application/json
      tags:
        - Device data - requests
      produces:
        - application/json
      parameters:
        - name: "device-id"
          in: "path"
          description: 'The device ID generated by Device Management.'
          required: true
          format: "uuid, 32 hexadecimal characters"
          type: string
        - name: "async-id"
          in: "query"
          description: 'A client-generated ID that lets the REST client track the end-to-end flow and prevents race conditions with the notification channel. The `async-id` can be, for example, a UUID or the web application session ID
          along with the device ID and the resource.'
          required: true
          format: '1-40 alphanumeric characters and dashes.'
          type: string
          pattern: '^[\w\-]{1,40}$'
        - name: "retry"
          in: "query"
          description: "(DEPRECATED) Retry parameter is deprecated and will be ignored. The server will apply a number
          of retries to each request. When retries are exhausted, Device Management discards the request and delivers
          an error in the AsyncIDResponse."
          required: false
          type: integer
          minimum: 0
          maximum: 10
        - name: "expiry-seconds"
          in: "query"
          description: "The time period during which the delivery is attempted, in seconds. If the device is not
          reachable within this period, Device Management discards the request and delivers an error in the AsyncIDResponse.
          The default time period during which the delivery is attempted is three days."
          required: false
          type: integer
          minimum: 60
          maximum: 2592000
        - name: body
          in: body
          description: "Device request to send.
          The body element has `method`, `uri`, `accept`, `content-type` and `payload-b64` fields.

            - The `method` is one of `GET`, `PUT`, `POST`, `DELETE`.

            - The `uri` field is the path to the LwM2M object and can include query parameters. This can include key-value pairs, for example, `/5/0/1?key1=value1;key2=value2`.

            - The `accept` field defines the content type that the requesting client will accept.

            - The `content-type` describes the content type of the base-64 encoded `payload-b64` field.

            - The `payload-b64` is the payload to send to the device in base-64 encoded form."

          required: true
          schema:
            $ref: '#/definitions/DeviceRequest'
      responses:
        202:
          description: Accepted.
        400:
          description: |-
            Bad request. Contains one of the errors:
            <table>
              <thead>
                <tr>
                  <th>Error message</th>
                  <th>Description</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td><b>LIMITS_EXCEEDED</b></td>
                  <td>This account has reached its transaction quota limit.</td>
                </tr>
                <tr>
                  <td><b>RESOURCE_NOT_FOUND</b></td>
                  <td>The requested resource does not exist on the device. Check that the resource path is correct.</td>
                </tr>
                <tr>
                  <td><b>MALFORMED_JSON_CONTENT</b></td>
                  <td>The JSON payload could not be processed. Check that the payload is correct.</td>
                </tr>
                <tr>
                  <td><b>QUEUE_IS_FULL</b></td>
                  <td>The Device Management service queue is full. Messages will be rejected until some queued messages are delivered or expired.</td>
                </tr>
                <tr>
                  <td><b>MALFORMED_DEVICE_ID</b></td>
                  <td>The device ID in the URI path is malformed.</td>
                </tr>
                <tr>
                  <td><b>MALFORMED_RETRY</b></td>
                  <td>The retry query parameter value is not an integer between 0 and 10.</td>
                </tr>
                <tr>
                  <td><b>MALFORMED_ASYNC_ID</b></td>
                  <td>The required async-id input parameter is invalid.</td>
                </tr>
                <tr>
                  <td><b>MISSING_ASYNC_ID</b></td>
                  <td>The device request asynchronous ID is not found within the query parameters.</td>
                </tr>
                <tr>
                  <td><b>MALFORMED_EXPIRY_SECONDS</b></td>
                  <td>The expiry seconds query parameter value is not an integer between 60 and 2,592,000.</td>
                </tr>
                <tr>
                  <td><b>INVALID_METHOD_IN_BODY</b></td>
                  <td>The allowed methods in message body are GET, PUT, POST and DELETE.</td>
                </tr>
                <tr>
                  <td><b>INVALID_URI_IN_BODY</b></td>
                  <td>The URI in the message body is invalid.</td>
                </tr>
                <tr>
                  <td><b>INVALID_ACCEPT_IN_BODY</b></td>
                  <td>The accept in the body is invalid. The allowed value length is 1 to 40 characters.</td>
                </tr>
                <tr>
                  <td><b>INVALID_NULL_CHARACTER_IN_BODY</b></td>
                  <td>The body payload contains null characters.</td>
                </tr>
                <tr>
                  <td><b>INVALID_CONTENT_TYPE_IN_BODY</b></td>
                  <td>The content type in the body is invalid. The allowed value length is 1 to 40 characters.</td>
                </tr>
                <tr>
                  <td><b>INVALID_PAYLOAD_B64_IN_BODY</b></td>
                  <td>The payload in the body is not base64 encoded or exceeds the allowed value length of 1,398,102.</td>
                </tr>
              </tbody>
            </table>
        401:
          description: Authentication failure.
        404:
          description: |-
            Device not found. The device has deregistered or did not connect in time and is expired.

  /v3/devices/{device-id}/echo:
    get:
      summary: Get the Device Echo object.
      description: |-
        Retrieve the Device Echo object, which represents the last known state of the device. The state includes the resources and their reported values with the desired state of the device.
        Auto-observable and subscribed resources are stored as the reported state of the device. To change the desired state, issue write commands with `/v2/device-requests/{device-id}`.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/devices/{device-id}/echo -H 'Authorization: Bearer <access_key>'
        ```
      operationId: getDeviceEchoObject
      tags:
        - Device Echo
      produces:
        - application/json
      parameters:
        - name: device-id
          in: path
          description: The device ID generated by Device Management.
          required: true
          format: UUID, 32 hexadecimal characters
          type: string
      responses:
        200:
          description: Device found and returned.
          schema:
            $ref: '#/definitions/EchoDevice'
        401:
          description: Authentication failure.
        404:
          description: Device not found from Device Echo.
    delete:
      summary: Delete the Device Echo object.
      description: |-
        Calling this API removes your application data and device from the Device Echo service. You can still find the device using 'GET /v3/devices/{id}' from the Device Directory API.

        For privacy reasons, you might need to delete device data that contains personal information about the device owner or user.
        Private information is stored by the application; Pelion Device Management Client does not provide or store any private data.

        **Note:** If the device is able to connect, its data will reappear in Echo the next time the device sends that information to the service. To ensure data is permanently removed, suspend the device first by calling 'POST /v3/devices/{id}/suspend'.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/devices/{device-id}/echo -H 'Authorization: Bearer <access_key>'
        ```
      operationId: deleteDeviceEchoObject
      tags:
        - Device Echo
      produces:
        - application/json
      parameters:
        - name: device-id
          in: path
          description: The device ID generated by Device Management.
          required: true
          format: UUID, 32 hexadecimal characters
          type: string
      responses:
        204:
          description: Device found and deleted.
        401:
          description: Authentication failure.
        404:
          description: Device not found from Device Echo.

definitions:
  Resource:
    type: object
    required:
      - uri
    properties:
      uri:
        type: string
        description: |-
          The resource URL. This can be the path to:

          - An object; for example, `3303`.
          - An object instance; for example `3303/0`.
          - A resource; for example `3303/0/5602`.

          For more information about the Device Management resource model, please see the [Device Management documentation](https://developer.pelion.com/docs/device-management/current/resources/resource-model.html).

        example: "/sen/light"
      rt:
        type: string
        description: |-
          Application-specific resource type that describes this resource, created by the [client application](https://developer.pelion.com/docs/device-management/current/resources/resource-setup-in-device-management-client.html). Not meant to be a human-readable name for the resource. Multiple resource types may be included, separated by a space.
        example: "light_sensor"
      obs:
        type: boolean
        description: |-
          'Determines whether you can subscribe to changes for this resource. It can have values `true` or `false`.'
        example: true
      type:
        type: string
        description: |-
          The content type of the resource.

          We recommend you use the content types listed in the [LwM2M specification](http://www.openmobilealliance.org/wp/omna/lwm2m/lwm2mregistry.html).
        example: "text/plain"

  ResourceArray:
    type: array
    items:
      $ref: '#/definitions/Resource'

  AsyncID:
    type: object
    properties:
      async-response-id:
        type: string
        description: Asynchronous response unique ID.
        example: "9e3c96b8-c4d7-496a-ab90-cc732b9b560e"

  Presubscription:
    type: object
    properties:
      endpoint-name:
        type: string
        description: Device Management device ID.
        example: "015f3850a657000000000001001002ab"
      endpoint-type:
        type: string
        example: "Light"
      resource-path:
        type: array
        minItems: 1
        items:
          type: string
          description: 'A resource URI.'
          example: "/sen/light"

  PresubscriptionArray:
    type: array
    items:
      $ref: '#/definitions/Presubscription'

  ResourcePath:
    type: string
    description: 'A resource URI.'
    example: "/sen/light"

  SubscriptionsList:
    type: string
    description: 'A list of resource URIs, one per line.'
    example: "/sen/light"

  DeviceRequest:
    type: object
    required:
      - method
      - uri
    properties:
      method:
        type: string
        description: 'The CoAP request method. Allowed values are GET, POST, PUT and DELETE.'
        example: "GET"
      uri:
        type: string
        description: The URI path of the requested resource.
        example: "/5/0/1"
      accept:
        type: string
        description: The content type of an accepted response.
        example: "text/plain"
      content-type:
        type: string
        description: The content type of the payload.
        example: "text/plain"
      payload-b64:
        type: string
        description: The base64 encoded payload to send to the device.
        example: "dmFsdWUxCg=="

  EchoDevice:
    type: object
    required:
      - id
    description: The Device Echo object representing the device.
    properties:
      object:
        type: string
        description: API Resource name
        example: device-echo
      device_id:
        type: string
        description: The device ID.
        example: 015f3850a657000000000001001002ab
      endpoint_name:
        type: string
        description: The endpoint name.
        example: Sensor3222454
      updated_at:
        type: string
        format: date-time
        description: The time of last registration event of a Device Echo object.
        example: 2019-10-20T10:30:55.123Z
      created_at:
        type: string
        format: date-time
        description: Response creation UTC time.
        example: 2020-10-20T10:30:55.123Z
      last_desired_at:
        type: string
        format: date-time
        description: The last time a write command was initiated on a resource.
        example: 2019-10-20T10:30:55.123Z
      last_reported_at:
        type: string
        format: date-time
        description: The last time any resource's reported value was updated.
        example: 2019-10-20T10:30:55.123Z
      resources:
        type: array
        description: The list of device resources stored in Device Echo.
        items:
          $ref: '#/definitions/EchoResource'

  EchoResource:
    type: object
    description: The representation of a single resource of the device stored in Device Echo.
    properties:
      resource_path:
        type: string
        description: The path of the resource.
        example: /3/0/1
      subscribed:
        type: boolean
        description: System-level subscription status of the resource. If any of the applications has placed a subscription, the status is true. Overlapping subscriptions from multiple applications do not increase the load on the device as the server handles the multiplexing.
      desired:
        $ref: '#/definitions/EchoResourceDesired'
      reported:
        $ref: '#/definitions/EchoResourceReported'

  EchoResourceDesired:
    type: object
    description: Resource value written, or queued to be written to the device.
    properties:
      value:
        type: string
        format: byte
        description: The desired value in base64 encoded format.
        example: RGVzaXJlZCB2YWx1ZS4=
      desired_at:
        type: string
        format: date-time
        description: The time of the latest value write was initiated.
        example: 2019-10-20T10:30:55.123Z
      status_updated_at:
        type: string
        format: date-time
        description: The time of the last status update.
        example: 2019-10-20T10:30:55.123Z
      status:
        type: number
        format: integer
        description: The status of the desired value. 0 = 'pending write', 1 = 'success', 2 = 'failed'.

  EchoResourceReported:
    type: object
    description: Reported single resource data received from the device.
    properties:
      value:
        type: string
        format: byte
        description: The reported value in base64 encoded format.
        example: UmVwb3J0ZWQgdmFsdWUu
      reported_at:
        type: string
        format: date-time
        description: The time the last value was reported.
      expires_at:
        type: string
        format: date-time
        description: The time after which the reported value is not valid, calculated based on the max-age of the resource value the device reported.
        example: 2019-10-20T10:30:55.123Z
      content_type:
        type: string
        description: Content type of the reported resource value.
        example: text/plain
